(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}




// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**_UNUSED/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**/
	if (typeof x.$ === 'undefined')
	//*/
	/**_UNUSED/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: '#0' };

function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil = { $: 0 };
var _List_Nil_UNUSED = { $: '[]' };

function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log = F2(function(tag, value)
{
	return value;
});

var _Debug_log_UNUSED = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString(value)
{
	return '<internals>';
}

function _Debug_toString_UNUSED(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.cu.a4 === region.cO.a4)
	{
		return 'on line ' + region.cu.a4;
	}
	return 'on lines ' + region.cu.a4 + ' through ' + region.cO.a4;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**_UNUSED/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }

function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.fd,
		impl.gy,
		impl.ga,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**/
	var node = args['node'];
	//*/
	/**_UNUSED/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS
//
// For some reason, tabs can appear in href protocols and it still works.
// So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
// in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
// so freaky.
//
// Pulling the regular expressions out to the top level gives a slight speed
// boost in small benchmarks (4-10%) but hoisting values to reduce allocation
// can be unpredictable in large programs where JIT may have a harder time with
// functions are not fully self-contained. The benefit is more that the js and
// js_html ones are so weird that I prefer to see them near each other.


var _VirtualDom_RE_script = /^script$/i;
var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;


function _VirtualDom_noScript(tag)
{
	return _VirtualDom_RE_script.test(tag) ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return _VirtualDom_RE_on_formAction.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return _VirtualDom_RE_js.test(value)
		? /**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return _VirtualDom_RE_js_html.test(value)
		? /**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlJson(value)
{
	return (typeof _Json_unwrap(value) === 'string' && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
		? _Json_wrap(
			/**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		) : value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		ci: func(record.ci),
		cv: record.cv,
		co: record.co
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.ci;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.cv;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.co) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.fd,
		impl.gy,
		impl.ga,
		function(sendToApp, initialModel) {
			var view = impl.gA;
			/**/
			var domNode = args['node'];
			//*/
			/**_UNUSED/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.fd,
		impl.gy,
		impl.ga,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.ct && impl.ct(sendToApp)
			var view = impl.gA;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.cE);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.dO) && (_VirtualDom_doc.title = title = doc.dO);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.fw;
	var onUrlRequest = impl.fx;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		ct: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.dD === next.dD
							&& curr.cY === next.cY
							&& curr.dA.a === next.dA.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		fd: function(flags)
		{
			return A3(impl.fd, flags, _Browser_getUrl(), key);
		},
		gA: impl.gA,
		gy: impl.gy,
		ga: impl.ga
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { e6: 'hidden', ew: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { e6: 'mozHidden', ew: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { e6: 'msHidden', ew: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { e6: 'webkitHidden', ew: 'webkitvisibilitychange' }
		: { e6: 'hidden', ew: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		dJ: _Browser_getScene(),
		dT: {
			gC: _Browser_window.pageXOffset,
			gD: _Browser_window.pageYOffset,
			dW: _Browser_doc.documentElement.clientWidth,
			cV: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		dW: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		cV: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			dJ: {
				dW: node.scrollWidth,
				cV: node.scrollHeight
			},
			dT: {
				gC: node.scrollLeft,
				gD: node.scrollTop,
				dW: node.clientWidth,
				cV: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			dJ: _Browser_getScene(),
			dT: {
				gC: x,
				gD: y,
				dW: _Browser_doc.documentElement.clientWidth,
				cV: _Browser_doc.documentElement.clientHeight
			},
			eV: {
				gC: x + rect.left,
				gD: y + rect.top,
				dW: rect.width,
				cV: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}


// eslint-disable-next-line no-unused-vars
var _Texture_load = F6(function (magnify, mininify, horizontalWrap, verticalWrap, flipY, url) {
  var isMipmap = mininify !== 9728 && mininify !== 9729;
  return _Scheduler_binding(function (callback) {
    var img = new Image();
    function createTexture(gl) {
      var texture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, texture);
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magnify);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mininify);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, horizontalWrap);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, verticalWrap);
      if (isMipmap) {
        gl.generateMipmap(gl.TEXTURE_2D);
      }
      gl.bindTexture(gl.TEXTURE_2D, null);
      return texture;
    }
    img.onload = function () {
      var width = img.width;
      var height = img.height;
      var widthPowerOfTwo = (width & (width - 1)) === 0;
      var heightPowerOfTwo = (height & (height - 1)) === 0;
      var isSizeValid = (widthPowerOfTwo && heightPowerOfTwo) || (
        !isMipmap
        && horizontalWrap === 33071 // clamp to edge
        && verticalWrap === 33071
      );
      if (isSizeValid) {
        callback(_Scheduler_succeed({
          $: 0,
          eF: createTexture,
          a: width,
          b: height
        }));
      } else {
        callback(_Scheduler_fail(A2(
          $elm_explorations$webgl$WebGL$Texture$SizeError,
          width,
          height
        )));
      }
    };
    img.onerror = function () {
      callback(_Scheduler_fail($elm_explorations$webgl$WebGL$Texture$LoadError));
    };
    if (url.slice(0, 5) !== 'data:') {
      img.crossOrigin = 'Anonymous';
    }
    img.src = url;
  });
});

// eslint-disable-next-line no-unused-vars
var _Texture_size = function (texture) {
  return _Utils_Tuple2(texture.a, texture.b);
};



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}

var _WebGL_guid = 0;

function _WebGL_listEach(fn, list) {
  for (; list.b; list = list.b) {
    fn(list.a);
  }
}

function _WebGL_listLength(list) {
  var length = 0;
  for (; list.b; list = list.b) {
    length++;
  }
  return length;
}

var _WebGL_rAF = typeof requestAnimationFrame !== 'undefined' ?
  requestAnimationFrame :
  function (cb) { setTimeout(cb, 1000 / 60); };

// eslint-disable-next-line no-unused-vars
var _WebGL_entity = F5(function (settings, vert, frag, mesh, uniforms) {
  return {
    $: 0,
    a: settings,
    b: vert,
    c: frag,
    d: mesh,
    e: uniforms
  };
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableBlend = F2(function (cache, setting) {
  var blend = cache.blend;
  blend.toggle = cache.toggle;

  if (!blend.enabled) {
    cache.gl.enable(cache.gl.BLEND);
    blend.enabled = true;
  }

  // a   b   c   d   e   f   g h i j
  // eq1 f11 f12 eq2 f21 f22 r g b a
  if (blend.a !== setting.a || blend.d !== setting.d) {
    cache.gl.blendEquationSeparate(setting.a, setting.d);
    blend.a = setting.a;
    blend.d = setting.d;
  }
  if (blend.b !== setting.b || blend.c !== setting.c || blend.e !== setting.e || blend.f !== setting.f) {
    cache.gl.blendFuncSeparate(setting.b, setting.c, setting.e, setting.f);
    blend.b = setting.b;
    blend.c = setting.c;
    blend.e = setting.e;
    blend.f = setting.f;
  }
  if (blend.g !== setting.g || blend.h !== setting.h || blend.i !== setting.i || blend.j !== setting.j) {
    cache.gl.blendColor(setting.g, setting.h, setting.i, setting.j);
    blend.g = setting.g;
    blend.h = setting.h;
    blend.i = setting.i;
    blend.j = setting.j;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableDepthTest = F2(function (cache, setting) {
  var depthTest = cache.depthTest;
  depthTest.toggle = cache.toggle;

  if (!depthTest.enabled) {
    cache.gl.enable(cache.gl.DEPTH_TEST);
    depthTest.enabled = true;
  }

  // a    b    c    d
  // func mask near far
  if (depthTest.a !== setting.a) {
    cache.gl.depthFunc(setting.a);
    depthTest.a = setting.a;
  }
  if (depthTest.b !== setting.b) {
    cache.gl.depthMask(setting.b);
    depthTest.b = setting.b;
  }
  if (depthTest.c !== setting.c || depthTest.d !== setting.d) {
    cache.gl.depthRange(setting.c, setting.d);
    depthTest.c = setting.c;
    depthTest.d = setting.d;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableStencilTest = F2(function (cache, setting) {
  var stencilTest = cache.stencilTest;
  stencilTest.toggle = cache.toggle;

  if (!stencilTest.enabled) {
    cache.gl.enable(cache.gl.STENCIL_TEST);
    stencilTest.enabled = true;
  }

  // a   b    c         d     e     f      g      h     i     j      k
  // ref mask writeMask test1 fail1 zfail1 zpass1 test2 fail2 zfail2 zpass2
  if (stencilTest.d !== setting.d || stencilTest.a !== setting.a || stencilTest.b !== setting.b) {
    cache.gl.stencilFuncSeparate(cache.gl.FRONT, setting.d, setting.a, setting.b);
    stencilTest.d = setting.d;
    // a and b are set in the cache.gl.BACK diffing because they should be the same
  }
  if (stencilTest.e !== setting.e || stencilTest.f !== setting.f || stencilTest.g !== setting.g) {
    cache.gl.stencilOpSeparate(cache.gl.FRONT, setting.e, setting.f, setting.g);
    stencilTest.e = setting.e;
    stencilTest.f = setting.f;
    stencilTest.g = setting.g;
  }
  if (stencilTest.c !== setting.c) {
    cache.gl.stencilMask(setting.c);
    stencilTest.c = setting.c;
  }
  if (stencilTest.h !== setting.h || stencilTest.a !== setting.a || stencilTest.b !== setting.b) {
    cache.gl.stencilFuncSeparate(cache.gl.BACK, setting.h, setting.a, setting.b);
    stencilTest.h = setting.h;
    stencilTest.a = setting.a;
    stencilTest.b = setting.b;
  }
  if (stencilTest.i !== setting.i || stencilTest.j !== setting.j || stencilTest.k !== setting.k) {
    cache.gl.stencilOpSeparate(cache.gl.BACK, setting.i, setting.j, setting.k);
    stencilTest.i = setting.i;
    stencilTest.j = setting.j;
    stencilTest.k = setting.k;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableScissor = F2(function (cache, setting) {
  var scissor = cache.scissor;
  scissor.toggle = cache.toggle;

  if (!scissor.enabled) {
    cache.gl.enable(cache.gl.SCISSOR_TEST);
    scissor.enabled = true;
  }

  if (scissor.a !== setting.a || scissor.b !== setting.b || scissor.c !== setting.c || scissor.d !== setting.d) {
    cache.gl.scissor(setting.a, setting.b, setting.c, setting.d);
    scissor.a = setting.a;
    scissor.b = setting.b;
    scissor.c = setting.c;
    scissor.d = setting.d;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableColorMask = F2(function (cache, setting) {
  var colorMask = cache.colorMask;
  colorMask.toggle = cache.toggle;
  colorMask.enabled = true;

  if (colorMask.a !== setting.a || colorMask.b !== setting.b || colorMask.c !== setting.c || colorMask.d !== setting.d) {
    cache.gl.colorMask(setting.a, setting.b, setting.c, setting.d);
    colorMask.a = setting.a;
    colorMask.b = setting.b;
    colorMask.c = setting.c;
    colorMask.d = setting.d;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableCullFace = F2(function (cache, setting) {
  var cullFace = cache.cullFace;
  cullFace.toggle = cache.toggle;

  if (!cullFace.enabled) {
    cache.gl.enable(cache.gl.CULL_FACE);
    cullFace.enabled = true;
  }

  if (cullFace.a !== setting.a) {
    cache.gl.cullFace(setting.a);
    cullFace.a = setting.a;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enablePolygonOffset = F2(function (cache, setting) {
  var polygonOffset = cache.polygonOffset;
  polygonOffset.toggle = cache.toggle;

  if (!polygonOffset.enabled) {
    cache.gl.enable(cache.gl.POLYGON_OFFSET_FILL);
    polygonOffset.enabled = true;
  }

  if (polygonOffset.a !== setting.a || polygonOffset.b !== setting.b) {
    cache.gl.polygonOffset(setting.a, setting.b);
    polygonOffset.a = setting.a;
    polygonOffset.b = setting.b;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableSampleCoverage = F2(function (cache, setting) {
  var sampleCoverage = cache.sampleCoverage;
  sampleCoverage.toggle = cache.toggle;

  if (!sampleCoverage.enabled) {
    cache.gl.enable(cache.gl.SAMPLE_COVERAGE);
    sampleCoverage.enabled = true;
  }

  if (sampleCoverage.a !== setting.a || sampleCoverage.b !== setting.b) {
    cache.gl.sampleCoverage(setting.a, setting.b);
    sampleCoverage.a = setting.a;
    sampleCoverage.b = setting.b;
  }
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableSampleAlphaToCoverage = function (cache) {
  var sampleAlphaToCoverage = cache.sampleAlphaToCoverage;
  sampleAlphaToCoverage.toggle = cache.toggle;

  if (!sampleAlphaToCoverage.enabled) {
    cache.gl.enable(cache.gl.SAMPLE_ALPHA_TO_COVERAGE);
    sampleAlphaToCoverage.enabled = true;
  }
};

var _WebGL_disableBlend = function (cache) {
  if (cache.blend.enabled) {
    cache.gl.disable(cache.gl.BLEND);
    cache.blend.enabled = false;
  }
};

var _WebGL_disableDepthTest = function (cache) {
  if (cache.depthTest.enabled) {
    cache.gl.disable(cache.gl.DEPTH_TEST);
    cache.depthTest.enabled = false;
  }
};

var _WebGL_disableStencilTest = function (cache) {
  if (cache.stencilTest.enabled) {
    cache.gl.disable(cache.gl.STENCIL_TEST);
    cache.stencilTest.enabled = false;
  }
};

var _WebGL_disableScissor = function (cache) {
  if (cache.scissor.enabled) {
    cache.gl.disable(cache.gl.SCISSOR_TEST);
    cache.scissor.enabled = false;
  }
};

var _WebGL_disableColorMask = function (cache) {
  var colorMask = cache.colorMask;
  if (!colorMask.a || !colorMask.b || !colorMask.c || !colorMask.d) {
    cache.gl.colorMask(true, true, true, true);
    colorMask.a = true;
    colorMask.b = true;
    colorMask.c = true;
    colorMask.d = true;
  }
};

var _WebGL_disableCullFace = function (cache) {
  cache.gl.disable(cache.gl.CULL_FACE);
};

var _WebGL_disablePolygonOffset = function (cache) {
  cache.gl.disable(cache.gl.POLYGON_OFFSET_FILL);
};

var _WebGL_disableSampleCoverage = function (cache) {
  cache.gl.disable(cache.gl.SAMPLE_COVERAGE);
};

var _WebGL_disableSampleAlphaToCoverage = function (cache) {
  cache.gl.disable(cache.gl.SAMPLE_ALPHA_TO_COVERAGE);
};

var _WebGL_settings = ['blend', 'depthTest', 'stencilTest', 'scissor', 'colorMask', 'cullFace', 'polygonOffset', 'sampleCoverage', 'sampleAlphaToCoverage'];
var _WebGL_disableFunctions = [_WebGL_disableBlend, _WebGL_disableDepthTest, _WebGL_disableStencilTest, _WebGL_disableScissor, _WebGL_disableColorMask, _WebGL_disableCullFace, _WebGL_disablePolygonOffset, _WebGL_disableSampleCoverage, _WebGL_disableSampleAlphaToCoverage];

function _WebGL_doCompile(gl, src, type) {
  var shader = gl.createShader(type);
  // Enable OES_standard_derivatives extension
  gl.shaderSource(shader, '#extension GL_OES_standard_derivatives : enable\n' + src);
  gl.compileShader(shader);
  return shader;
}

function _WebGL_doLink(gl, vshader, fshader) {
  var program = gl.createProgram();

  gl.attachShader(program, vshader);
  gl.attachShader(program, fshader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    throw ('Link failed: ' + gl.getProgramInfoLog(program) +
      '\nvs info-log: ' + gl.getShaderInfoLog(vshader) +
      '\nfs info-log: ' + gl.getShaderInfoLog(fshader));
  }

  return program;
}

function _WebGL_getAttributeInfo(gl, type) {
  switch (type) {
    case gl.FLOAT:
      return { size: 1, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_VEC2:
      return { size: 2, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_VEC3:
      return { size: 3, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_VEC4:
      return { size: 4, arraySize: 1, type: Float32Array, baseType: gl.FLOAT };
    case gl.FLOAT_MAT4:
      return { size: 4, arraySize: 4, type: Float32Array, baseType: gl.FLOAT };
    case gl.INT:
      return { size: 1, arraySize: 1, type: Int32Array, baseType: gl.INT };
  }
}

/**
 *  Form the buffer for a given attribute.
 *
 *  @param {WebGLRenderingContext} gl context
 *  @param {WebGLActiveInfo} attribute the attribute to bind to.
 *         We use its name to grab the record by name and also to know
 *         how many elements we need to grab.
 *  @param {Mesh} mesh The mesh coming in from Elm.
 *  @param {Object} attributes The mapping between the attribute names and Elm fields
 *  @return {WebGLBuffer}
 */
function _WebGL_doBindAttribute(gl, attribute, mesh, attributes) {
  // The length of the number of vertices that
  // complete one 'thing' based on the drawing mode.
  // ie, 2 for Lines, 3 for Triangles, etc.
  var elemSize = mesh.a.cN;

  var idxKeys = [];
  for (var i = 0; i < elemSize; i++) {
    idxKeys.push(String.fromCharCode(97 + i));
  }

  function dataFill(data, cnt, fillOffset, elem, key) {
    var i;
    if (elemSize === 1) {
      for (i = 0; i < cnt; i++) {
        data[fillOffset++] = cnt === 1 ? elem[key] : elem[key][i];
      }
    } else {
      idxKeys.forEach(function (idx) {
        for (i = 0; i < cnt; i++) {
          data[fillOffset++] = cnt === 1 ? elem[idx][key] : elem[idx][key][i];
        }
      });
    }
  }

  var attributeInfo = _WebGL_getAttributeInfo(gl, attribute.type);

  if (attributeInfo === undefined) {
    throw new Error('No info available for: ' + attribute.type);
  }

  var dataIdx = 0;
  var dataOffset = attributeInfo.size * attributeInfo.arraySize * elemSize;
  var array = new attributeInfo.type(_WebGL_listLength(mesh.b) * dataOffset);

  _WebGL_listEach(function (elem) {
    dataFill(array, attributeInfo.size * attributeInfo.arraySize, dataIdx, elem, attributes[attribute.name] || attribute.name);
    dataIdx += dataOffset;
  }, mesh.b);

  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);
  return buffer;
}

/**
 *  This sets up the binding caching buffers.
 *
 *  We don't actually bind any buffers now except for the indices buffer.
 *  The problem with filling the buffers here is that it is possible to
 *  have a buffer shared between two webgl shaders;
 *  which could have different active attributes. If we bind it here against
 *  a particular program, we might not bind them all. That final bind is now
 *  done right before drawing.
 *
 *  @param {WebGLRenderingContext} gl context
 *  @param {Mesh} mesh a mesh object from Elm
 *  @return {Object} buffer - an object with the following properties
 *  @return {Number} buffer.numIndices
 *  @return {WebGLBuffer|null} buffer.indexBuffer - optional index buffer
 *  @return {Object} buffer.buffers - will be used to buffer attributes
 */
function _WebGL_doBindSetup(gl, mesh) {
  if (mesh.a.c$ > 0) {
    var indexBuffer = gl.createBuffer();
    var indices = _WebGL_makeIndexedBuffer(mesh.c, mesh.a.c$);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
    return {
      numIndices: indices.length,
      indexBuffer: indexBuffer,
      buffers: {}
    };
  } else {
    return {
      numIndices: mesh.a.cN * _WebGL_listLength(mesh.b),
      indexBuffer: null,
      buffers: {}
    };
  }
}

/**
 *  Create an indices array and fill it from indices
 *  based on the size of the index
 *
 *  @param {List} indicesList the list of indices
 *  @param {Number} indexSize the size of the index
 *  @return {Uint32Array} indices
 */
function _WebGL_makeIndexedBuffer(indicesList, indexSize) {
  var indices = new Uint32Array(_WebGL_listLength(indicesList) * indexSize);
  var fillOffset = 0;
  var i;
  _WebGL_listEach(function (elem) {
    if (indexSize === 1) {
      indices[fillOffset++] = elem;
    } else {
      for (i = 0; i < indexSize; i++) {
        indices[fillOffset++] = elem[String.fromCharCode(97 + i)];
      }
    }
  }, indicesList);
  return indices;
}

function _WebGL_getProgID(vertID, fragID) {
  return vertID + '#' + fragID;
}

var _WebGL_drawGL = F2(function (model, domNode) {
  var cache = model.f;
  var gl = cache.gl;

  if (!gl) {
    return domNode;
  }

  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

  if (!cache.depthTest.b) {
    gl.depthMask(true);
    cache.depthTest.b = true;
  }
  if (cache.stencilTest.c !== cache.STENCIL_WRITEMASK) {
    gl.stencilMask(cache.STENCIL_WRITEMASK);
    cache.stencilTest.c = cache.STENCIL_WRITEMASK;
  }
  _WebGL_disableScissor(cache);
  _WebGL_disableColorMask(cache);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);

  function drawEntity(entity) {
    if (!entity.d.b.b) {
      return; // Empty list
    }

    var progid;
    var program;
    var i;

    if (entity.b.id && entity.c.id) {
      progid = _WebGL_getProgID(entity.b.id, entity.c.id);
      program = cache.programs[progid];
    }

    if (!program) {

      var vshader;
      if (entity.b.id) {
        vshader = cache.shaders[entity.b.id];
      } else {
        entity.b.id = _WebGL_guid++;
      }

      if (!vshader) {
        vshader = _WebGL_doCompile(gl, entity.b.src, gl.VERTEX_SHADER);
        cache.shaders[entity.b.id] = vshader;
      }

      var fshader;
      if (entity.c.id) {
        fshader = cache.shaders[entity.c.id];
      } else {
        entity.c.id = _WebGL_guid++;
      }

      if (!fshader) {
        fshader = _WebGL_doCompile(gl, entity.c.src, gl.FRAGMENT_SHADER);
        cache.shaders[entity.c.id] = fshader;
      }

      var glProgram = _WebGL_doLink(gl, vshader, fshader);

      program = {
        glProgram: glProgram,
        attributes: Object.assign({}, entity.b.attributes, entity.c.attributes),
        currentUniforms: {},
        activeAttributes: [],
        activeAttributeLocations: []
      };

      program.uniformSetters = _WebGL_createUniformSetters(
        gl,
        model,
        program,
        Object.assign({}, entity.b.uniforms, entity.c.uniforms)
      );

      var numActiveAttributes = gl.getProgramParameter(glProgram, gl.ACTIVE_ATTRIBUTES);
      for (i = 0; i < numActiveAttributes; i++) {
        var attribute = gl.getActiveAttrib(glProgram, i);
        var attribLocation = gl.getAttribLocation(glProgram, attribute.name);
        program.activeAttributes.push(attribute);
        program.activeAttributeLocations.push(attribLocation);
      }

      progid = _WebGL_getProgID(entity.b.id, entity.c.id);
      cache.programs[progid] = program;
    }

    if (cache.lastProgId !== progid) {
      gl.useProgram(program.glProgram);
      cache.lastProgId = progid;
    }

    _WebGL_setUniforms(program.uniformSetters, entity.e);

    var buffer = cache.buffers.get(entity.d);

    if (!buffer) {
      buffer = _WebGL_doBindSetup(gl, entity.d);
      cache.buffers.set(entity.d, buffer);
    }

    for (i = 0; i < program.activeAttributes.length; i++) {
      attribute = program.activeAttributes[i];
      attribLocation = program.activeAttributeLocations[i];

      if (buffer.buffers[attribute.name] === undefined) {
        buffer.buffers[attribute.name] = _WebGL_doBindAttribute(gl, attribute, entity.d, program.attributes);
      }
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffers[attribute.name]);

      var attributeInfo = _WebGL_getAttributeInfo(gl, attribute.type);
      if (attributeInfo.arraySize === 1) {
        gl.enableVertexAttribArray(attribLocation);
        gl.vertexAttribPointer(attribLocation, attributeInfo.size, attributeInfo.baseType, false, 0, 0);
      } else {
        // Point to four vec4 in case of mat4
        var offset = attributeInfo.size * 4; // float32 takes 4 bytes
        var stride = offset * attributeInfo.arraySize;
        for (var m = 0; m < attributeInfo.arraySize; m++) {
          gl.enableVertexAttribArray(attribLocation + m);
          gl.vertexAttribPointer(attribLocation + m, attributeInfo.size, attributeInfo.baseType, false, stride, offset * m);
        }
      }
    }

    // Apply all the new settings
    cache.toggle = !cache.toggle;
    _WebGL_listEach($elm_explorations$webgl$WebGL$Internal$enableSetting(cache), entity.a);
    // Disable the settings that were applied in the previous draw call
    for (i = 0; i < _WebGL_settings.length; i++) {
      var setting = cache[_WebGL_settings[i]];
      if (setting.toggle !== cache.toggle && setting.enabled) {
        _WebGL_disableFunctions[i](cache);
        setting.enabled = false;
        setting.toggle = cache.toggle;
      }
    }

    if (buffer.indexBuffer) {
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer.indexBuffer);
      gl.drawElements(entity.d.a.dn, buffer.numIndices, gl.UNSIGNED_INT, 0);
    } else {
      gl.drawArrays(entity.d.a.dn, 0, buffer.numIndices);
    }
  }

  _WebGL_listEach(drawEntity, model.g);
  return domNode;
});

function _WebGL_createUniformSetters(gl, model, program, uniformsMap) {
  var glProgram = program.glProgram;
  var currentUniforms = program.currentUniforms;
  var textureCounter = 0;
  var cache = model.f;
  function createUniformSetter(glProgram, uniform) {
    var uniformName = uniform.name;
    var uniformLocation = gl.getUniformLocation(glProgram, uniformName);
    switch (uniform.type) {
      case gl.INT:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform1i(uniformLocation, value);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform1f(uniformLocation, value);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_VEC2:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform2f(uniformLocation, value[0], value[1]);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_VEC3:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform3f(uniformLocation, value[0], value[1], value[2]);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_VEC4:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform4f(uniformLocation, value[0], value[1], value[2], value[3]);
            currentUniforms[uniformName] = value;
          }
        };
      case gl.FLOAT_MAT4:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniformMatrix4fv(uniformLocation, false, new Float32Array(value));
            currentUniforms[uniformName] = value;
          }
        };
      case gl.SAMPLER_2D:
        var currentTexture = textureCounter++;
        return function (texture) {
          gl.activeTexture(gl.TEXTURE0 + currentTexture);
          var tex = cache.textures.get(texture);
          if (!tex) {
            tex = texture.eF(gl);
            cache.textures.set(texture, tex);
          }
          gl.bindTexture(gl.TEXTURE_2D, tex);
          if (currentUniforms[uniformName] !== texture) {
            gl.uniform1i(uniformLocation, currentTexture);
            currentUniforms[uniformName] = texture;
          }
        };
      case gl.BOOL:
        return function (value) {
          if (currentUniforms[uniformName] !== value) {
            gl.uniform1i(uniformLocation, value);
            currentUniforms[uniformName] = value;
          }
        };
      default:
        return function () { };
    }
  }

  var uniformSetters = {};
  var numUniforms = gl.getProgramParameter(glProgram, gl.ACTIVE_UNIFORMS);
  for (var i = 0; i < numUniforms; i++) {
    var uniform = gl.getActiveUniform(glProgram, i);
    uniformSetters[uniformsMap[uniform.name] || uniform.name] = createUniformSetter(glProgram, uniform);
  }

  return uniformSetters;
}

function _WebGL_setUniforms(setters, values) {
  Object.keys(values).forEach(function (name) {
    var setter = setters[name];
    if (setter) {
      setter(values[name]);
    }
  });
}

// VIRTUAL-DOM WIDGET

// eslint-disable-next-line no-unused-vars
var _WebGL_toHtml = F3(function (options, factList, entities) {
  return _VirtualDom_custom(
    factList,
    {
      g: entities,
      f: {},
      h: options
    },
    _WebGL_render,
    _WebGL_diff
  );
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableAlpha = F2(function (options, option) {
  options.contextAttributes.alpha = true;
  options.contextAttributes.premultipliedAlpha = option.a;
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableDepth = F2(function (options, option) {
  options.contextAttributes.depth = true;
  options.sceneSettings.push(function (gl) {
    gl.clearDepth(option.a);
  });
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableStencil = F2(function (options, option) {
  options.contextAttributes.stencil = true;
  options.sceneSettings.push(function (gl) {
    gl.clearStencil(option.a);
  });
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableAntialias = F2(function (options, option) {
  options.contextAttributes.antialias = true;
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enableClearColor = F2(function (options, option) {
  options.sceneSettings.push(function (gl) {
    gl.clearColor(option.a, option.b, option.c, option.d);
  });
});

// eslint-disable-next-line no-unused-vars
var _WebGL_enablePreserveDrawingBuffer = F2(function (options, option) {
  options.contextAttributes.preserveDrawingBuffer = true;
});

/**
 *  Creates canvas and schedules initial _WebGL_drawGL
 *  @param {Object} model
 *  @param {Object} model.f that may contain the following properties:
           gl, shaders, programs, buffers, textures
 *  @param {List<Option>} model.h list of options coming from Elm
 *  @param {List<Entity>} model.g list of entities coming from Elm
 *  @return {HTMLElement} <canvas> if WebGL is supported, otherwise a <div>
 */
function _WebGL_render(model) {
  var options = {
    contextAttributes: {
      alpha: false,
      depth: false,
      stencil: false,
      antialias: false,
      premultipliedAlpha: false,
      preserveDrawingBuffer: false
    },
    sceneSettings: []
  };

  _WebGL_listEach(function (option) {
    return A2($elm_explorations$webgl$WebGL$Internal$enableOption, options, option);
  }, model.h);

  var canvas = _VirtualDom_doc.createElement('canvas');
  var gl = canvas.getContext && (
    canvas.getContext('webgl', options.contextAttributes) ||
    canvas.getContext('experimental-webgl', options.contextAttributes)
  );

  if (gl && typeof WeakMap !== 'undefined') {
    options.sceneSettings.forEach(function (sceneSetting) {
      sceneSetting(gl);
    });

    // Activate extensions
    gl.getExtension('OES_standard_derivatives');
    gl.getExtension('OES_element_index_uint');

    model.f.gl = gl;

    // Cache the current settings in order to diff them to avoid redundant calls
    // https://emscripten.org/docs/optimizing/Optimizing-WebGL.html#avoid-redundant-calls
    model.f.toggle = false; // used to diff the settings from the previous and current draw calls
    model.f.blend = { enabled: false, toggle: false };
    model.f.depthTest = { enabled: false, toggle: false };
    model.f.stencilTest = { enabled: false, toggle: false };
    model.f.scissor = { enabled: false, toggle: false };
    model.f.colorMask = { enabled: false, toggle: false };
    model.f.cullFace = { enabled: false, toggle: false };
    model.f.polygonOffset = { enabled: false, toggle: false };
    model.f.sampleCoverage = { enabled: false, toggle: false };
    model.f.sampleAlphaToCoverage = { enabled: false, toggle: false };

    model.f.shaders = [];
    model.f.programs = {};
    model.f.lastProgId = null;
    model.f.buffers = new WeakMap();
    model.f.textures = new WeakMap();
    // Memorize the initial stencil write mask, because
    // browsers may have different number of stencil bits
    model.f.STENCIL_WRITEMASK = gl.getParameter(gl.STENCIL_WRITEMASK);

    // Render for the first time.
    // This has to be done in animation frame,
    // because the canvas is not in the DOM yet
    _WebGL_rAF(function () {
      return A2(_WebGL_drawGL, model, canvas);
    });

  } else {
    canvas = _VirtualDom_doc.createElement('div');
    canvas.innerHTML = '<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!';
  }

  return canvas;
}

function _WebGL_diff(oldModel, newModel) {
  newModel.f = oldModel.f;
  return _WebGL_drawGL(newModel);
}


/*
 * Copyright (c) 2010 Mozilla Corporation
 * Copyright (c) 2010 Vladimir Vukicevic
 * Copyright (c) 2013 John Mayer
 * Copyright (c) 2018 Andrey Kuzmin
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

// Vector2

var _MJS_v2 = F2(function(x, y) {
    return new Float64Array([x, y]);
});

var _MJS_v2getX = function(a) {
    return a[0];
};

var _MJS_v2getY = function(a) {
    return a[1];
};

var _MJS_v2setX = F2(function(x, a) {
    return new Float64Array([x, a[1]]);
});

var _MJS_v2setY = F2(function(y, a) {
    return new Float64Array([a[0], y]);
});

var _MJS_v2toRecord = function(a) {
    return { gC: a[0], gD: a[1] };
};

var _MJS_v2fromRecord = function(r) {
    return new Float64Array([r.gC, r.gD]);
};

var _MJS_v2add = F2(function(a, b) {
    var r = new Float64Array(2);
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    return r;
});

var _MJS_v2sub = F2(function(a, b) {
    var r = new Float64Array(2);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    return r;
});

var _MJS_v2negate = function(a) {
    var r = new Float64Array(2);
    r[0] = -a[0];
    r[1] = -a[1];
    return r;
};

var _MJS_v2direction = F2(function(a, b) {
    var r = new Float64Array(2);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    var im = 1.0 / _MJS_v2lengthLocal(r);
    r[0] = r[0] * im;
    r[1] = r[1] * im;
    return r;
});

function _MJS_v2lengthLocal(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1]);
}
var _MJS_v2length = _MJS_v2lengthLocal;

var _MJS_v2lengthSquared = function(a) {
    return a[0] * a[0] + a[1] * a[1];
};

var _MJS_v2distance = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    return Math.sqrt(dx * dx + dy * dy);
});

var _MJS_v2distanceSquared = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    return dx * dx + dy * dy;
});

var _MJS_v2normalize = function(a) {
    var r = new Float64Array(2);
    var im = 1.0 / _MJS_v2lengthLocal(a);
    r[0] = a[0] * im;
    r[1] = a[1] * im;
    return r;
};

var _MJS_v2scale = F2(function(k, a) {
    var r = new Float64Array(2);
    r[0] = a[0] * k;
    r[1] = a[1] * k;
    return r;
});

var _MJS_v2dot = F2(function(a, b) {
    return a[0] * b[0] + a[1] * b[1];
});

// Vector3

var _MJS_v3temp1Local = new Float64Array(3);
var _MJS_v3temp2Local = new Float64Array(3);
var _MJS_v3temp3Local = new Float64Array(3);

var _MJS_v3 = F3(function(x, y, z) {
    return new Float64Array([x, y, z]);
});

var _MJS_v3getX = function(a) {
    return a[0];
};

var _MJS_v3getY = function(a) {
    return a[1];
};

var _MJS_v3getZ = function(a) {
    return a[2];
};

var _MJS_v3setX = F2(function(x, a) {
    return new Float64Array([x, a[1], a[2]]);
});

var _MJS_v3setY = F2(function(y, a) {
    return new Float64Array([a[0], y, a[2]]);
});

var _MJS_v3setZ = F2(function(z, a) {
    return new Float64Array([a[0], a[1], z]);
});

var _MJS_v3toRecord = function(a) {
    return { gC: a[0], gD: a[1], gE: a[2] };
};

var _MJS_v3fromRecord = function(r) {
    return new Float64Array([r.gC, r.gD, r.gE]);
};

var _MJS_v3add = F2(function(a, b) {
    var r = new Float64Array(3);
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    return r;
});

function _MJS_v3subLocal(a, b, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    return r;
}
var _MJS_v3sub = F2(_MJS_v3subLocal);

var _MJS_v3negate = function(a) {
    var r = new Float64Array(3);
    r[0] = -a[0];
    r[1] = -a[1];
    r[2] = -a[2];
    return r;
};

function _MJS_v3directionLocal(a, b, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    return _MJS_v3normalizeLocal(_MJS_v3subLocal(a, b, r), r);
}
var _MJS_v3direction = F2(_MJS_v3directionLocal);

function _MJS_v3lengthLocal(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
}
var _MJS_v3length = _MJS_v3lengthLocal;

var _MJS_v3lengthSquared = function(a) {
    return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
};

var _MJS_v3distance = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    return Math.sqrt(dx * dx + dy * dy + dz * dz);
});

var _MJS_v3distanceSquared = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    return dx * dx + dy * dy + dz * dz;
});

function _MJS_v3normalizeLocal(a, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    var im = 1.0 / _MJS_v3lengthLocal(a);
    r[0] = a[0] * im;
    r[1] = a[1] * im;
    r[2] = a[2] * im;
    return r;
}
var _MJS_v3normalize = _MJS_v3normalizeLocal;

var _MJS_v3scale = F2(function(k, a) {
    return new Float64Array([a[0] * k, a[1] * k, a[2] * k]);
});

var _MJS_v3dotLocal = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};
var _MJS_v3dot = F2(_MJS_v3dotLocal);

function _MJS_v3crossLocal(a, b, r) {
    if (r === undefined) {
        r = new Float64Array(3);
    }
    r[0] = a[1] * b[2] - a[2] * b[1];
    r[1] = a[2] * b[0] - a[0] * b[2];
    r[2] = a[0] * b[1] - a[1] * b[0];
    return r;
}
var _MJS_v3cross = F2(_MJS_v3crossLocal);

var _MJS_v3mul4x4 = F2(function(m, v) {
    var w;
    var tmp = _MJS_v3temp1Local;
    var r = new Float64Array(3);

    tmp[0] = m[3];
    tmp[1] = m[7];
    tmp[2] = m[11];
    w = _MJS_v3dotLocal(v, tmp) + m[15];
    tmp[0] = m[0];
    tmp[1] = m[4];
    tmp[2] = m[8];
    r[0] = (_MJS_v3dotLocal(v, tmp) + m[12]) / w;
    tmp[0] = m[1];
    tmp[1] = m[5];
    tmp[2] = m[9];
    r[1] = (_MJS_v3dotLocal(v, tmp) + m[13]) / w;
    tmp[0] = m[2];
    tmp[1] = m[6];
    tmp[2] = m[10];
    r[2] = (_MJS_v3dotLocal(v, tmp) + m[14]) / w;
    return r;
});

// Vector4

var _MJS_v4 = F4(function(x, y, z, w) {
    return new Float64Array([x, y, z, w]);
});

var _MJS_v4getX = function(a) {
    return a[0];
};

var _MJS_v4getY = function(a) {
    return a[1];
};

var _MJS_v4getZ = function(a) {
    return a[2];
};

var _MJS_v4getW = function(a) {
    return a[3];
};

var _MJS_v4setX = F2(function(x, a) {
    return new Float64Array([x, a[1], a[2], a[3]]);
});

var _MJS_v4setY = F2(function(y, a) {
    return new Float64Array([a[0], y, a[2], a[3]]);
});

var _MJS_v4setZ = F2(function(z, a) {
    return new Float64Array([a[0], a[1], z, a[3]]);
});

var _MJS_v4setW = F2(function(w, a) {
    return new Float64Array([a[0], a[1], a[2], w]);
});

var _MJS_v4toRecord = function(a) {
    return { gC: a[0], gD: a[1], gE: a[2], dU: a[3] };
};

var _MJS_v4fromRecord = function(r) {
    return new Float64Array([r.gC, r.gD, r.gE, r.dU]);
};

var _MJS_v4add = F2(function(a, b) {
    var r = new Float64Array(4);
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    r[3] = a[3] + b[3];
    return r;
});

var _MJS_v4sub = F2(function(a, b) {
    var r = new Float64Array(4);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    r[3] = a[3] - b[3];
    return r;
});

var _MJS_v4negate = function(a) {
    var r = new Float64Array(4);
    r[0] = -a[0];
    r[1] = -a[1];
    r[2] = -a[2];
    r[3] = -a[3];
    return r;
};

var _MJS_v4direction = F2(function(a, b) {
    var r = new Float64Array(4);
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    r[3] = a[3] - b[3];
    var im = 1.0 / _MJS_v4lengthLocal(r);
    r[0] = r[0] * im;
    r[1] = r[1] * im;
    r[2] = r[2] * im;
    r[3] = r[3] * im;
    return r;
});

function _MJS_v4lengthLocal(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);
}
var _MJS_v4length = _MJS_v4lengthLocal;

var _MJS_v4lengthSquared = function(a) {
    return a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3];
};

var _MJS_v4distance = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    var dw = a[3] - b[3];
    return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);
});

var _MJS_v4distanceSquared = F2(function(a, b) {
    var dx = a[0] - b[0];
    var dy = a[1] - b[1];
    var dz = a[2] - b[2];
    var dw = a[3] - b[3];
    return dx * dx + dy * dy + dz * dz + dw * dw;
});

var _MJS_v4normalize = function(a) {
    var r = new Float64Array(4);
    var im = 1.0 / _MJS_v4lengthLocal(a);
    r[0] = a[0] * im;
    r[1] = a[1] * im;
    r[2] = a[2] * im;
    r[3] = a[3] * im;
    return r;
};

var _MJS_v4scale = F2(function(k, a) {
    var r = new Float64Array(4);
    r[0] = a[0] * k;
    r[1] = a[1] * k;
    r[2] = a[2] * k;
    r[3] = a[3] * k;
    return r;
});

var _MJS_v4dot = F2(function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
});

// Matrix4

var _MJS_m4x4temp1Local = new Float64Array(16);
var _MJS_m4x4temp2Local = new Float64Array(16);

var _MJS_m4x4identity = new Float64Array([
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0
]);

var _MJS_m4x4fromRecord = function(r) {
    var m = new Float64Array(16);
    m[0] = r.c7;
    m[1] = r.db;
    m[2] = r.df;
    m[3] = r.dj;
    m[4] = r.c8;
    m[5] = r.dc;
    m[6] = r.dg;
    m[7] = r.dk;
    m[8] = r.c9;
    m[9] = r.dd;
    m[10] = r.dh;
    m[11] = r.dl;
    m[12] = r.da;
    m[13] = r.de;
    m[14] = r.di;
    m[15] = r.dm;
    return m;
};

var _MJS_m4x4toRecord = function(m) {
    return {
        c7: m[0], db: m[1], df: m[2], dj: m[3],
        c8: m[4], dc: m[5], dg: m[6], dk: m[7],
        c9: m[8], dd: m[9], dh: m[10], dl: m[11],
        da: m[12], de: m[13], di: m[14], dm: m[15]
    };
};

var _MJS_m4x4inverse = function(m) {
    var r = new Float64Array(16);

    r[0] = m[5] * m[10] * m[15] - m[5] * m[11] * m[14] - m[9] * m[6] * m[15] +
        m[9] * m[7] * m[14] + m[13] * m[6] * m[11] - m[13] * m[7] * m[10];
    r[4] = -m[4] * m[10] * m[15] + m[4] * m[11] * m[14] + m[8] * m[6] * m[15] -
        m[8] * m[7] * m[14] - m[12] * m[6] * m[11] + m[12] * m[7] * m[10];
    r[8] = m[4] * m[9] * m[15] - m[4] * m[11] * m[13] - m[8] * m[5] * m[15] +
        m[8] * m[7] * m[13] + m[12] * m[5] * m[11] - m[12] * m[7] * m[9];
    r[12] = -m[4] * m[9] * m[14] + m[4] * m[10] * m[13] + m[8] * m[5] * m[14] -
        m[8] * m[6] * m[13] - m[12] * m[5] * m[10] + m[12] * m[6] * m[9];
    r[1] = -m[1] * m[10] * m[15] + m[1] * m[11] * m[14] + m[9] * m[2] * m[15] -
        m[9] * m[3] * m[14] - m[13] * m[2] * m[11] + m[13] * m[3] * m[10];
    r[5] = m[0] * m[10] * m[15] - m[0] * m[11] * m[14] - m[8] * m[2] * m[15] +
        m[8] * m[3] * m[14] + m[12] * m[2] * m[11] - m[12] * m[3] * m[10];
    r[9] = -m[0] * m[9] * m[15] + m[0] * m[11] * m[13] + m[8] * m[1] * m[15] -
        m[8] * m[3] * m[13] - m[12] * m[1] * m[11] + m[12] * m[3] * m[9];
    r[13] = m[0] * m[9] * m[14] - m[0] * m[10] * m[13] - m[8] * m[1] * m[14] +
        m[8] * m[2] * m[13] + m[12] * m[1] * m[10] - m[12] * m[2] * m[9];
    r[2] = m[1] * m[6] * m[15] - m[1] * m[7] * m[14] - m[5] * m[2] * m[15] +
        m[5] * m[3] * m[14] + m[13] * m[2] * m[7] - m[13] * m[3] * m[6];
    r[6] = -m[0] * m[6] * m[15] + m[0] * m[7] * m[14] + m[4] * m[2] * m[15] -
        m[4] * m[3] * m[14] - m[12] * m[2] * m[7] + m[12] * m[3] * m[6];
    r[10] = m[0] * m[5] * m[15] - m[0] * m[7] * m[13] - m[4] * m[1] * m[15] +
        m[4] * m[3] * m[13] + m[12] * m[1] * m[7] - m[12] * m[3] * m[5];
    r[14] = -m[0] * m[5] * m[14] + m[0] * m[6] * m[13] + m[4] * m[1] * m[14] -
        m[4] * m[2] * m[13] - m[12] * m[1] * m[6] + m[12] * m[2] * m[5];
    r[3] = -m[1] * m[6] * m[11] + m[1] * m[7] * m[10] + m[5] * m[2] * m[11] -
        m[5] * m[3] * m[10] - m[9] * m[2] * m[7] + m[9] * m[3] * m[6];
    r[7] = m[0] * m[6] * m[11] - m[0] * m[7] * m[10] - m[4] * m[2] * m[11] +
        m[4] * m[3] * m[10] + m[8] * m[2] * m[7] - m[8] * m[3] * m[6];
    r[11] = -m[0] * m[5] * m[11] + m[0] * m[7] * m[9] + m[4] * m[1] * m[11] -
        m[4] * m[3] * m[9] - m[8] * m[1] * m[7] + m[8] * m[3] * m[5];
    r[15] = m[0] * m[5] * m[10] - m[0] * m[6] * m[9] - m[4] * m[1] * m[10] +
        m[4] * m[2] * m[9] + m[8] * m[1] * m[6] - m[8] * m[2] * m[5];

    var det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12];

    if (det === 0) {
        return $elm$core$Maybe$Nothing;
    }

    det = 1.0 / det;

    for (var i = 0; i < 16; i = i + 1) {
        r[i] = r[i] * det;
    }

    return $elm$core$Maybe$Just(r);
};

var _MJS_m4x4inverseOrthonormal = function(m) {
    var r = _MJS_m4x4transposeLocal(m);
    var t = [m[12], m[13], m[14]];
    r[3] = r[7] = r[11] = 0;
    r[12] = -_MJS_v3dotLocal([r[0], r[4], r[8]], t);
    r[13] = -_MJS_v3dotLocal([r[1], r[5], r[9]], t);
    r[14] = -_MJS_v3dotLocal([r[2], r[6], r[10]], t);
    return r;
};

function _MJS_m4x4makeFrustumLocal(left, right, bottom, top, znear, zfar) {
    var r = new Float64Array(16);

    r[0] = 2 * znear / (right - left);
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 2 * znear / (top - bottom);
    r[6] = 0;
    r[7] = 0;
    r[8] = (right + left) / (right - left);
    r[9] = (top + bottom) / (top - bottom);
    r[10] = -(zfar + znear) / (zfar - znear);
    r[11] = -1;
    r[12] = 0;
    r[13] = 0;
    r[14] = -2 * zfar * znear / (zfar - znear);
    r[15] = 0;

    return r;
}
var _MJS_m4x4makeFrustum = F6(_MJS_m4x4makeFrustumLocal);

var _MJS_m4x4makePerspective = F4(function(fovy, aspect, znear, zfar) {
    var ymax = znear * Math.tan(fovy * Math.PI / 360.0);
    var ymin = -ymax;
    var xmin = ymin * aspect;
    var xmax = ymax * aspect;

    return _MJS_m4x4makeFrustumLocal(xmin, xmax, ymin, ymax, znear, zfar);
});

function _MJS_m4x4makeOrthoLocal(left, right, bottom, top, znear, zfar) {
    var r = new Float64Array(16);

    r[0] = 2 / (right - left);
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 2 / (top - bottom);
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = -2 / (zfar - znear);
    r[11] = 0;
    r[12] = -(right + left) / (right - left);
    r[13] = -(top + bottom) / (top - bottom);
    r[14] = -(zfar + znear) / (zfar - znear);
    r[15] = 1;

    return r;
}
var _MJS_m4x4makeOrtho = F6(_MJS_m4x4makeOrthoLocal);

var _MJS_m4x4makeOrtho2D = F4(function(left, right, bottom, top) {
    return _MJS_m4x4makeOrthoLocal(left, right, bottom, top, -1, 1);
});

function _MJS_m4x4mulLocal(a, b) {
    var r = new Float64Array(16);
    var a11 = a[0];
    var a21 = a[1];
    var a31 = a[2];
    var a41 = a[3];
    var a12 = a[4];
    var a22 = a[5];
    var a32 = a[6];
    var a42 = a[7];
    var a13 = a[8];
    var a23 = a[9];
    var a33 = a[10];
    var a43 = a[11];
    var a14 = a[12];
    var a24 = a[13];
    var a34 = a[14];
    var a44 = a[15];
    var b11 = b[0];
    var b21 = b[1];
    var b31 = b[2];
    var b41 = b[3];
    var b12 = b[4];
    var b22 = b[5];
    var b32 = b[6];
    var b42 = b[7];
    var b13 = b[8];
    var b23 = b[9];
    var b33 = b[10];
    var b43 = b[11];
    var b14 = b[12];
    var b24 = b[13];
    var b34 = b[14];
    var b44 = b[15];

    r[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    r[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    r[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    r[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    r[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    r[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    r[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    r[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    r[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    r[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    r[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    r[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    r[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    r[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    r[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    r[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    return r;
}
var _MJS_m4x4mul = F2(_MJS_m4x4mulLocal);

var _MJS_m4x4mulAffine = F2(function(a, b) {
    var r = new Float64Array(16);
    var a11 = a[0];
    var a21 = a[1];
    var a31 = a[2];
    var a12 = a[4];
    var a22 = a[5];
    var a32 = a[6];
    var a13 = a[8];
    var a23 = a[9];
    var a33 = a[10];
    var a14 = a[12];
    var a24 = a[13];
    var a34 = a[14];

    var b11 = b[0];
    var b21 = b[1];
    var b31 = b[2];
    var b12 = b[4];
    var b22 = b[5];
    var b32 = b[6];
    var b13 = b[8];
    var b23 = b[9];
    var b33 = b[10];
    var b14 = b[12];
    var b24 = b[13];
    var b34 = b[14];

    r[0] = a11 * b11 + a12 * b21 + a13 * b31;
    r[1] = a21 * b11 + a22 * b21 + a23 * b31;
    r[2] = a31 * b11 + a32 * b21 + a33 * b31;
    r[3] = 0;
    r[4] = a11 * b12 + a12 * b22 + a13 * b32;
    r[5] = a21 * b12 + a22 * b22 + a23 * b32;
    r[6] = a31 * b12 + a32 * b22 + a33 * b32;
    r[7] = 0;
    r[8] = a11 * b13 + a12 * b23 + a13 * b33;
    r[9] = a21 * b13 + a22 * b23 + a23 * b33;
    r[10] = a31 * b13 + a32 * b23 + a33 * b33;
    r[11] = 0;
    r[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14;
    r[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24;
    r[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34;
    r[15] = 1;

    return r;
});

var _MJS_m4x4makeRotate = F2(function(angle, axis) {
    var r = new Float64Array(16);
    axis = _MJS_v3normalizeLocal(axis, _MJS_v3temp1Local);
    var x = axis[0];
    var y = axis[1];
    var z = axis[2];
    var c = Math.cos(angle);
    var c1 = 1 - c;
    var s = Math.sin(angle);

    r[0] = x * x * c1 + c;
    r[1] = y * x * c1 + z * s;
    r[2] = z * x * c1 - y * s;
    r[3] = 0;
    r[4] = x * y * c1 - z * s;
    r[5] = y * y * c1 + c;
    r[6] = y * z * c1 + x * s;
    r[7] = 0;
    r[8] = x * z * c1 + y * s;
    r[9] = y * z * c1 - x * s;
    r[10] = z * z * c1 + c;
    r[11] = 0;
    r[12] = 0;
    r[13] = 0;
    r[14] = 0;
    r[15] = 1;

    return r;
});

var _MJS_m4x4rotate = F3(function(angle, axis, m) {
    var r = new Float64Array(16);
    var im = 1.0 / _MJS_v3lengthLocal(axis);
    var x = axis[0] * im;
    var y = axis[1] * im;
    var z = axis[2] * im;
    var c = Math.cos(angle);
    var c1 = 1 - c;
    var s = Math.sin(angle);
    var xs = x * s;
    var ys = y * s;
    var zs = z * s;
    var xyc1 = x * y * c1;
    var xzc1 = x * z * c1;
    var yzc1 = y * z * c1;
    var t11 = x * x * c1 + c;
    var t21 = xyc1 + zs;
    var t31 = xzc1 - ys;
    var t12 = xyc1 - zs;
    var t22 = y * y * c1 + c;
    var t32 = yzc1 + xs;
    var t13 = xzc1 + ys;
    var t23 = yzc1 - xs;
    var t33 = z * z * c1 + c;
    var m11 = m[0], m21 = m[1], m31 = m[2], m41 = m[3];
    var m12 = m[4], m22 = m[5], m32 = m[6], m42 = m[7];
    var m13 = m[8], m23 = m[9], m33 = m[10], m43 = m[11];
    var m14 = m[12], m24 = m[13], m34 = m[14], m44 = m[15];

    r[0] = m11 * t11 + m12 * t21 + m13 * t31;
    r[1] = m21 * t11 + m22 * t21 + m23 * t31;
    r[2] = m31 * t11 + m32 * t21 + m33 * t31;
    r[3] = m41 * t11 + m42 * t21 + m43 * t31;
    r[4] = m11 * t12 + m12 * t22 + m13 * t32;
    r[5] = m21 * t12 + m22 * t22 + m23 * t32;
    r[6] = m31 * t12 + m32 * t22 + m33 * t32;
    r[7] = m41 * t12 + m42 * t22 + m43 * t32;
    r[8] = m11 * t13 + m12 * t23 + m13 * t33;
    r[9] = m21 * t13 + m22 * t23 + m23 * t33;
    r[10] = m31 * t13 + m32 * t23 + m33 * t33;
    r[11] = m41 * t13 + m42 * t23 + m43 * t33;
    r[12] = m14,
    r[13] = m24;
    r[14] = m34;
    r[15] = m44;

    return r;
});

function _MJS_m4x4makeScale3Local(x, y, z) {
    var r = new Float64Array(16);

    r[0] = x;
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = y;
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = z;
    r[11] = 0;
    r[12] = 0;
    r[13] = 0;
    r[14] = 0;
    r[15] = 1;

    return r;
}
var _MJS_m4x4makeScale3 = F3(_MJS_m4x4makeScale3Local);

var _MJS_m4x4makeScale = function(v) {
    return _MJS_m4x4makeScale3Local(v[0], v[1], v[2]);
};

var _MJS_m4x4scale3 = F4(function(x, y, z, m) {
    var r = new Float64Array(16);

    r[0] = m[0] * x;
    r[1] = m[1] * x;
    r[2] = m[2] * x;
    r[3] = m[3] * x;
    r[4] = m[4] * y;
    r[5] = m[5] * y;
    r[6] = m[6] * y;
    r[7] = m[7] * y;
    r[8] = m[8] * z;
    r[9] = m[9] * z;
    r[10] = m[10] * z;
    r[11] = m[11] * z;
    r[12] = m[12];
    r[13] = m[13];
    r[14] = m[14];
    r[15] = m[15];

    return r;
});

var _MJS_m4x4scale = F2(function(v, m) {
    var r = new Float64Array(16);
    var x = v[0];
    var y = v[1];
    var z = v[2];

    r[0] = m[0] * x;
    r[1] = m[1] * x;
    r[2] = m[2] * x;
    r[3] = m[3] * x;
    r[4] = m[4] * y;
    r[5] = m[5] * y;
    r[6] = m[6] * y;
    r[7] = m[7] * y;
    r[8] = m[8] * z;
    r[9] = m[9] * z;
    r[10] = m[10] * z;
    r[11] = m[11] * z;
    r[12] = m[12];
    r[13] = m[13];
    r[14] = m[14];
    r[15] = m[15];

    return r;
});

function _MJS_m4x4makeTranslate3Local(x, y, z) {
    var r = new Float64Array(16);

    r[0] = 1;
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 1;
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = 1;
    r[11] = 0;
    r[12] = x;
    r[13] = y;
    r[14] = z;
    r[15] = 1;

    return r;
}
var _MJS_m4x4makeTranslate3 = F3(_MJS_m4x4makeTranslate3Local);

var _MJS_m4x4makeTranslate = function(v) {
    return _MJS_m4x4makeTranslate3Local(v[0], v[1], v[2]);
};

var _MJS_m4x4translate3 = F4(function(x, y, z, m) {
    var r = new Float64Array(16);
    var m11 = m[0];
    var m21 = m[1];
    var m31 = m[2];
    var m41 = m[3];
    var m12 = m[4];
    var m22 = m[5];
    var m32 = m[6];
    var m42 = m[7];
    var m13 = m[8];
    var m23 = m[9];
    var m33 = m[10];
    var m43 = m[11];

    r[0] = m11;
    r[1] = m21;
    r[2] = m31;
    r[3] = m41;
    r[4] = m12;
    r[5] = m22;
    r[6] = m32;
    r[7] = m42;
    r[8] = m13;
    r[9] = m23;
    r[10] = m33;
    r[11] = m43;
    r[12] = m11 * x + m12 * y + m13 * z + m[12];
    r[13] = m21 * x + m22 * y + m23 * z + m[13];
    r[14] = m31 * x + m32 * y + m33 * z + m[14];
    r[15] = m41 * x + m42 * y + m43 * z + m[15];

    return r;
});

var _MJS_m4x4translate = F2(function(v, m) {
    var r = new Float64Array(16);
    var x = v[0];
    var y = v[1];
    var z = v[2];
    var m11 = m[0];
    var m21 = m[1];
    var m31 = m[2];
    var m41 = m[3];
    var m12 = m[4];
    var m22 = m[5];
    var m32 = m[6];
    var m42 = m[7];
    var m13 = m[8];
    var m23 = m[9];
    var m33 = m[10];
    var m43 = m[11];

    r[0] = m11;
    r[1] = m21;
    r[2] = m31;
    r[3] = m41;
    r[4] = m12;
    r[5] = m22;
    r[6] = m32;
    r[7] = m42;
    r[8] = m13;
    r[9] = m23;
    r[10] = m33;
    r[11] = m43;
    r[12] = m11 * x + m12 * y + m13 * z + m[12];
    r[13] = m21 * x + m22 * y + m23 * z + m[13];
    r[14] = m31 * x + m32 * y + m33 * z + m[14];
    r[15] = m41 * x + m42 * y + m43 * z + m[15];

    return r;
});

var _MJS_m4x4makeLookAt = F3(function(eye, center, up) {
    var z = _MJS_v3directionLocal(eye, center, _MJS_v3temp1Local);
    var x = _MJS_v3normalizeLocal(_MJS_v3crossLocal(up, z, _MJS_v3temp2Local), _MJS_v3temp2Local);
    var y = _MJS_v3normalizeLocal(_MJS_v3crossLocal(z, x, _MJS_v3temp3Local), _MJS_v3temp3Local);
    var tm1 = _MJS_m4x4temp1Local;
    var tm2 = _MJS_m4x4temp2Local;

    tm1[0] = x[0];
    tm1[1] = y[0];
    tm1[2] = z[0];
    tm1[3] = 0;
    tm1[4] = x[1];
    tm1[5] = y[1];
    tm1[6] = z[1];
    tm1[7] = 0;
    tm1[8] = x[2];
    tm1[9] = y[2];
    tm1[10] = z[2];
    tm1[11] = 0;
    tm1[12] = 0;
    tm1[13] = 0;
    tm1[14] = 0;
    tm1[15] = 1;

    tm2[0] = 1; tm2[1] = 0; tm2[2] = 0; tm2[3] = 0;
    tm2[4] = 0; tm2[5] = 1; tm2[6] = 0; tm2[7] = 0;
    tm2[8] = 0; tm2[9] = 0; tm2[10] = 1; tm2[11] = 0;
    tm2[12] = -eye[0]; tm2[13] = -eye[1]; tm2[14] = -eye[2]; tm2[15] = 1;

    return _MJS_m4x4mulLocal(tm1, tm2);
});


function _MJS_m4x4transposeLocal(m) {
    var r = new Float64Array(16);

    r[0] = m[0]; r[1] = m[4]; r[2] = m[8]; r[3] = m[12];
    r[4] = m[1]; r[5] = m[5]; r[6] = m[9]; r[7] = m[13];
    r[8] = m[2]; r[9] = m[6]; r[10] = m[10]; r[11] = m[14];
    r[12] = m[3]; r[13] = m[7]; r[14] = m[11]; r[15] = m[15];

    return r;
}
var _MJS_m4x4transpose = _MJS_m4x4transposeLocal;

var _MJS_m4x4makeBasis = F3(function(vx, vy, vz) {
    var r = new Float64Array(16);

    r[0] = vx[0];
    r[1] = vx[1];
    r[2] = vx[2];
    r[3] = 0;
    r[4] = vy[0];
    r[5] = vy[1];
    r[6] = vy[2];
    r[7] = 0;
    r[8] = vz[0];
    r[9] = vz[1];
    r[10] = vz[2];
    r[11] = 0;
    r[12] = 0;
    r[13] = 0;
    r[14] = 0;
    r[15] = 1;

    return r;
});
var $author$project$Main$LinkClicked = function (a) {
	return {$: 1, a: a};
};
var $author$project$Main$UrlChanged = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === -2) {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 1, a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Basics$False = 1;
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Maybe$Nothing = {$: 1};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.j) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.n),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.n);
		} else {
			var treeLen = builder.j * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.p) : builder.p;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.j);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.n) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.n);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{p: nodeList, j: (len / $elm$core$Array$branchFactor) | 0, n: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = 0;
var $elm$core$Result$isOk = function (result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 1, a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = $elm$core$Basics$identity;
var $elm$url$Url$Http = 0;
var $elm$url$Url$Https = 1;
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {e$: fragment, cY: host, bM: path, dA: port_, dD: protocol, dE: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		0,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		1,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = $elm$core$Basics$identity;
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return 0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0;
		return A2($elm$core$Task$map, tagger, task);
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			A2($elm$core$Task$map, toMessage, task));
	});
var $elm$browser$Browser$application = _Browser_application;
var $author$project$Main$NotReady = {$: 0};
var $author$project$Main$LoadResources = function (a) {
	return {$: 2, a: a};
};
var $author$project$Main$Ready = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $author$project$User$Score = F2(
	function (highestLives, bestTime) {
		return {aH: bestTime, aq: highestLives};
	});
var $author$project$User$User = F3(
	function (username, levelScore, difficulty) {
		return {eQ: difficulty, bE: levelScore, dQ: username};
	});
var $author$project$User$Easy = 0;
var $author$project$User$Hard = 2;
var $author$project$User$Medium = 1;
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$User$decode_difficulty = A2(
	$elm$json$Json$Decode$andThen,
	function (str) {
		switch (str) {
			case 'Easy':
				return $elm$json$Json$Decode$succeed(0);
			case 'Medium':
				return $elm$json$Json$Decode$succeed(1);
			case 'Hard':
				return $elm$json$Json$Decode$succeed(2);
			default:
				var other = str;
				return $elm$json$Json$Decode$fail('Unknown difficulty: ' + other);
		}
	},
	$elm$json$Json$Decode$string);
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{p: nodeList, j: nodeListSize, n: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$map3 = _Json_map3;
var $author$project$User$decode_user = function () {
	var timesDecoder = A2(
		$elm$json$Json$Decode$field,
		'times',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$float));
	var nameDecoder = A2($elm$json$Json$Decode$field, 'username', $elm$json$Json$Decode$string);
	var livesDecoder = A2(
		$elm$json$Json$Decode$field,
		'lives',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$int));
	var scoreDecoder = A3(
		$elm$json$Json$Decode$map2,
		F2(
			function (listL, listT) {
				return $elm$core$Array$fromList(
					A3(
						$elm$core$List$map2,
						F2(
							function (lives, time) {
								return A2($author$project$User$Score, lives, time);
							}),
						listL,
						listT));
			}),
		livesDecoder,
		timesDecoder);
	var difficultyDecoder = A2($elm$json$Json$Decode$field, 'difficulty', $author$project$User$decode_difficulty);
	return A4($elm$json$Json$Decode$map3, $author$project$User$User, nameDecoder, scoreDecoder, difficultyDecoder);
}();
var $author$project$SharedState$gameResources = _List_fromArray(
	['/assets/tiles/tile-0.png', '/assets/tiles/tile-1.png', '/assets/tiles/tile-2.png', '/assets/tiles/tile-3.png', '/assets/tiles/tile-4.png', '/assets/tiles/tile-5.png', '/assets/tiles/tile-6.png', '/assets/tiles/tile-7.png', '/assets/tiles/tile-8.png', '/assets/tiles/tile-9.png', '/assets/tiles/tile-10.png', '/assets/tiles/tile-11.png', '/assets/tiles/tile-12.png', '/assets/tiles/tile-13.png', '/assets/tiles/tile-14.png', '/assets/tiles/tile-15.png', '/assets/tiles/tile-16.png', '/assets/tiles/tile-17.png', '/assets/tiles/tile-18.png', '/assets/objects/bush.png', '/assets/objects/bush-many.png', '/assets/objects/tree.png', '/assets/objects/tree-round.png', '/assets/objects/tree-star.png', '/assets/objects/rock-1.png', '/assets/objects/rock-2.png', '/assets/objects/rock-3.png', '/assets/objects/rock-4.png', '/assets/objects/rock-5.png', '/assets/objects/rock-6.png', '/assets/towers/base-combined.png', '/assets/towers/base-pointy.png', '/assets/towers/base-squared.png', '/assets/towers/cannon.png', '/assets/towers/cannon-1.png', '/assets/towers/cannon-2.png', '/assets/towers/minigun.png', '/assets/towers/minigun-1.png', '/assets/towers/minigun-2.png', '/assets/towers/rocketlauncher.png', '/assets/towers/rocketlauncher-e.png', '/assets/towers/rocketlauncher-1.png', '/assets/towers/rocketlauncher-1e.png', '/assets/towers/rocketlauncher-2.png', '/assets/towers/rocketlauncher-2el.png', '/assets/towers/rocketlauncher-2er.png', '/assets/enemies/scout.png', '/assets/enemies/soldier.png', '/assets/enemies/warrior.png', '/assets/enemies/veteran.png', '/assets/enemies/tank-light.png', '/assets/enemies/tank-heavy.png', '/assets/enemies/plane-light.png', '/assets/enemies/plane-heavy.png', '/assets/projectiles/bullet.png', '/assets/projectiles/bullet-tall.png', '/assets/projectiles/bullet-wide.png', '/assets/projectiles/cannonball.png', '/assets/projectiles/cannonball-black.png', '/assets/projectiles/cannonball-white.png', '/assets/projectiles/missile.png', '/assets/projectiles/missile-big.png', '/assets/projectiles/explosion-1.png', '/assets/projectiles/explosion-2.png', '/assets/projectiles/explosion-3.png', '/assets/projectiles/explosion-4.png', '/assets/projectiles/explosion-5.png', '/assets/ui/map/hitbox.png', '/assets/ui/map/hitbox-circle.png', '/assets/ui/map/healthbar-green.png', '/assets/ui/map/healthbar-red.png', '/assets/ui/map/road-flag.png']);
var $Zinggi$elm_game_resources$Game$Resources$R = $elm$core$Basics$identity;
var $elm$core$Dict$RBEmpty_elm_builtin = {$: -2};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $Zinggi$elm_game_resources$Game$Resources$init = $elm$core$Dict$empty;
var $Zinggi$elm_game_resources$Game$Resources$LoadedTexture = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			A2(
				$elm$core$Task$onError,
				A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
					$elm$core$Result$Err),
				A2(
					$elm$core$Task$andThen,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Ok),
					task)));
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm_explorations$webgl$WebGL$Texture$Resize = $elm$core$Basics$identity;
var $elm_explorations$webgl$WebGL$Texture$linear = 9729;
var $elm_explorations$webgl$WebGL$Texture$nearestMipmapLinear = 9986;
var $elm_explorations$webgl$WebGL$Texture$Wrap = $elm$core$Basics$identity;
var $elm_explorations$webgl$WebGL$Texture$repeat = 10497;
var $elm_explorations$webgl$WebGL$Texture$defaultOptions = {bA: true, bC: $elm_explorations$webgl$WebGL$Texture$repeat, bF: $elm_explorations$webgl$WebGL$Texture$linear, bH: $elm_explorations$webgl$WebGL$Texture$nearestMipmapLinear, bW: $elm_explorations$webgl$WebGL$Texture$repeat};
var $elm_explorations$webgl$WebGL$Texture$LoadError = {$: 0};
var $elm_explorations$webgl$WebGL$Texture$SizeError = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm_explorations$webgl$WebGL$Texture$loadWith = F2(
	function (_v0, url) {
		var magnify = _v0.bF;
		var minify = _v0.bH;
		var horizontalWrap = _v0.bC;
		var verticalWrap = _v0.bW;
		var flipY = _v0.bA;
		var expand = F4(
			function (_v1, _v2, _v3, _v4) {
				var mag = _v1;
				var min = _v2;
				var hor = _v3;
				var vert = _v4;
				return A6(_Texture_load, mag, min, hor, vert, flipY, url);
			});
		return A4(expand, magnify, minify, horizontalWrap, verticalWrap);
	});
var $elm_explorations$webgl$WebGL$Texture$load = $elm_explorations$webgl$WebGL$Texture$loadWith($elm_explorations$webgl$WebGL$Texture$defaultOptions);
var $Zinggi$elm_game_resources$Game$Resources$loadTextures = function (urls) {
	return $elm$core$Platform$Cmd$batch(
		A2(
			$elm$core$List$map,
			function (url) {
				return A2(
					$elm$core$Task$attempt,
					$Zinggi$elm_game_resources$Game$Resources$LoadedTexture(url),
					$elm_explorations$webgl$WebGL$Texture$load(url));
			},
			urls));
};
var $elm$core$Platform$Cmd$map = _Platform_map;
var $author$project$User$noUser = {eQ: 1, bE: $elm$core$Array$empty, dQ: 'New player'};
var $author$project$Route$NotFound = {$: 7};
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $author$project$User$maxMapNumber = 9;
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $author$project$User$get_unlocked_level = function (user) {
	return A2(
		$elm$core$Basics$min,
		$author$project$User$maxMapNumber,
		$elm$core$Array$length(user.bE) + 1);
};
var $author$project$Route$Game = function (a) {
	return {$: 6, a: a};
};
var $author$project$Route$Guide = function (a) {
	return {$: 4, a: a};
};
var $author$project$Route$Home = function (a) {
	return {$: 0, a: a};
};
var $author$project$Route$Info = function (a) {
	return {$: 1, a: a};
};
var $author$project$Route$Level = function (a) {
	return {$: 2, a: a};
};
var $author$project$Route$Score = function (a) {
	return {$: 3, a: a};
};
var $author$project$Route$Settings = function (a) {
	return {$: 5, a: a};
};
var $elm$url$Url$Parser$Parser = $elm$core$Basics$identity;
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {ax: frag, aC: params, at: unvisited, gz: value, aG: visited};
	});
var $elm$url$Url$Parser$fragment = function (toFrag) {
	return function (_v0) {
		var visited = _v0.aG;
		var unvisited = _v0.at;
		var params = _v0.aC;
		var frag = _v0.ax;
		var value = _v0.gz;
		return _List_fromArray(
			[
				A5(
				$elm$url$Url$Parser$State,
				visited,
				unvisited,
				params,
				frag,
				value(
					toFrag(frag)))
			]);
	};
};
var $author$project$Game$Level$NoAction = {$: 5};
var $author$project$Game$Level$NoObject = {$: 2};
var $author$project$Game$Level$NotComplete = 0;
var $author$project$Game$Maps$Map1$airport = $elm$core$Maybe$Nothing;
var $author$project$Game$Maps$Map2$airport = $elm$core$Maybe$Nothing;
var $author$project$Game$Maps$Map3$airport = $elm$core$Maybe$Nothing;
var $author$project$Game$Maps$Map4$airport = $elm$core$Maybe$Nothing;
var $author$project$Game$Maps$Map5$airport = $elm$core$Maybe$Nothing;
var $author$project$Game$Calculations$Down = 2;
var $author$project$Game$Calculations$Point = F2(
	function (posXY, direction) {
		return {b6: direction, cn: posXY};
	});
var $author$project$Game$Maps$Map6$airport = $elm$core$Maybe$Just(
	A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(1.5, 16),
		2));
var $author$project$Game$Maps$Map7$airport = $elm$core$Maybe$Just(
	A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(5.5, 12),
		2));
var $author$project$Game$Calculations$Right = 1;
var $author$project$Game$Maps$Map8$airport = $elm$core$Maybe$Just(
	A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(0, 7.5),
		1));
var $author$project$Game$Calculations$Up = 0;
var $author$project$Game$Maps$Map9$airport = $elm$core$Maybe$Just(
	A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2.5, 0),
		0));
var $author$project$Game$Playboard$enemyLayerInitial = 0;
var $Zinggi$elm_2d_game$Game$TwoD$Camera$Area = function (a) {
	return {$: 2, a: a};
};
var $Zinggi$elm_2d_game$Game$TwoD$Camera$Camera = $elm$core$Basics$identity;
var $Zinggi$elm_2d_game$Game$TwoD$Camera$fixedArea = F2(
	function (a, pos) {
		return {
			bO: pos,
			bS: $Zinggi$elm_2d_game$Game$TwoD$Camera$Area(a)
		};
	});
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: -1, a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === -1) && (!right.a)) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === -1) && (!left.a)) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === -2) {
			return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1) {
				case 0:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 1:
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!_v0.$) {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Game$Calculations$get_previous_point = function (point) {
	var currentPoint = A2(
		$elm$core$Maybe$withDefault,
		A2(
			$author$project$Game$Calculations$Point,
			_Utils_Tuple2(0, 0),
			0),
		point);
	var posX = currentPoint.cn.a;
	var newX = function () {
		var _v1 = currentPoint.b6;
		switch (_v1) {
			case 1:
				return posX - 1;
			case 3:
				return posX + 0.2;
			default:
				return posX - 0.4;
		}
	}();
	var posY = currentPoint.cn.b;
	var newY = function () {
		var _v0 = currentPoint.b6;
		switch (_v0) {
			case 0:
				return posY - 1;
			case 2:
				return posY + 0.2;
			default:
				return posY - 0.4;
		}
	}();
	return _Utils_Tuple2(newX, newY);
};
var $author$project$Game$Maps$Map1$mapHeight = 16;
var $author$project$Game$Maps$Map2$mapHeight = 15;
var $author$project$Game$Maps$Map3$mapHeight = 15;
var $author$project$Game$Maps$Map4$mapHeight = 15;
var $author$project$Game$Maps$Map5$mapHeight = 14;
var $author$project$Game$Maps$Map6$mapHeight = 16;
var $author$project$Game$Maps$Map7$mapHeight = 12;
var $author$project$Game$Maps$Map8$mapHeight = 13;
var $author$project$Game$Maps$Map9$mapHeight = 14;
var $author$project$Game$Maps$Map1$mapWidth = 16;
var $author$project$Game$Maps$Map2$mapWidth = 15;
var $author$project$Game$Maps$Map3$mapWidth = 15;
var $author$project$Game$Maps$Map4$mapWidth = 15;
var $author$project$Game$Maps$Map5$mapWidth = 14;
var $author$project$Game$Maps$Map6$mapWidth = 16;
var $author$project$Game$Maps$Map7$mapWidth = 12;
var $author$project$Game$Maps$Map8$mapWidth = 13;
var $author$project$Game$Maps$Map9$mapWidth = 14;
var $author$project$Game$Calculations$Left = 3;
var $author$project$Game$Maps$Map1$path = _List_fromArray(
	[
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(0, 1),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(14, 1),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(14, 14),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 14),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 4),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(8, 4),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(8, 14),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 14),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 9),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(5, 9),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(5, 4),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(0, 4),
		3)
	]);
var $author$project$Game$Maps$Map2$path = _List_fromArray(
	[
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(6, 15),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(6, 6),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(10, 6),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(10, 9),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 9),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 12),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(13, 12),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(13, 2),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(10, 2),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(10, 3),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(5, 3),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(5, 2),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 2),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 6),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 6),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 12),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 12),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 15),
		0)
	]);
var $author$project$Game$Maps$Map3$path = _List_fromArray(
	[
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 0),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 3),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 3),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 7),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 7),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 13),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 13),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 10),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 10),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 13),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(15, 13),
		1)
	]);
var $author$project$Game$Maps$Map4$path = _List_fromArray(
	[
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(15, 2),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 2),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 12),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 12),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 8),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(6, 8),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(6, 12),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 12),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 11),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 11),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 5),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 5),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 4),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(8, 4),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(8, 0),
		2)
	]);
var $author$project$Game$Maps$Map5$path = _List_fromArray(
	[
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 14),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 11),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 11),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 4),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 4),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 2),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(4, 2),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(4, 7),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 7),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 11),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 11),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 14),
		0)
	]);
var $author$project$Game$Maps$Map6$path = _List_fromArray(
	[
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(16, 14),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(13, 14),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(13, 12),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 12),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 10),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 10),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 8),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 8),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(3, 2),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 2),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 4),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(13, 4),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(13, 6),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(16, 6),
		1)
	]);
var $author$project$Game$Maps$Map7$path = _List_fromArray(
	[
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 11),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 11),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 10),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(4, 10),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(4, 11),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(1, 11),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(1, 6),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 6),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 4),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(1, 4),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(1, 1),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(12, 1),
		1)
	]);
var $author$project$Game$Maps$Map8$path = _List_fromArray(
	[
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(0, 10),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(8, 10),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(8, 6),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(4, 6),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(4, 2),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(13, 2),
		1)
	]);
var $author$project$Game$Maps$Map9$path = _List_fromArray(
	[
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(1, 0),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(1, 4),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 4),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(2, 9),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(1, 9),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(1, 13),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 13),
		1),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(11, 5),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 5),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(9, 11),
		0),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 11),
		3),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(7, 1),
		2),
		A2(
		$author$project$Game$Calculations$Point,
		_Utils_Tuple2(14, 1),
		1)
	]);
var $author$project$Game$Tiles$Lot = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$round = _Basics_round;
var $author$project$Game$Tiles$place_obstacle = F2(
	function (tile, mult) {
		var _v0 = tile.O;
		if (_v0.$ === 1) {
			var obs = _v0.a;
			if (!obs.$) {
				var o = obs.a;
				var newY = (tile.cn.b + 0.5) + o.cn.b;
				var newX = (tile.cn.a + 0.5) + o.cn.a;
				var baseCost = function () {
					var _v2 = o.v;
					switch (_v2) {
						case '/assets/objects/tree.png':
							return 20;
						case '/assets/objects/tree-round.png':
							return 25;
						case '/assets/objects/tree-star.png':
							return 15;
						case '/assets/objects/bush.png':
							return 15;
						case '/assets/objects/bush-many.png':
							return 10;
						case '/assets/objects/rock-1.png':
							return 20;
						case '/assets/objects/rock-2.png':
							return 25;
						case '/assets/objects/rock-3.png':
							return 30;
						case '/assets/objects/rock-4.png':
							return 25;
						case '/assets/objects/rock-5.png':
							return 30;
						case '/assets/objects/rock-6.png':
							return 35;
						default:
							return 0;
					}
				}();
				var newObstacle = _Utils_update(
					o,
					{
						bn: $elm$core$Basics$round((baseCost + (baseCost * o.bS)) * mult),
						cn: _Utils_Tuple2(newX, newY)
					});
				return _Utils_update(
					tile,
					{
						O: $author$project$Game$Tiles$Lot(
							$elm$core$Maybe$Just(newObstacle))
					});
			} else {
				return tile;
			}
		} else {
			return tile;
		}
	});
var $author$project$Game$Playboard$projectileLayerInitial = 1;
var $author$project$Game$Tiles$Road = {$: 0};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $elm$core$Tuple$mapBoth = F3(
	function (funcA, funcB, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			funcA(x),
			funcB(y));
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$Basics$pi = _Basics_pi;
var $author$project$Game$Tiles$create_obstacle = F4(
	function (obj, newSize, rot, offset) {
		var maxOffset = (1 - newSize) * 0.4;
		return $elm$core$Maybe$Just(
			{
				bn: 0,
				cn: A3(
					$elm$core$Tuple$mapBoth,
					A2($elm$core$Basics$clamp, -maxOffset, maxOffset),
					A2($elm$core$Basics$clamp, -maxOffset, maxOffset),
					offset),
				c: rot * ($elm$core$Basics$pi / 180),
				bS: A3($elm$core$Basics$clamp, 0.5, 0.9, newSize),
				v: '/assets/objects/' + (obj + '.png')
			});
	});
var $author$project$Game$Tiles$create_tile = F3(
	function (pos, t, index) {
		var newPos = A3($elm$core$Tuple$mapBoth, $elm$core$Basics$toFloat, $elm$core$Basics$toFloat, pos);
		return _Utils_Tuple2(
			newPos,
			{
				O: t,
				cn: newPos,
				v: '/assets/tiles/tile-' + ($elm$core$String$fromInt(index) + '.png')
			});
	});
var $author$project$Game$Maps$Map1$tileList = _List_fromArray(
	[
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 0),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.8,
				90,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 1),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 1),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				80,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.85,
				10,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 2),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 3),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 3),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 3),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 4),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.75,
				45,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 4),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 4),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.85,
				20,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				60,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.55,
				0,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.65,
				15,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.65,
				30,
				_Utils_Tuple2(-0.05, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.5,
				10,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				170,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.9,
				165,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.65,
				120,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				120,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 8),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 8),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 8),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 8),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.75,
				0,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 9),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 9),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 9),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 9),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.5,
				45,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.75,
				0,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				50,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.65,
				20,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				160,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.7,
				60,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				45,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.75,
				90,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 13),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 13),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 13),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 13),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 13),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 13),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 13),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 13),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				140,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 13),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 13),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 13),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 13),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 13),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				0,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 14),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 14),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 14),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 14),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.9,
				100,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.85,
				70,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.6,
				160,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.7,
				0,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.55,
				10,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.6,
				190,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				90,
				_Utils_Tuple2(-1, -1))),
		0)
	]);
var $author$project$Game$Maps$Map2$tileList = _List_fromArray(
	[
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.7,
				45,
				_Utils_Tuple2(-0.1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				140,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.75,
				45,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.85,
				0,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				60,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 1),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 1),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.75,
				120,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 1),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 1),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.85,
				160,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 2),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 2),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 2),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 2),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 2),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 2),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 2),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 3),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 3),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.9,
				90,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.5,
				10,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				70,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.6,
				90,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				50,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 5),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 5),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 5),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 5),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				40,
				_Utils_Tuple2(0, 0.1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.9,
				150,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 6),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 6),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 6),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 6),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.7,
				0,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.55,
				100,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				200,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				60,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 8),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 8),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.8,
				0,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 9),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 9),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.85,
				0,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.6,
				120,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 11),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 11),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				45,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 11),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 11),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 11),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 11),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.5,
				30,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				90,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 12),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 12),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.75,
				160,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 12),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 12),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 13),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 13),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				30,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 13),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 13),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.6,
				180,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.7,
				170,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.5,
				60,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.8,
				20,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 14),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 14),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.75,
				0,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.65,
				45,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 14),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 14),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.9,
				90,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.65,
				240,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				45,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				0,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				140,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.85,
				0,
				_Utils_Tuple2(1, 1))),
		0)
	]);
var $author$project$Game$Maps$Map3$tileList = _List_fromArray(
	[
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.5,
				90,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.8,
				60,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 0),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 0),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.75,
				160,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				60,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.5,
				90,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.65,
				50,
				_Utils_Tuple2(0.1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				70,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				140,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				45,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 1),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 1),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				30,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.75,
				170,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.9,
				0,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.6,
				100,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				10,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 2),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 2),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 2),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.8,
				90,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				30,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 3),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 3),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 3),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.65,
				240,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.7,
				150,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				10,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.5,
				160,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				130,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.6,
				50,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.65,
				30,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.55,
				70,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.9,
				20,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.65,
				80,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.75,
				0,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				0,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.5,
				170,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.7,
				90,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 6),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 6),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				140,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 7),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 7),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				120,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.55,
				60,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.9,
				210,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.85,
				70,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 9),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 9),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.7,
				200,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				40,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 10),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 10),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				45,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.6,
				260,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				0,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.7,
				70,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 12),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 12),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.5,
				45,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 12),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				90,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 13),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 13),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 13),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.75,
				130,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.6,
				10,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.65,
				0,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0)
	]);
var $author$project$Game$Maps$Map4$tileList = _List_fromArray(
	[
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.85,
				60,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.7,
				20,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.75,
				60,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.6,
				290,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 0),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 0),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.7,
				10,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.85,
				80,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.8,
				170,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				50,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.5,
				0,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				160,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 1),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 1),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 1),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.65,
				110,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.8,
				90,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.9,
				60,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.6,
				130,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.7,
				10,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 2),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.9,
				90,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 2),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.85,
				45,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 3),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 3),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.65,
				70,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				90,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.75,
				150,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 4),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 4),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 4),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 4),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.65,
				0,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.85,
				45,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.6,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 5),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 5),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				20,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.9,
				190,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.85,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.65,
				80,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				140,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.9,
				200,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				100,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.8,
				45,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				0,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.65,
				0,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.55,
				160,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				60,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.85,
				20,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.8,
				0,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.75,
				180,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.65,
				30,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 7),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 7),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 7),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 7),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 7),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.8,
				180,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.55,
				70,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.85,
				140,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.55,
				170,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 8),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 8),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 8),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.75,
				0,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.5,
				90,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.8,
				40,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.55,
				60,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.75,
				180,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.85,
				130,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				30,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.65,
				80,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 10),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 10),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.9,
				40,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.7,
				10,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.75,
				290,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				90,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 11),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 11),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 11),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 11),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 11),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 11),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 11),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 11),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				45,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.5,
				60,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.7,
				170,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 12),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 12),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				30,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 12),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 12),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.7,
				180,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.55,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.8,
				10,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.65,
				140,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				40,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.85,
				0,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.6,
				0,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				120,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.6,
				180,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.65,
				290,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				160,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.8,
				60,
				_Utils_Tuple2(-1, 1))),
		0)
	]);
var $author$project$Game$Maps$Map5$tileList = _List_fromArray(
	[
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.75,
				0,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				40,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.65,
				70,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.8,
				190,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.5,
				90,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.75,
				30,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				120,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 1),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 1),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				40,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.6,
				100,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.65,
				70,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 2),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 2),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 2),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.7,
				20,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.85,
				80,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				180,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				180,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				130,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 3),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 3),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.55,
				160,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.65,
				60,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 4),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 4),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.55,
				40,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				170,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 6),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 6),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 6),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.8,
				160,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 7),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 7),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 7),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.65,
				10,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.5,
				210,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.65,
				280,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.7,
				150,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.75,
				40,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				200,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.55,
				80,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.85,
				60,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.6,
				45,
				_Utils_Tuple2(-0.2, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.7,
				190,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				180,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 10),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 10),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 10),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 10),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 10),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.75,
				0,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 10),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 10),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.7,
				0,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.5,
				80,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 11),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 11),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.6,
				0,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 11),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 11),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.7,
				45,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.65,
				140,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				10,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.8,
				225,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				50,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				70,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.8,
				0,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.85,
				120,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 13),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 13),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.7,
				30,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.8,
				0,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.65,
				0,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 13),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 13),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0)
	]);
var $author$project$Game$Maps$Map6$tileList = _List_fromArray(
	[
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.75,
				30,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.85,
				60,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				140,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				40,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.5,
				190,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.7,
				40,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				210,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.75,
				10,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.85,
				130,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				45,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				10,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 1),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 1),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				90,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.6,
				0,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.55,
				130,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 2),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 2),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 2),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.65,
				180,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				70,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.5,
				180,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.75,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 3),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 3),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.9,
				10,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				50,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.75,
				240,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 4),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 4),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.65,
				60,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.6,
				90,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.8,
				280,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.65,
				190,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 5),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.6,
				45,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.65,
				70,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.9,
				290,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 6),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 7),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 7),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 7),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 7),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 7),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.6,
				120,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.75,
				50,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.85,
				70,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 8),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 8),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 8),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 8),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 8),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.5,
				270,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.65,
				20,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.9,
				140,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				170,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.8,
				240,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.6,
				10,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 9),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 9),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				0,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.5,
				40,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				260,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				90,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.65,
				40,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				160,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 10),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 10),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.8,
				230,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.75,
				70,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				135,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.6,
				180,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 11),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 11),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 11),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 11),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 11),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.9,
				320,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				60,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.8,
				20,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 12),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 12),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 12),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.6,
				50,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.5,
				130,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				260,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.55,
				45,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				150,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 13),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.7,
				210,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.75,
				130,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 13),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 13),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 13),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 13),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				20,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				80,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.85,
				120,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.6,
				230,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.7,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				10,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				70,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 14),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				180,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 14),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 14),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 14),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				100,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 15),
		$author$project$Game$Tiles$Road,
		17),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.7,
				60,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.55,
				130,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.85,
				210,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.6,
				40,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.65,
				90,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				0,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.6,
				190,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 15),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				260,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(14, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(15, 15),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0)
	]);
var $author$project$Game$Maps$Map7$tileList = _List_fromArray(
	[
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 0),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 1),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 1),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 2),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.75,
				140,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.6,
				60,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 3),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 3),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 3),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.8,
				110,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 4),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 4),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 4),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.6,
				20,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 5),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 5),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				45,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.5,
				90,
				_Utils_Tuple2(-0.15, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 6),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 6),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				30,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				200,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.65,
				120,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.65,
				40,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.55,
				50,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.55,
				100,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.55,
				20,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.8,
				270,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				160,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.5,
				60,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.85,
				180,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.6,
				45,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				0,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 9),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 9),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.85,
				170,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 10),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 10),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 10),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 10),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 10),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 10),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 10),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 10),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 11),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 11),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 11),
		$author$project$Game$Tiles$Road,
		17),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.8,
				10,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 11),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 11),
		$author$project$Game$Tiles$Road,
		4)
	]);
var $author$project$Game$Maps$Map8$tileList = _List_fromArray(
	[
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.75,
				20,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.65,
				60,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.9,
				140,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.85,
				30,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 1),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 1),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 2),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 2),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.55,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.75,
				120,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.6,
				1220,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				0,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.75,
				270,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.55,
				70,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.8,
				10,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				170,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.75,
				0,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.6,
				30,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				140,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				90,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.55,
				50,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 5),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 5),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 5),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.9,
				100,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				70,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 6),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 6),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 6),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.55,
				170,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.6,
				0,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 7),
		$author$project$Game$Tiles$Road,
		18),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.85,
				240,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.75,
				45,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.85,
				120,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.6,
				10,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.8,
				40,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.5,
				80,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.7,
				180,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				150,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.8,
				60,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				110,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 9),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 9),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.75,
				230,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.8,
				160,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.55,
				70,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 10),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 10),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.65,
				90,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				200,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.7,
				140,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.85,
				40,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.65,
				0,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.75,
				30,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.85,
				220,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.7,
				0,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.5,
				190,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				50,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.6,
				135,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.75,
				160,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.6,
				0,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.7,
				20,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				140,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				80,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.8,
				270,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.6,
				90,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				160,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.7,
				10,
				_Utils_Tuple2(0, -1))),
		0)
	]);
var $author$project$Game$Maps$Map9$tileList = _List_fromArray(
	[
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 0),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 0),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 0),
		$author$project$Game$Tiles$Road,
		15),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 0),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.9,
				40,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 0),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.65,
				190,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 0),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 0),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 1),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 1),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 1),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 1),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.7,
				0,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 1),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 1),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 1),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 2),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.75,
				60,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.85,
				210,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 2),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 2),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.6,
				40,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-1',
				0.5,
				160,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.7,
				150,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 2),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 2),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.5,
				45,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 3),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 3),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-4',
				0.8,
				70,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 3),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 3),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.65,
				30,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-6',
				0.85,
				290,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				120,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 3),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.6,
				90,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 3),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 4),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 4),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 4),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 4),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 4),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 4),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 4),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 4),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 4),
		$author$project$Game$Tiles$Road,
		13),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.55,
				40,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 4),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.85,
				200,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-5',
				0.75,
				140,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.9,
				280,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 5),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 5),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 5),
		$author$project$Game$Tiles$Road,
		7),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 5),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 5),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 5),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.75,
				0,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				30,
				_Utils_Tuple2(0, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.9,
				0,
				_Utils_Tuple2(1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.55,
				60,
				_Utils_Tuple2(-0.1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 6),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 6),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 6),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 6),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				45,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 7),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.65,
				170,
				_Utils_Tuple2(0, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 7),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 7),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.75,
				60,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 7),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.6,
				0,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 8),
		$author$project$Game$Tiles$Road,
		12),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 8),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.5,
				30,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 8),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 8),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 8),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.55,
				250,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 8),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 9),
		$author$project$Game$Tiles$Road,
		6),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 9),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush',
				0.75,
				110,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 9),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				45,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 9),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 9),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 9),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.5,
				250,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-2',
				0.65,
				40,
				_Utils_Tuple2(-1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.7,
				0,
				_Utils_Tuple2(-1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 10),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 10),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 10),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 10),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 10),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 10),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree',
				0.9,
				160,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.85,
				230,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.7,
				150,
				_Utils_Tuple2(0, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.55,
				80,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 11),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 11),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 11),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 11),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 11),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 11),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'bush-many',
				0.6,
				50,
				_Utils_Tuple2(-1, 1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 11),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 12),
		$author$project$Game$Tiles$Road,
		3),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 12),
		$author$project$Game$Tiles$Road,
		9),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 12),
		$author$project$Game$Tiles$Road,
		2),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 12),
		$author$project$Game$Tiles$Road,
		8),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 12),
		$author$project$Game$Tiles$Road,
		5),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 12),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-star',
				0.8,
				270,
				_Utils_Tuple2(1, -1))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 12),
		$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(0, 13),
		$author$project$Game$Tiles$Road,
		10),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(1, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(2, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(3, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(4, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(5, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(6, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(7, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(8, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(9, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(10, 13),
		$author$project$Game$Tiles$Road,
		4),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(11, 13),
		$author$project$Game$Tiles$Road,
		11),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(12, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'rock-3',
				0.7,
				90,
				_Utils_Tuple2(1, 0))),
		0),
		A3(
		$author$project$Game$Tiles$create_tile,
		_Utils_Tuple2(13, 13),
		$author$project$Game$Tiles$Lot(
			A4(
				$author$project$Game$Tiles$create_obstacle,
				'tree-round',
				0.5,
				180,
				_Utils_Tuple2(-1, -1))),
		0)
	]);
var $author$project$Game$Playboard$create_board = F4(
	function (lvl, width, height, mult) {
		var newRowCol = function () {
			switch (lvl) {
				case 1:
					return _Utils_Tuple2($author$project$Game$Maps$Map1$mapHeight, $author$project$Game$Maps$Map1$mapWidth);
				case 2:
					return _Utils_Tuple2($author$project$Game$Maps$Map2$mapHeight, $author$project$Game$Maps$Map2$mapWidth);
				case 3:
					return _Utils_Tuple2($author$project$Game$Maps$Map3$mapHeight, $author$project$Game$Maps$Map3$mapWidth);
				case 4:
					return _Utils_Tuple2($author$project$Game$Maps$Map4$mapHeight, $author$project$Game$Maps$Map4$mapWidth);
				case 5:
					return _Utils_Tuple2($author$project$Game$Maps$Map5$mapHeight, $author$project$Game$Maps$Map5$mapWidth);
				case 6:
					return _Utils_Tuple2($author$project$Game$Maps$Map6$mapHeight, $author$project$Game$Maps$Map6$mapWidth);
				case 7:
					return _Utils_Tuple2($author$project$Game$Maps$Map7$mapHeight, $author$project$Game$Maps$Map7$mapWidth);
				case 8:
					return _Utils_Tuple2($author$project$Game$Maps$Map8$mapHeight, $author$project$Game$Maps$Map8$mapWidth);
				case 9:
					return _Utils_Tuple2($author$project$Game$Maps$Map9$mapHeight, $author$project$Game$Maps$Map9$mapWidth);
				default:
					return _Utils_Tuple2(0, 0);
			}
		}();
		var newSize = (_Utils_cmp((width / newRowCol.a) | 0, (height / newRowCol.b) | 0) < 0) ? ((width / newRowCol.a) | 0) : ((height / newRowCol.b) | 0);
		var newPath = function () {
			var pathList = function () {
				switch (lvl) {
					case 1:
						return $author$project$Game$Maps$Map1$path;
					case 2:
						return $author$project$Game$Maps$Map2$path;
					case 3:
						return $author$project$Game$Maps$Map3$path;
					case 4:
						return $author$project$Game$Maps$Map4$path;
					case 5:
						return $author$project$Game$Maps$Map5$path;
					case 6:
						return $author$project$Game$Maps$Map6$path;
					case 7:
						return $author$project$Game$Maps$Map7$path;
					case 8:
						return $author$project$Game$Maps$Map8$path;
					case 9:
						return $author$project$Game$Maps$Map9$path;
					default:
						return _List_Nil;
				}
			}();
			return $elm$core$Array$fromList(pathList);
		}();
		var newGrid = function () {
			var tileList = function () {
				switch (lvl) {
					case 1:
						return $author$project$Game$Maps$Map1$tileList;
					case 2:
						return $author$project$Game$Maps$Map2$tileList;
					case 3:
						return $author$project$Game$Maps$Map3$tileList;
					case 4:
						return $author$project$Game$Maps$Map4$tileList;
					case 5:
						return $author$project$Game$Maps$Map5$tileList;
					case 6:
						return $author$project$Game$Maps$Map6$tileList;
					case 7:
						return $author$project$Game$Maps$Map7$tileList;
					case 8:
						return $author$project$Game$Maps$Map8$tileList;
					case 9:
						return $author$project$Game$Maps$Map9$tileList;
					default:
						return _List_Nil;
				}
			}();
			return $elm$core$Dict$fromList(
				A2(
					$elm$core$List$map,
					function (o) {
						var pos = o.a;
						var newTile = A2($author$project$Game$Tiles$place_obstacle, o.b, mult);
						return _Utils_Tuple2(pos, newTile);
					},
					tileList));
		}();
		var newAirport = function () {
			switch (lvl) {
				case 1:
					return $author$project$Game$Maps$Map1$airport;
				case 2:
					return $author$project$Game$Maps$Map2$airport;
				case 3:
					return $author$project$Game$Maps$Map3$airport;
				case 4:
					return $author$project$Game$Maps$Map4$airport;
				case 5:
					return $author$project$Game$Maps$Map5$airport;
				case 6:
					return $author$project$Game$Maps$Map6$airport;
				case 7:
					return $author$project$Game$Maps$Map7$airport;
				case 8:
					return $author$project$Game$Maps$Map8$airport;
				case 9:
					return $author$project$Game$Maps$Map9$airport;
				default:
					return $elm$core$Maybe$Nothing;
			}
		}();
		return {
			bZ: newAirport,
			ea: _List_Nil,
			al: _List_Nil,
			bh: _List_Nil,
			a_: A2(
				$Zinggi$elm_2d_game$Game$TwoD$Camera$fixedArea,
				newRowCol.b * newRowCol.a,
				_Utils_Tuple2(newRowCol.b / 2, newRowCol.a / 2)),
			bz: $author$project$Game$Playboard$enemyLayerInitial,
			ca: $author$project$Game$Calculations$get_previous_point(
				A2(
					$elm$core$Array$get,
					$elm$core$Array$length(newPath) - 1,
					newPath)),
			cb: newGrid,
			bM: newPath,
			bP: $author$project$Game$Playboard$projectileLayerInitial,
			aQ: newRowCol,
			aV: newSize
		};
	});
var $author$project$User$difficulty_cost_multiplier = function (difficulty) {
	switch (difficulty) {
		case 0:
			return 0.9;
		case 1:
			return 1;
		default:
			return 1.05;
	}
};
var $author$project$User$difficulty_enemy_multiplier = function (difficulty) {
	switch (difficulty) {
		case 0:
			return 0.85;
		case 1:
			return 1;
		default:
			return 1.1;
	}
};
var $author$project$Game$Maps$Map1$startingCash = 120;
var $author$project$Game$Maps$Map2$startingCash = 300;
var $author$project$Game$Maps$Map3$startingCash = 450;
var $author$project$Game$Maps$Map4$startingCash = 300;
var $author$project$Game$Maps$Map5$startingCash = 480;
var $author$project$Game$Maps$Map6$startingCash = 450;
var $author$project$Game$Maps$Map7$startingCash = 750;
var $author$project$Game$Maps$Map8$startingCash = 950;
var $author$project$Game$Maps$Map9$startingCash = 200;
var $author$project$Game$Enemies$Scout = 0;
var $author$project$Game$Enemies$Soldier = 1;
var $author$project$Game$Enemies$Warrior = 2;
var $author$project$Game$Enemies$Flying = 1;
var $author$project$Game$Enemies$Ground = 0;
var $author$project$Game$Enemies$HeavyPlane = 7;
var $author$project$Game$Enemies$HeavyTank = 5;
var $author$project$Game$Enemies$Plane = 6;
var $author$project$Game$Enemies$Tank = 4;
var $author$project$Game$Enemies$Veteran = 3;
var $author$project$Game$Enemies$create_enemy = F3(
	function (enemyType, spawnOffset, spawnTime) {
		var newOffset = A3($elm$core$Basics$clamp, -0.4, 0.4, spawnOffset);
		var enemy = function () {
			switch (enemyType) {
				case 0:
					return {
						aa: 0,
						O: 0,
						h: 20,
						G: 0,
						H: 0,
						Q: _List_Nil,
						w: _Utils_Tuple2(0.4, 0.3),
						r: 0,
						ag: 1,
						A: 0,
						l: _Utils_Tuple2(0, $elm$core$Maybe$Nothing),
						u: newOffset,
						cn: _Utils_Tuple2(0, 0),
						M: 8,
						c: 0,
						Y: 3.6,
						v: '/assets/enemies/scout.png'
					};
				case 1:
					return {
						aa: 2,
						O: 1,
						h: 50,
						G: 0,
						H: 0,
						Q: _List_Nil,
						w: _Utils_Tuple2(0.5, 0.28),
						r: 0,
						ag: 1,
						A: 0,
						l: _Utils_Tuple2(0, $elm$core$Maybe$Nothing),
						u: newOffset,
						cn: _Utils_Tuple2(0, 0),
						M: 10,
						c: 0,
						Y: 2.4,
						v: '/assets/enemies/soldier.png'
					};
				case 2:
					return {
						aa: 6,
						O: 2,
						h: 120,
						G: 0,
						H: 0,
						Q: _List_Nil,
						w: _Utils_Tuple2(0.52, 0.34),
						r: 0,
						ag: 1,
						A: 0,
						l: _Utils_Tuple2(0, $elm$core$Maybe$Nothing),
						u: newOffset,
						cn: _Utils_Tuple2(0, 0),
						M: 14,
						c: 0,
						Y: 1.8,
						v: '/assets/enemies/warrior.png'
					};
				case 3:
					return {
						aa: 10,
						O: 3,
						h: 180,
						G: 0,
						H: 0,
						Q: _List_Nil,
						w: _Utils_Tuple2(0.56, 0.36),
						r: 0,
						ag: 1,
						A: 0,
						l: _Utils_Tuple2(0, $elm$core$Maybe$Nothing),
						u: newOffset,
						cn: _Utils_Tuple2(0, 0),
						M: 20,
						c: 0,
						Y: 2.2,
						v: '/assets/enemies/veteran.png'
					};
				case 4:
					return {
						aa: 26,
						O: 4,
						h: 450,
						G: 0,
						H: 0,
						Q: _List_Nil,
						w: _Utils_Tuple2(0.54, 0.8),
						r: 0,
						ag: 2,
						A: 0,
						l: _Utils_Tuple2(0, $elm$core$Maybe$Nothing),
						u: newOffset,
						cn: _Utils_Tuple2(0, 0),
						M: 30,
						c: 0,
						Y: 1.4,
						v: '/assets/enemies/tank-light.png'
					};
				case 5:
					return {
						aa: 34,
						O: 5,
						h: 600,
						G: 0,
						H: 0,
						Q: _List_Nil,
						w: _Utils_Tuple2(0.54, 0.85),
						r: 0,
						ag: 2,
						A: 0,
						l: _Utils_Tuple2(0, $elm$core$Maybe$Nothing),
						u: newOffset,
						cn: _Utils_Tuple2(0, 0),
						M: 38,
						c: 0,
						Y: 1.2,
						v: '/assets/enemies/tank-heavy.png'
					};
				case 6:
					return {
						aa: 12,
						O: 6,
						h: 800,
						G: 0,
						H: 0,
						Q: _List_Nil,
						w: _Utils_Tuple2(0.85, 0.68),
						r: 0,
						ag: 3,
						A: 1,
						l: _Utils_Tuple2(0, $elm$core$Maybe$Nothing),
						u: newOffset,
						cn: _Utils_Tuple2(0, 0),
						M: 42,
						c: 0,
						Y: 0.8,
						v: '/assets/enemies/plane-light.png'
					};
				default:
					return {
						aa: 18,
						O: 7,
						h: 1200,
						G: 0,
						H: 0,
						Q: _List_Nil,
						w: _Utils_Tuple2(0.95, 0.78),
						r: 0,
						ag: 3,
						A: 1,
						l: _Utils_Tuple2(0, $elm$core$Maybe$Nothing),
						u: newOffset,
						cn: _Utils_Tuple2(0, 0),
						M: 50,
						c: 0,
						Y: 0.6,
						v: '/assets/enemies/plane-heavy.png'
					};
			}
		}();
		return _Utils_Tuple2(spawnTime, enemy);
	});
var $author$project$Game$Enemies$create_wave = F3(
	function (waveNumber, money, enemyList) {
		return {cK: 0, cP: enemyList, M: money, dV: waveNumber};
	});
var $author$project$Game$Maps$Map1$waveList = _List_fromArray(
	[
		A3(
		$author$project$Game$Enemies$create_wave,
		1,
		80,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 3)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		2,
		100,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 10)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		3,
		115,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 4)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		4,
		130,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 9)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		5,
		150,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 1.4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 3),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 3.4),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 7.2)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		6,
		0,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 4.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 8)
			]))
	]);
var $author$project$Game$Maps$Map2$waveList = _List_fromArray(
	[
		A3(
		$author$project$Game$Enemies$create_wave,
		1,
		160,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 3),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 9)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		2,
		200,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 7),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 10.5)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		3,
		240,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.1, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.1, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 5),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 10.1),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 10.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 16)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		4,
		260,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 8.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 8.1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 14)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		5,
		200,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0.8),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.8),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3.8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 4.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 4.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 4.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 4.8),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 6)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		6,
		320,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 10)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		7,
		0,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 12)
			]))
	]);
var $author$project$Game$Maps$Map3$waveList = _List_fromArray(
	[
		A3(
		$author$project$Game$Enemies$create_wave,
		1,
		250,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		2,
		300,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 10)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		3,
		200,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 12)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		4,
		100,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 1),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 3),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 3),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 3),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 5)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		5,
		300,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 16.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 16.4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 16.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 16.4),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 16.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 16.4)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		6,
		150,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 0.33),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 0.33),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 0.66),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 0.66),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 4.33),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 4.33),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 4.66),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 4.66),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 8.33),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 8.33),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 8.66),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 8.66),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 14),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 14.33),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 14.33),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 14.33),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 14.66),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 14.66),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 14.66),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 15),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 15),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 15)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		7,
		400,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 16)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		8,
		0,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.3, 2.1),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.3, 2.1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 7),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 7),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.3, 8.1),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.3, 8.1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 13),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.1, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.1, 16),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 16),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 16)
			]))
	]);
var $author$project$Game$Maps$Map4$waveList = _List_fromArray(
	[
		A3(
		$author$project$Game$Enemies$create_wave,
		1,
		250,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 12)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		2,
		350,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 4.2),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 12.2)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		3,
		300,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 0.25),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.25),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 8.75),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 8.75),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 8.75),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 16)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		4,
		400,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 12)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		5,
		100,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 9),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 14),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 14.1),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 14.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 14.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 14.1),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 14.1)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		6,
		300,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 7),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 14.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 15),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 20)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		7,
		450,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.15),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.3),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.45),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.6),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.75),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.9),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6.15),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6.3),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6.45),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6.6),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6.75),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6.9),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 7),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 12.15),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 12.3),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 12.45),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 12.6),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 12.75),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 12.9),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 13),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.3, 18),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.3, 18)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		8,
		0,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 1.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 1.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 1.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 1.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 1.2),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6.2)
			]))
	]);
var $author$project$Game$Maps$Map5$waveList = _List_fromArray(
	[
		A3(
		$author$project$Game$Enemies$create_wave,
		1,
		200,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.3, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 4)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		2,
		300,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 0.1),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 8.1),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 8.1),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 12)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		3,
		150,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 8.5)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		4,
		250,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0.4),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0.6),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0.8),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1.2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1.4),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1.6),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1.8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2.6),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2.8),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3.2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3.4),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3.6),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3.8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 8)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		5,
		350,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 16)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		6,
		400,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 16.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 20)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		7,
		450,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 17),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 17),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 18),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 18),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 22),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 22)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		8,
		450,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.35, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.25, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.15, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.15, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.25, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.35, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.35, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.25, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.15, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.15, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.25, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.35, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 16),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 24),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 25),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 26),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 27),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 28)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		9,
		0,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 14.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 15),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 14.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 15),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 20),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 21),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 22),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 22)
			]))
	]);
var $author$project$Game$Maps$Map6$waveList = _List_fromArray(
	[
		A3(
		$author$project$Game$Enemies$create_wave,
		1,
		450,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 10)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		2,
		350,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3.15),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3.3),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 10.65),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 10.8),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 13.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 15)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		3,
		450,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 7),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 11),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 14)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		4,
		250,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 14)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		5,
		200,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 0.3),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0.3),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0.3),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.3),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 0.6),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 0.6),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 0.6),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 0.6),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 6.15),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 6.15),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6.3),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 6.3),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 6.3),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 8.15),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 8.15),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 8.3),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 8.3),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 8.3)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		6,
		450,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 3),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 7),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 13),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 18)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		7,
		150,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 17),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 20),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 22)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		8,
		300,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 20)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		9,
		200,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 1),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 8),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 13),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 18),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 18),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 20)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		10,
		0,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 3),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.15),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.3),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.45),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.6),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.75),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.9),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 11.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 11.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 11.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 11.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 11.2),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 11.7),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 11.7),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 11.7),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 11.7),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 11.7),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 12.3),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 12.45),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 12.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 12.75),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 12.9),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 14.3),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 14.45),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 14.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 14.75),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 14.9),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 15),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 16.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 17),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 17.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 18),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 19),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 19.5),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 22),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 22),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 22),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 22),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 25)
			]))
	]);
var $author$project$Game$Maps$Map7$waveList = _List_fromArray(
	[
		A3(
		$author$project$Game$Enemies$create_wave,
		1,
		350,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 3),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 8)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		2,
		100,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4.4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 8.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 8.4),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 12)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		3,
		350,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 13)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		4,
		150,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 7),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 7),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 14.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 15),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 14.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 15),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 21)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		5,
		250,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 3),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 17),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 20)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		6,
		450,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0.3),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0.9),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.8),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.1),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.7),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.3),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.9),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 6.8),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 7.1),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 7.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 7.7),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 5, -0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 5, 0.2, 12)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		7,
		400,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 16)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		8,
		50,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 1.2),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 1.4),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 1.6),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 1.8),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 2.6),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 2.8),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 3.2),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 3.4),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 3.6),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 3.8),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 7.2),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 7.4),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 7.6),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 7.8),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 8.2),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 8.4),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 8.6),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 8.8),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 15),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 15),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 15)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		9,
		100,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 0.8),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.4, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.4, 3),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 4.8),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.4, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.4, 7),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 11),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 11),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 11),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 11.8),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 12)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		10,
		0,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.1),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.3),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.4),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.6),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.7),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.8),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 10.9),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 11),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 10.2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 10.4),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 10.6),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 10.8),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 11),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 10.33),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 10.66),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 11),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 11),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 15),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 15),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 16),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 20),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 20),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 20.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 20.5)
			]))
	]);
var $author$project$Game$Maps$Map8$waveList = _List_fromArray(
	[
		A3(
		$author$project$Game$Enemies$create_wave,
		1,
		50,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 0)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		2,
		250,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 15),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 18)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		3,
		400,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 14.5),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 17),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 24),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 24.5),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 28)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		4,
		350,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 2.1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 4.1),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 6.1),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 10.1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12.1),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 14.1),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 18),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 18.1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 20),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 20.1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 22),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 22.1),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 24)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		5,
		350,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.3),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 1.9),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.8),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3.1),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3.7),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.3),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.6),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5.9),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 6.2),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 6.8),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 7.1),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 7.4),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 7.7),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 9.4),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 9.8),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 10.2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 10.8),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 11.2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 11.6),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 16),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 16)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		6,
		400,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 7),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 24),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 24),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 24)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		7,
		50,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 2.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 2.4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 2.6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 2.6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 2.6),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 10.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 10.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 10.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 10.4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 10.4),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 10.4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 10.6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 10.6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 10.6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 12.2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12.4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 12.4),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12.4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12.6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 12.6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12.6),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 22),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 22),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 22),
				A3($author$project$Game$Enemies$create_enemy, 6, 0.2, 24),
				A3($author$project$Game$Enemies$create_enemy, 6, -0.2, 24)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		8,
		50,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 3),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 7),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 11),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 13),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 15),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 17),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 18),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 19),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 20)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		9,
		50,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 7, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 7, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 5, -0.2, 7),
				A3($author$project$Game$Enemies$create_enemy, 5, 0.2, 7),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 6, -0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 6, 0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 15),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 15),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 15)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		10,
		50,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 16),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 18),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 18),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 18)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		11,
		0,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.3, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -0.2, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.2, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 0.3, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 13),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 13),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 13),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 13.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 13.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 15.5),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 18),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 19),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 19),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 20)
			]))
	]);
var $author$project$Game$Maps$Map9$waveList = _List_fromArray(
	[
		A3(
		$author$project$Game$Enemies$create_wave,
		1,
		250,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 15),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 17),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 19),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 21),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 23),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 25)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		2,
		450,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 15),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 16.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 21),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 22.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 24),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 25),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 27)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		3,
		350,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 15),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 15),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 15),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 16)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		4,
		600,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 0.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 0.4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 0.6),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4.4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4.6),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 8.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 8.4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 8.6),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12.2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12.4),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12.6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 15),
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 15),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 15)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		5,
		600,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 0.8),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 1.6),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 10.8),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 11.6),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 18.8),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 19.6),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 22)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		6,
		300,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 24),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 24),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 30)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		7,
		100,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 3),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 7),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 7.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 11),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 13),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 13.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 14.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 15),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 15),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 15),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 16.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 17),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 17.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 18),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 19),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 19.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 20),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 21),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 22),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 23),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 24),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 25),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 25),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 30),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 30),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 30)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		8,
		100,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.1, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.3, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, 0.1, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.1, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, -0.3, 14),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 18)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		9,
		50,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 1),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 1),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 5),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 6),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 6),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 9),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 4, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 13),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 13),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 13),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 13),
				A3($author$project$Game$Enemies$create_enemy, 5, -1, 13),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 5, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.1, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.1, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 14),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 18)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		10,
		50,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.1, 1),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.1, 1),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.1, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.1, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 5, -0.1, 5),
				A3($author$project$Game$Enemies$create_enemy, 5, 0.1, 5),
				A3($author$project$Game$Enemies$create_enemy, 5, -0.1, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 0.1, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 8),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.1, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.1, 9),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.1, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.1, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 10),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 10),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 12),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 5, -0.1, 13),
				A3($author$project$Game$Enemies$create_enemy, 5, 0.1, 13),
				A3($author$project$Game$Enemies$create_enemy, 5, -0.1, 13.5),
				A3($author$project$Game$Enemies$create_enemy, 5, 0.1, 13.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 14),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 14),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 16),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 16),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 16),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.1, 17),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.1, 17),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.1, 17.5),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.1, 17.5),
				A3($author$project$Game$Enemies$create_enemy, 1, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.3, 18),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.2, 18),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.2, 18),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.3, 18),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 18),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 1, -0.3, 20),
				A3($author$project$Game$Enemies$create_enemy, 2, -0.2, 20),
				A3($author$project$Game$Enemies$create_enemy, 2, 0.2, 20),
				A3($author$project$Game$Enemies$create_enemy, 1, 0.3, 20),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 20),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 20)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		11,
		150,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 6, -0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 6, 0.2, 4),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 6, -0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 6, 0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 18),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 18),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 20),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 20)
			])),
		A3(
		$author$project$Game$Enemies$create_wave,
		12,
		0,
		_List_fromArray(
			[
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 0.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 1),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 1),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 1.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 2),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 2),
				A3($author$project$Game$Enemies$create_enemy, 5, -0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 5, 0.2, 2),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 2.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 3),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 3),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 3.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 4),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 4),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 4),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 4.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 5.5),
				A3($author$project$Game$Enemies$create_enemy, 0, -1, 6),
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 6),
				A3($author$project$Game$Enemies$create_enemy, 2, 1, 6),
				A3($author$project$Game$Enemies$create_enemy, 5, -0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 5, 0.2, 6),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 7, -0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 7, 0.2, 8),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 8),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 8.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 9),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 9.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 10),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 10),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 10.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 11),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 11),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 11),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 11),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 11),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 11.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 12),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 12),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 12),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 12.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 13),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 13),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 13),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 13.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 13.5),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 13.5),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 14),
				A3($author$project$Game$Enemies$create_enemy, 3, 1, 14),
				A3($author$project$Game$Enemies$create_enemy, 4, 0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 4, -0.2, 14),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 16),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 16),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 16),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 16.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 16.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 16.5),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 17),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 17),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 18),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 18),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 18),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 18.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 20),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 20),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 20),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 20.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 20.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 20.5),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 21),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 21),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 22),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 22),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 22),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 22.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 22.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 22.5),
				A3($author$project$Game$Enemies$create_enemy, 0, 1, 24),
				A3($author$project$Game$Enemies$create_enemy, 3, -1, 24),
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 24),
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 24.5),
				A3($author$project$Game$Enemies$create_enemy, 1, 1, 24.5),
				A3($author$project$Game$Enemies$create_enemy, 2, -1, 24.5),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 38),
				A3($author$project$Game$Enemies$create_enemy, 6, -0.2, 38),
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 38),
				A3($author$project$Game$Enemies$create_enemy, 6, 0.2, 38),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 38),
				A3($author$project$Game$Enemies$create_enemy, 7, -1, 38.5),
				A3($author$project$Game$Enemies$create_enemy, 7, -0.2, 38.5),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 38.5),
				A3($author$project$Game$Enemies$create_enemy, 7, 0.2, 38.5),
				A3($author$project$Game$Enemies$create_enemy, 7, 1, 38.5),
				A3($author$project$Game$Enemies$create_enemy, 6, -1, 39),
				A3($author$project$Game$Enemies$create_enemy, 7, -0.2, 39),
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 39),
				A3($author$project$Game$Enemies$create_enemy, 7, 0.2, 39),
				A3($author$project$Game$Enemies$create_enemy, 6, 1, 39),
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 40)
			]))
	]);
var $author$project$Game$Level$create_level = F4(
	function (diff, lvl, width, height) {
		var newCostMult = $author$project$User$difficulty_cost_multiplier(diff);
		var enemyWaves = function () {
			switch (lvl) {
				case 1:
					return $elm$core$Array$fromList($author$project$Game$Maps$Map1$waveList);
				case 2:
					return $elm$core$Array$fromList($author$project$Game$Maps$Map2$waveList);
				case 3:
					return $elm$core$Array$fromList($author$project$Game$Maps$Map3$waveList);
				case 4:
					return $elm$core$Array$fromList($author$project$Game$Maps$Map4$waveList);
				case 5:
					return $elm$core$Array$fromList($author$project$Game$Maps$Map5$waveList);
				case 6:
					return $elm$core$Array$fromList($author$project$Game$Maps$Map6$waveList);
				case 7:
					return $elm$core$Array$fromList($author$project$Game$Maps$Map7$waveList);
				case 8:
					return $elm$core$Array$fromList($author$project$Game$Maps$Map8$waveList);
				case 9:
					return $elm$core$Array$fromList($author$project$Game$Maps$Map9$waveList);
				default:
					return $elm$core$Array$empty;
			}
		}();
		var cash = function () {
			switch (lvl) {
				case 1:
					return $author$project$Game$Maps$Map1$startingCash;
				case 2:
					return $author$project$Game$Maps$Map2$startingCash;
				case 3:
					return $author$project$Game$Maps$Map3$startingCash;
				case 4:
					return $author$project$Game$Maps$Map4$startingCash;
				case 5:
					return $author$project$Game$Maps$Map5$startingCash;
				case 6:
					return $author$project$Game$Maps$Map6$startingCash;
				case 7:
					return $author$project$Game$Maps$Map7$startingCash;
				case 8:
					return $author$project$Game$Maps$Map8$startingCash;
				case 9:
					return $author$project$Game$Maps$Map9$startingCash;
				default:
					return 0;
			}
		}();
		return {
			b1: newCostMult,
			cK: 0,
			ad: A2($elm$core$Array$get, 0, enemyWaves),
			b8: $author$project$User$difficulty_enemy_multiplier(diff),
			ag: 20,
			i: A4($author$project$Game$Playboard$create_board, lvl, width, height, newCostMult),
			c6: (!cash) ? 0 : lvl,
			S: 0,
			o: cash,
			Y: 0,
			cw: enemyWaves
		};
	});
var $author$project$Game$Playboard$get_col = function (b) {
	return b.aQ.b;
};
var $author$project$Game$Playboard$get_row = function (b) {
	return b.aQ.a;
};
var $author$project$Pages$Game$minimumGameHeight = 650;
var $author$project$Pages$Game$initModel = F2(
	function (state, str) {
		var lvlNumber = function () {
			if (str.$ === 1) {
				return 0;
			} else {
				var num = str.a;
				return A2(
					$elm$core$Maybe$withDefault,
					0,
					$elm$core$String$toInt(num));
			}
		}();
		var currentLevel = A4($author$project$Game$Level$create_level, state.fE.eQ, lvlNumber, $author$project$Pages$Game$minimumGameHeight, $author$project$Pages$Game$minimumGameHeight);
		var height = $author$project$Game$Playboard$get_row(currentLevel.i) * currentLevel.i.aV;
		var width = $author$project$Game$Playboard$get_col(currentLevel.i) * currentLevel.i.aV;
		return {
			f: 0,
			d: $author$project$Game$Level$NoAction,
			aL: $elm$core$Maybe$Nothing,
			e: $author$project$Game$Level$NoObject,
			b2: state.fE,
			a2: $elm$core$Maybe$Nothing,
			aN: _Utils_Tuple2(width, height),
			fm: currentLevel,
			aj: true,
			aR: true,
			aS: true
		};
	});
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $elm$core$Basics$cos = _Basics_cos;
var $author$project$Game$Calculations$dir_to_rot = function (dir) {
	var deg = function () {
		switch (dir) {
			case 0:
				return 0;
			case 1:
				return 90;
			case 2:
				return 180;
			default:
				return 270;
		}
	}();
	return deg * ($elm$core$Basics$pi / 180);
};
var $author$project$Game$Calculations$emptyPoint = A2(
	$author$project$Game$Calculations$Point,
	_Utils_Tuple2(0, 0),
	0);
var $author$project$Game$Enemies$heathbarHeight = 0.2;
var $author$project$Game$Calculations$rot_is_dir = function (rot) {
	var deg = rot * (180 / $elm$core$Basics$pi);
	var _v0 = $elm$core$Basics$round(deg);
	switch (_v0) {
		case 0:
			return true;
		case 90:
			return true;
		case 180:
			return true;
		case 270:
			return true;
		default:
			return false;
	}
};
var $elm$core$Basics$sin = _Basics_sin;
var $author$project$Game$Enemies$set_healthbar_distance = function (enemy) {
	var enemyWidth = enemy.w.a;
	var sinDistance = $elm$core$Basics$abs(
		($elm$core$Basics$sin(enemy.c) * enemyWidth) / 2);
	var enemyHeight = enemy.w.b;
	var cosDistance = $elm$core$Basics$abs(
		($elm$core$Basics$cos(enemy.c) * enemyHeight) / 2);
	var barDistanceY = $author$project$Game$Calculations$rot_is_dir(enemy.c) ? (A2($elm$core$Basics$max, sinDistance, cosDistance) + ($author$project$Game$Enemies$heathbarHeight * 0.5)) : (A2($elm$core$Basics$max, sinDistance, cosDistance) + ($author$project$Game$Enemies$heathbarHeight * 0.75));
	return _Utils_update(
		enemy,
		{H: barDistanceY});
};
var $author$project$Game$Enemies$place_enemy = F5(
	function (enemy, path, airport, newLayer, mult) {
		var newHealth = $elm$core$Basics$round(enemy.h * mult);
		var _v0 = enemy.A;
		if (_v0 === 1) {
			var point = A2($elm$core$Maybe$withDefault, $author$project$Game$Calculations$emptyPoint, airport);
			var newRotation = $author$project$Game$Calculations$dir_to_rot(point.b6);
			var sinValue = $elm$core$Basics$sin(newRotation);
			var newY = point.cn.b + ($elm$core$Basics$abs(sinValue) * enemy.u);
			var currentIndex = $elm$core$Array$length(path) - 1;
			var cosValue = $elm$core$Basics$cos(newRotation);
			var newX = point.cn.a + ($elm$core$Basics$abs(cosValue) * enemy.u);
			var nextX = newX + sinValue;
			var nextY = newY + cosValue;
			return $author$project$Game$Enemies$set_healthbar_distance(
				_Utils_update(
					enemy,
					{
						h: newHealth,
						G: newHealth,
						r: newLayer,
						l: _Utils_Tuple2(
							currentIndex,
							$elm$core$Maybe$Just(
								_Utils_Tuple2(nextX, nextY))),
						cn: _Utils_Tuple2(newX, newY),
						c: newRotation
					}));
		} else {
			var point = A2(
				$elm$core$Maybe$withDefault,
				$author$project$Game$Calculations$emptyPoint,
				A2($elm$core$Array$get, 0, path));
			var offsetMult = function () {
				var _v1 = point.b6;
				switch (_v1) {
					case 0:
						return 1;
					case 2:
						return -1;
					case 3:
						return 1;
					default:
						return -1;
				}
			}();
			var newY = ((point.b6 === 3) || (point.b6 === 1)) ? (point.cn.b + (enemy.u * offsetMult)) : point.cn.b;
			var newX = ((!point.b6) || (point.b6 === 2)) ? (point.cn.a + (enemy.u * offsetMult)) : point.cn.a;
			return $author$project$Game$Enemies$set_healthbar_distance(
				_Utils_update(
					enemy,
					{
						h: newHealth,
						G: newHealth,
						r: newLayer,
						l: _Utils_Tuple2(1, $elm$core$Maybe$Nothing),
						cn: _Utils_Tuple2(newX, newY),
						c: $author$project$Game$Calculations$dir_to_rot(point.b6)
					}));
		}
	});
var $author$project$Pages$Guide$init_Enemies = function (mult) {
	return $elm$core$Array$fromList(
		_List_fromArray(
			[
				A5(
				$author$project$Game$Enemies$place_enemy,
				A3($author$project$Game$Enemies$create_enemy, 0, 0, 0).b,
				$elm$core$Array$empty,
				$elm$core$Maybe$Nothing,
				1,
				mult),
				A5(
				$author$project$Game$Enemies$place_enemy,
				A3($author$project$Game$Enemies$create_enemy, 1, 0, 0).b,
				$elm$core$Array$empty,
				$elm$core$Maybe$Nothing,
				1,
				mult),
				A5(
				$author$project$Game$Enemies$place_enemy,
				A3($author$project$Game$Enemies$create_enemy, 2, 0, 0).b,
				$elm$core$Array$empty,
				$elm$core$Maybe$Nothing,
				1,
				mult),
				A5(
				$author$project$Game$Enemies$place_enemy,
				A3($author$project$Game$Enemies$create_enemy, 3, 0, 0).b,
				$elm$core$Array$empty,
				$elm$core$Maybe$Nothing,
				1,
				mult),
				A5(
				$author$project$Game$Enemies$place_enemy,
				A3($author$project$Game$Enemies$create_enemy, 4, 0, 0).b,
				$elm$core$Array$empty,
				$elm$core$Maybe$Nothing,
				1,
				mult),
				A5(
				$author$project$Game$Enemies$place_enemy,
				A3($author$project$Game$Enemies$create_enemy, 5, 0, 0).b,
				$elm$core$Array$empty,
				$elm$core$Maybe$Nothing,
				1,
				mult),
				A5(
				$author$project$Game$Enemies$place_enemy,
				A3($author$project$Game$Enemies$create_enemy, 6, 0, 0).b,
				$elm$core$Array$empty,
				$elm$core$Maybe$Nothing,
				1,
				mult),
				A5(
				$author$project$Game$Enemies$place_enemy,
				A3($author$project$Game$Enemies$create_enemy, 7, 0, 0).b,
				$elm$core$Array$empty,
				$elm$core$Maybe$Nothing,
				1,
				mult)
			]));
};
var $author$project$Game$Towers$NoPath = 2;
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.n)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.n, tail);
		return (notAppended < 0) ? {
			p: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.p),
			j: builder.j + 1,
			n: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			p: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.p),
			j: builder.j + 1,
			n: $elm$core$Elm$JsArray$empty
		} : {p: builder.p, j: builder.j, n: appended});
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!value.$) {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$appendHelpTree = F2(
	function (toAppend, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		var itemsToAppend = $elm$core$Elm$JsArray$length(toAppend);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(tail)) - itemsToAppend;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, tail, toAppend);
		var newArray = A2($elm$core$Array$unsafeReplaceTail, appended, array);
		if (notAppended < 0) {
			var nextTail = A3($elm$core$Elm$JsArray$slice, notAppended, itemsToAppend, toAppend);
			return A2($elm$core$Array$unsafeReplaceTail, nextTail, newArray);
		} else {
			return newArray;
		}
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$builderFromArray = function (_v0) {
	var len = _v0.a;
	var tree = _v0.c;
	var tail = _v0.d;
	var helper = F2(
		function (node, acc) {
			if (!node.$) {
				var subTree = node.a;
				return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
			} else {
				return A2($elm$core$List$cons, node, acc);
			}
		});
	return {
		p: A3($elm$core$Elm$JsArray$foldl, helper, _List_Nil, tree),
		j: (len / $elm$core$Array$branchFactor) | 0,
		n: tail
	};
};
var $elm$core$Array$append = F2(
	function (a, _v0) {
		var aTail = a.d;
		var bLen = _v0.a;
		var bTree = _v0.c;
		var bTail = _v0.d;
		if (_Utils_cmp(bLen, $elm$core$Array$branchFactor * 4) < 1) {
			var foldHelper = F2(
				function (node, array) {
					if (!node.$) {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, array, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpTree, leaf, array);
					}
				});
			return A2(
				$elm$core$Array$appendHelpTree,
				bTail,
				A3($elm$core$Elm$JsArray$foldl, foldHelper, a, bTree));
		} else {
			var foldHelper = F2(
				function (node, builder) {
					if (!node.$) {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, builder, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpBuilder, leaf, builder);
					}
				});
			return A2(
				$elm$core$Array$builderToArray,
				true,
				A2(
					$elm$core$Array$appendHelpBuilder,
					bTail,
					A3(
						$elm$core$Elm$JsArray$foldl,
						foldHelper,
						$elm$core$Array$builderFromArray(a),
						bTree)));
		}
	});
var $author$project$Game$Towers$Cannon = {$: 1};
var $author$project$Game$Towers$First = 0;
var $author$project$Game$Towers$Minigun = {$: 0};
var $author$project$Game$Towers$RocketLauncher = function (a) {
	return {$: 2, a: a};
};
var $author$project$Game$Towers$hitTimer = 0.05;
var $author$project$Game$Towers$create_tower = F2(
	function (towertype, mult) {
		var towerClass = function () {
			switch (towertype) {
				case 'minigun':
					return $author$project$Game$Towers$Minigun;
				case 'cannon':
					return $author$project$Game$Towers$Cannon;
				case 'rocketlauncher':
					return $author$project$Game$Towers$RocketLauncher(0);
				default:
					return $author$project$Game$Towers$Minigun;
			}
		}();
		switch (towerClass.$) {
			case 0:
				return {
					O: $author$project$Game$Towers$Minigun,
					eZ: 1.2,
					cf: 0,
					fm: 0,
					I: 0.35,
					cn: _Utils_Tuple2(0, 0),
					b: _Utils_Tuple2(
						$elm$core$Basics$round(100 * mult),
						0),
					fJ: 0,
					fK: 12,
					fL: $author$project$Game$Towers$hitTimer,
					B: 0.1,
					fM: 1,
					fN: 0,
					fP: 1.75,
					c: 0,
					fZ: 0,
					bS: 0.65,
					gc: 0,
					aU: '/assets/towers/base-pointy.png',
					x: '/assets/towers/minigun.png'
				};
			case 1:
				return {
					O: $author$project$Game$Towers$Cannon,
					eZ: 2,
					cf: 0,
					fm: 0,
					I: 0.2,
					cn: _Utils_Tuple2(0, 0),
					b: _Utils_Tuple2(
						$elm$core$Basics$round(150 * mult),
						0),
					fJ: 4,
					fK: 22,
					fL: 0.8,
					B: 0,
					fM: 2,
					fN: 4,
					fP: 2.15,
					c: 0,
					fZ: 0,
					bS: 0.8,
					gc: 0,
					aU: '/assets/towers/base-squared.png',
					x: '/assets/towers/cannon.png'
				};
			default:
				return {
					O: $author$project$Game$Towers$RocketLauncher(1.15),
					eZ: 2.2,
					cf: 0,
					fm: 0,
					I: 0.12,
					cn: _Utils_Tuple2(0, 0),
					b: _Utils_Tuple2(
						$elm$core$Basics$round(180 * mult),
						0),
					fJ: 2,
					fK: 18,
					fL: 0.5,
					B: 0,
					fM: 5,
					fN: 6,
					fP: 2.75,
					c: 0,
					fZ: 0,
					bS: 0.6,
					gc: 0,
					aU: '/assets/towers/base-combined.png',
					x: '/assets/towers/rocketlauncher.png'
				};
		}
	});
var $author$project$Game$Towers$get_tower_price = F2(
	function (tower, path) {
		switch (path) {
			case 2:
				return tower.b.a;
			case 0:
				return tower.b.a;
			default:
				return tower.b.b;
		}
	});
var $author$project$Game$Towers$hitTimerLong = 0.08;
var $author$project$Game$Towers$sellMultiplier = 0.75;
var $author$project$Game$Towers$increase_level = F3(
	function (tower, path, mult) {
		var newValue = tower.fZ + $elm$core$Basics$round(
			A2($author$project$Game$Towers$get_tower_price, tower, path) * $author$project$Game$Towers$sellMultiplier);
		switch (path) {
			case 2:
				var _v1 = tower.fm;
				switch (_v1) {
					case 0:
						return _Utils_update(
							tower,
							{fm: 1, fZ: newValue});
					case 1:
						var _v2 = tower.O;
						switch (_v2.$) {
							case 0:
								return _Utils_update(
									tower,
									{
										eZ: 1.05,
										cf: 0,
										fm: 2,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(50 * mult),
											0),
										fK: 14,
										fP: 1.9,
										fZ: newValue
									});
							case 1:
								return _Utils_update(
									tower,
									{
										eZ: 1.9,
										cf: 0,
										fm: 2,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(60 * mult),
											0),
										fJ: 6,
										fK: 24,
										fL: 0.85,
										fN: 4.3,
										fP: 2.3,
										fZ: newValue
									});
							default:
								return _Utils_update(
									tower,
									{
										O: $author$project$Game$Towers$RocketLauncher(1.3),
										eZ: 2,
										cf: 0,
										fm: 2,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(70 * mult),
											0),
										fJ: 3,
										fK: 20,
										fN: 6.5,
										fP: 2.8,
										fZ: newValue
									});
						}
					case 2:
						var _v3 = tower.O;
						switch (_v3.$) {
							case 0:
								return _Utils_update(
									tower,
									{
										eZ: 0.9,
										cf: 0,
										fm: 3,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(60 * mult),
											0),
										fJ: 1,
										fK: 14,
										fP: 2,
										fZ: newValue
									});
							case 1:
								return _Utils_update(
									tower,
									{
										eZ: 1.8,
										cf: 0,
										fm: 3,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(75 * mult),
											0),
										fJ: 8,
										fK: 26,
										fL: 0.9,
										fM: 3,
										fN: 4.6,
										fP: 2.45,
										fZ: newValue
									});
							default:
								return _Utils_update(
									tower,
									{
										O: $author$project$Game$Towers$RocketLauncher(1.4),
										eZ: 1.8,
										cf: 0,
										fm: 3,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(80 * mult),
											0),
										fJ: 4,
										fK: 22,
										fM: 6,
										fN: 7,
										fP: 2.85,
										fZ: newValue
									});
						}
					case 3:
						var _v4 = tower.O;
						switch (_v4.$) {
							case 0:
								return _Utils_update(
									tower,
									{
										eZ: 0.75,
										cf: 0,
										fm: 4,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(75 * mult),
											0),
										fJ: 1,
										fK: 16,
										fP: 2.1,
										fZ: newValue
									});
							case 1:
								return _Utils_update(
									tower,
									{
										eZ: 1.6,
										cf: 0,
										fm: 4,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(90 * mult),
											0),
										fJ: 10,
										fK: 32,
										fL: 0.95,
										fM: 3,
										fN: 5,
										fP: 2.6,
										fZ: newValue
									});
							default:
								return _Utils_update(
									tower,
									{
										O: $author$project$Game$Towers$RocketLauncher(1.5),
										eZ: 1.7,
										cf: 0,
										fm: 4,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(100 * mult),
											0),
										fJ: 5,
										fK: 26,
										fM: 7,
										fN: 7.5,
										fP: 2.9,
										fZ: newValue
									});
						}
					case 4:
						var _v5 = tower.O;
						switch (_v5.$) {
							case 0:
								return _Utils_update(
									tower,
									{
										eZ: 0.6,
										cf: 0,
										fm: 5,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(100 * mult),
											0),
										fJ: 2,
										fK: 20,
										fP: 2.3,
										fZ: newValue
									});
							case 1:
								return _Utils_update(
									tower,
									{
										eZ: 1.4,
										cf: 0,
										fm: 5,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(115 * mult),
											0),
										fJ: 12,
										fK: 38,
										fL: 1,
										fM: 3,
										fN: 5.6,
										fP: 3.3,
										fZ: newValue
									});
							default:
								return _Utils_update(
									tower,
									{
										O: $author$project$Game$Towers$RocketLauncher(1.6),
										eZ: 1.6,
										cf: 0,
										fm: 5,
										b: _Utils_Tuple2(
											$elm$core$Basics$round(120 * mult),
											0),
										fJ: 6,
										fK: 32,
										fM: 8,
										fN: 8,
										fP: 3,
										fZ: newValue
									});
						}
					default:
						return tower;
				}
			case 0:
				var _v6 = tower.O;
				switch (_v6.$) {
					case 0:
						return _Utils_update(
							tower,
							{
								eZ: 1.8,
								cf: 0,
								fm: 8,
								I: 0.40,
								b: _Utils_Tuple2(
									$elm$core$Basics$round(220 * mult),
									$elm$core$Basics$round(200 * mult)),
								fJ: 4,
								fK: 120,
								fL: $author$project$Game$Towers$hitTimerLong,
								B: 0,
								fP: 4.5,
								fZ: newValue,
								bS: 0.8,
								x: '/assets/towers/minigun-1.png'
							});
					case 1:
						return _Utils_update(
							tower,
							{
								eZ: 1.4,
								cf: 0,
								fm: 8,
								I: 0.25,
								b: _Utils_Tuple2(
									$elm$core$Basics$round(240 * mult),
									$elm$core$Basics$round(220 * mult)),
								fJ: 20,
								fK: 64,
								fL: 1,
								fM: 4,
								fN: 6,
								fP: 3.5,
								fZ: newValue,
								bS: 0.95,
								x: '/assets/towers/cannon-1.png'
							});
					default:
						return _Utils_update(
							tower,
							{
								O: $author$project$Game$Towers$RocketLauncher(2.2),
								eZ: 1.8,
								cf: 0,
								fm: 8,
								I: 0.18,
								b: _Utils_Tuple2(
									$elm$core$Basics$round(280 * mult),
									$elm$core$Basics$round(300 * mult)),
								fJ: 8,
								fK: 60,
								fL: 0.4,
								fM: 10,
								fN: 8,
								fP: 3,
								fZ: newValue,
								bS: 0.68,
								x: '/assets/towers/rocketlauncher-1.png'
							});
				}
			default:
				var _v7 = tower.O;
				switch (_v7.$) {
					case 0:
						return _Utils_update(
							tower,
							{
								eZ: 0.3,
								cf: 0,
								fm: 7,
								I: 0.4,
								b: _Utils_Tuple2(
									$elm$core$Basics$round(220 * mult),
									$elm$core$Basics$round(200 * mult)),
								fJ: 2,
								fK: 22,
								B: 0.1,
								fP: 2.5,
								fZ: newValue,
								bS: 0.75,
								x: '/assets/towers/minigun-2.png'
							});
					case 1:
						return _Utils_update(
							tower,
							{
								eZ: 0.5,
								cf: 0,
								fm: 7,
								I: 0.28,
								b: _Utils_Tuple2(
									$elm$core$Basics$round(240 * mult),
									$elm$core$Basics$round(220 * mult)),
								fJ: 18,
								fK: 30,
								fL: 0.5,
								B: 0.095,
								fM: 2,
								fN: 9,
								fP: 3,
								fZ: newValue,
								bS: 0.9,
								x: '/assets/towers/cannon-2.png'
							});
					default:
						return _Utils_update(
							tower,
							{
								O: $author$project$Game$Towers$RocketLauncher(1),
								eZ: 1,
								cf: 0,
								fm: 7,
								I: 0.35,
								b: _Utils_Tuple2(
									$elm$core$Basics$round(280 * mult),
									$elm$core$Basics$round(300 * mult)),
								fJ: 12,
								fK: 40,
								fL: 0.75,
								B: 0.12,
								fM: 5,
								fN: 8,
								fP: 4,
								fZ: newValue,
								bS: 0.85,
								x: '/assets/towers/rocketlauncher-2.png'
							});
				}
		}
	});
var $author$project$Game$Towers$Bottom = 1;
var $author$project$Game$Towers$Top = 0;
var $author$project$Game$Towers$get_upgrade_type = function (tower) {
	var _v0 = tower.fm;
	switch (_v0) {
		case 8:
			return 0;
		case 7:
			return 1;
		default:
			return 2;
	}
};
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $author$project$Pages$Guide$tower_levels = F2(
	function (tower, mult) {
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (o, _v1) {
					var listT = _v1.a;
					var lvl = _v1.b;
					var previousTower = A2($elm$core$Array$get, lvl - 2, listT);
					var newLvl = lvl + 1;
					if (previousTower.$ === 1) {
						return _Utils_Tuple2(
							A2($elm$core$Array$push, o, listT),
							newLvl);
					} else {
						var t = previousTower.a;
						var nextLvl = function () {
							var _v3 = t.fm;
							if (_v3 === 5) {
								return 7;
							} else {
								return t.fm + 1;
							}
						}();
						var currentPath = $author$project$Game$Towers$get_upgrade_type(
							_Utils_update(
								t,
								{fm: nextLvl}));
						var newTower = A3($author$project$Game$Towers$increase_level, t, currentPath, mult);
						return _Utils_Tuple2(
							A2($elm$core$Array$push, newTower, listT),
							newLvl);
					}
				}),
			_Utils_Tuple2($elm$core$Array$empty, 1),
			A2($elm$core$List$repeat, 7, tower));
		var towerList = _v0.a;
		var currentLevel = _v0.b;
		return towerList;
	});
var $author$project$Pages$Guide$init_towers = function (mult) {
	var towerRocket = A3(
		$author$project$Game$Towers$increase_level,
		A2($author$project$Game$Towers$create_tower, 'rocketlauncher', mult),
		2,
		mult);
	var towerMinigun = A3(
		$author$project$Game$Towers$increase_level,
		A2($author$project$Game$Towers$create_tower, 'minigun', mult),
		2,
		mult);
	var towerCannon = A3(
		$author$project$Game$Towers$increase_level,
		A2($author$project$Game$Towers$create_tower, 'cannon', mult),
		2,
		mult);
	return A2(
		$elm$core$Array$append,
		A2($author$project$Pages$Guide$tower_levels, towerMinigun, mult),
		A2(
			$elm$core$Array$append,
			A2($author$project$Pages$Guide$tower_levels, towerCannon, mult),
			A2($author$project$Pages$Guide$tower_levels, towerRocket, mult)));
};
var $author$project$Pages$Guide$initModel = function (state) {
	return {
		ea: $author$project$Pages$Guide$init_Enemies(
			$author$project$User$difficulty_enemy_multiplier(state.fE.eQ)),
		bh: $author$project$Pages$Guide$init_towers(
			$author$project$User$difficulty_cost_multiplier(state.fE.eQ)),
		f: 0,
		aK: 0,
		m: 0
	};
};
var $author$project$Pages$Home$initModel = {f: 0};
var $author$project$Pages$Info$initModel = {f: 0};
var $author$project$Pages$LevelPreview$initModel = function (state) {
	return {
		f: 0,
		a1: $elm$core$Maybe$Nothing,
		bE: state.fE.bE,
		bG: $author$project$User$get_unlocked_level(state.fE)
	};
};
var $author$project$User$emptyScore = {aH: 0, aq: 0};
var $elm$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			$elm$core$Array$initialize,
			n,
			function (_v0) {
				return e;
			});
	});
var $author$project$Pages$ScoreBoard$initModel = function (state) {
	var difference = $author$project$User$maxMapNumber - $elm$core$Array$length(state.fE.bE);
	var newScore = (difference > 0) ? A2(
		$elm$core$Array$append,
		state.fE.bE,
		A2($elm$core$Array$repeat, difference, $author$project$User$emptyScore)) : state.fE.bE;
	return {f: 0, b3: newScore};
};
var $author$project$Pages$Settings$messageCurrent = '* Player data are up-to-date.';
var $author$project$Pages$Settings$initModel = function (state) {
	return {f: 0, aL: $author$project$Pages$Settings$messageCurrent, b2: state.fE, aA: state.fE};
};
var $elm$url$Url$Parser$mapState = F2(
	function (func, _v0) {
		var visited = _v0.aG;
		var unvisited = _v0.at;
		var params = _v0.aC;
		var frag = _v0.ax;
		var value = _v0.gz;
		return A5(
			$elm$url$Url$Parser$State,
			visited,
			unvisited,
			params,
			frag,
			func(value));
	});
var $elm$url$Url$Parser$map = F2(
	function (subValue, _v0) {
		var parseArg = _v0;
		return function (_v1) {
			var visited = _v1.aG;
			var unvisited = _v1.at;
			var params = _v1.aC;
			var frag = _v1.ax;
			var value = _v1.gz;
			return A2(
				$elm$core$List$map,
				$elm$url$Url$Parser$mapState(value),
				parseArg(
					A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
		};
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$url$Url$Parser$oneOf = function (parsers) {
	return function (state) {
		return A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var parser = _v0;
				return parser(state);
			},
			parsers);
	};
};
var $elm$url$Url$Parser$s = function (str) {
	return function (_v0) {
		var visited = _v0.aG;
		var unvisited = _v0.at;
		var params = _v0.aC;
		var frag = _v0.ax;
		var value = _v0.gz;
		if (!unvisited.b) {
			return _List_Nil;
		} else {
			var next = unvisited.a;
			var rest = unvisited.b;
			return _Utils_eq(next, str) ? _List_fromArray(
				[
					A5(
					$elm$url$Url$Parser$State,
					A2($elm$core$List$cons, next, visited),
					rest,
					params,
					frag,
					value)
				]) : _List_Nil;
		}
	};
};
var $elm$url$Url$Parser$slash = F2(
	function (_v0, _v1) {
		var parseBefore = _v0;
		var parseAfter = _v1;
		return function (state) {
			return A2(
				$elm$core$List$concatMap,
				parseAfter,
				parseBefore(state));
		};
	});
var $elm$url$Url$Parser$top = function (state) {
	return _List_fromArray(
		[state]);
};
var $author$project$Route$myParser = function (state) {
	return $elm$url$Url$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$url$Url$Parser$map,
				$author$project$Route$Home,
				A2($elm$url$Url$Parser$map, $author$project$Pages$Home$initModel, $elm$url$Url$Parser$top)),
				A2(
				$elm$url$Url$Parser$map,
				$author$project$Route$Home,
				A2(
					$elm$url$Url$Parser$map,
					$author$project$Pages$Home$initModel,
					$elm$url$Url$Parser$s('home'))),
				A2(
				$elm$url$Url$Parser$map,
				$author$project$Route$Info,
				A2(
					$elm$url$Url$Parser$map,
					$author$project$Pages$Info$initModel,
					$elm$url$Url$Parser$s('info'))),
				A2(
				$elm$url$Url$Parser$map,
				$author$project$Route$Level,
				A2(
					$elm$url$Url$Parser$map,
					$author$project$Pages$LevelPreview$initModel(state),
					$elm$url$Url$Parser$s('levels'))),
				A2(
				$elm$url$Url$Parser$map,
				$author$project$Route$Score,
				A2(
					$elm$url$Url$Parser$map,
					$author$project$Pages$ScoreBoard$initModel(state),
					$elm$url$Url$Parser$s('score'))),
				A2(
				$elm$url$Url$Parser$map,
				$author$project$Route$Guide,
				A2(
					$elm$url$Url$Parser$map,
					$author$project$Pages$Guide$initModel(state),
					$elm$url$Url$Parser$s('guide'))),
				A2(
				$elm$url$Url$Parser$map,
				$author$project$Route$Settings,
				A2(
					$elm$url$Url$Parser$map,
					$author$project$Pages$Settings$initModel(state),
					$elm$url$Url$Parser$s('settings'))),
				A2(
				$elm$url$Url$Parser$map,
				$author$project$Route$Game,
				A2(
					$elm$url$Url$Parser$map,
					$author$project$Pages$Game$initModel(state),
					A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('game'),
						$elm$url$Url$Parser$fragment($elm$core$Basics$identity))))
			]));
};
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.at;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.gz);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.gz);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 1) {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === -2) {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1) {
					case 0:
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 1:
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === -1) && (!left.a)) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === -1) && (right.a === 1)) {
					if (right.d.$ === -1) {
						if (right.d.a === 1) {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === -1) && (left.a === 1)) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === -1) && (!lLeft.a)) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === -1) {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === -1) {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === -1) {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (!_v0.$) {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 1) {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 1) {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 1) {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.bM),
					$elm$url$Url$Parser$prepareQuery(url.dE),
					url.e$,
					$elm$core$Basics$identity)));
	});
var $author$project$Route$parse_url = F2(
	function (state, url) {
		var newRoute = A2(
			$elm$core$Maybe$withDefault,
			$author$project$Route$NotFound,
			A2(
				$elm$url$Url$Parser$parse,
				$author$project$Route$myParser(state),
				url));
		if (newRoute.$ === 6) {
			var model = newRoute.a;
			return ((!model.fm.c6) || (_Utils_cmp(
				$author$project$User$get_unlocked_level(state.fE),
				model.fm.c6) < 0)) ? $author$project$Route$NotFound : newRoute;
		} else {
			return newRoute;
		}
	});
var $author$project$Main$load_state = F2(
	function (model, flags) {
		var player = function () {
			var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$User$decode_user, flags);
			if (!_v0.$) {
				var user = _v0.a;
				return user;
			} else {
				return $author$project$User$noUser;
			}
		}();
		var initState = {fE: player, fQ: $Zinggi$elm_game_resources$Game$Resources$init};
		var initRoute = A2($author$project$Route$parse_url, initState, model.bV);
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					C: A2($author$project$Main$Ready, initState, initRoute)
				}),
			A2(
				$elm$core$Platform$Cmd$map,
				$author$project$Main$LoadResources,
				$Zinggi$elm_game_resources$Game$Resources$loadTextures($author$project$SharedState$gameResources)));
	});
var $author$project$Main$init = F3(
	function (flags, url, key) {
		var newModel = {C: $author$project$Main$NotReady, ck: key, bV: url};
		return A2($author$project$Main$load_state, newModel, flags);
	});
var $author$project$Route$GameMsg = function (a) {
	return {$: 6, a: a};
};
var $author$project$Main$PageMsg = function (a) {
	return {$: 3, a: a};
};
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Pages$Game$Tick = function (a) {
	return {$: 10, a: a};
};
var $elm$browser$Browser$AnimationManager$Delta = function (a) {
	return {$: 1, a: a};
};
var $elm$browser$Browser$AnimationManager$State = F3(
	function (subs, request, oldTime) {
		return {cm: oldTime, dH: request, dL: subs};
	});
var $elm$browser$Browser$AnimationManager$init = $elm$core$Task$succeed(
	A3($elm$browser$Browser$AnimationManager$State, _List_Nil, $elm$core$Maybe$Nothing, 0));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$browser$Browser$AnimationManager$now = _Browser_now(0);
var $elm$browser$Browser$AnimationManager$rAF = _Browser_rAF(0);
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$browser$Browser$AnimationManager$onEffects = F3(
	function (router, subs, _v0) {
		var request = _v0.dH;
		var oldTime = _v0.cm;
		var _v1 = _Utils_Tuple2(request, subs);
		if (_v1.a.$ === 1) {
			if (!_v1.b.b) {
				var _v2 = _v1.a;
				return $elm$browser$Browser$AnimationManager$init;
			} else {
				var _v4 = _v1.a;
				return A2(
					$elm$core$Task$andThen,
					function (pid) {
						return A2(
							$elm$core$Task$andThen,
							function (time) {
								return $elm$core$Task$succeed(
									A3(
										$elm$browser$Browser$AnimationManager$State,
										subs,
										$elm$core$Maybe$Just(pid),
										time));
							},
							$elm$browser$Browser$AnimationManager$now);
					},
					$elm$core$Process$spawn(
						A2(
							$elm$core$Task$andThen,
							$elm$core$Platform$sendToSelf(router),
							$elm$browser$Browser$AnimationManager$rAF)));
			}
		} else {
			if (!_v1.b.b) {
				var pid = _v1.a.a;
				return A2(
					$elm$core$Task$andThen,
					function (_v3) {
						return $elm$browser$Browser$AnimationManager$init;
					},
					$elm$core$Process$kill(pid));
			} else {
				return $elm$core$Task$succeed(
					A3($elm$browser$Browser$AnimationManager$State, subs, request, oldTime));
			}
		}
	});
var $elm$time$Time$Posix = $elm$core$Basics$identity;
var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
var $elm$browser$Browser$AnimationManager$onSelfMsg = F3(
	function (router, newTime, _v0) {
		var subs = _v0.dL;
		var oldTime = _v0.cm;
		var send = function (sub) {
			if (!sub.$) {
				var tagger = sub.a;
				return A2(
					$elm$core$Platform$sendToApp,
					router,
					tagger(
						$elm$time$Time$millisToPosix(newTime)));
			} else {
				var tagger = sub.a;
				return A2(
					$elm$core$Platform$sendToApp,
					router,
					tagger(newTime - oldTime));
			}
		};
		return A2(
			$elm$core$Task$andThen,
			function (pid) {
				return A2(
					$elm$core$Task$andThen,
					function (_v1) {
						return $elm$core$Task$succeed(
							A3(
								$elm$browser$Browser$AnimationManager$State,
								subs,
								$elm$core$Maybe$Just(pid),
								newTime));
					},
					$elm$core$Task$sequence(
						A2($elm$core$List$map, send, subs)));
			},
			$elm$core$Process$spawn(
				A2(
					$elm$core$Task$andThen,
					$elm$core$Platform$sendToSelf(router),
					$elm$browser$Browser$AnimationManager$rAF)));
	});
var $elm$browser$Browser$AnimationManager$Time = function (a) {
	return {$: 0, a: a};
};
var $elm$browser$Browser$AnimationManager$subMap = F2(
	function (func, sub) {
		if (!sub.$) {
			var tagger = sub.a;
			return $elm$browser$Browser$AnimationManager$Time(
				A2($elm$core$Basics$composeL, func, tagger));
		} else {
			var tagger = sub.a;
			return $elm$browser$Browser$AnimationManager$Delta(
				A2($elm$core$Basics$composeL, func, tagger));
		}
	});
_Platform_effectManagers['Browser.AnimationManager'] = _Platform_createManager($elm$browser$Browser$AnimationManager$init, $elm$browser$Browser$AnimationManager$onEffects, $elm$browser$Browser$AnimationManager$onSelfMsg, 0, $elm$browser$Browser$AnimationManager$subMap);
var $elm$browser$Browser$AnimationManager$subscription = _Platform_leaf('Browser.AnimationManager');
var $elm$browser$Browser$AnimationManager$onAnimationFrameDelta = function (tagger) {
	return $elm$browser$Browser$AnimationManager$subscription(
		$elm$browser$Browser$AnimationManager$Delta(tagger));
};
var $elm$browser$Browser$Events$onAnimationFrameDelta = $elm$browser$Browser$AnimationManager$onAnimationFrameDelta;
var $author$project$Pages$Game$subscriptions = $elm$browser$Browser$Events$onAnimationFrameDelta(
	function (time) {
		return $author$project$Pages$Game$Tick(time);
	});
var $author$project$Main$subscriptions = function (model) {
	var _v0 = model.C;
	if (_v0.$ === 1) {
		var route = _v0.b;
		if (route.$ === 6) {
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$PageMsg,
				A2($elm$core$Platform$Sub$map, $author$project$Route$GameMsg, $author$project$Pages$Game$subscriptions));
		} else {
			return $elm$core$Platform$Sub$none;
		}
	} else {
		return $elm$core$Platform$Sub$none;
	}
};
var $author$project$SharedState$UpdateResource = function (a) {
	return {$: 2, a: a};
};
var $author$project$Route$delete_fragment = function (url) {
	return _Utils_update(
		url,
		{e$: $elm$core$Maybe$Nothing});
};
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Route$GuideMsg = function (a) {
	return {$: 4, a: a};
};
var $author$project$Route$HomeMsg = function (a) {
	return {$: 0, a: a};
};
var $author$project$Route$InfoMsg = function (a) {
	return {$: 1, a: a};
};
var $author$project$Route$LevelMsg = function (a) {
	return {$: 2, a: a};
};
var $author$project$SharedState$NoUpdate = {$: 0};
var $author$project$Route$ScoreMsg = function (a) {
	return {$: 3, a: a};
};
var $author$project$Route$SettingsMsg = function (a) {
	return {$: 5, a: a};
};
var $author$project$Game$Level$Buy = {$: 0};
var $author$project$Game$Level$CurrentTower = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Pages$Game$SelectAction = function (a) {
	return {$: 3, a: a};
};
var $author$project$SharedState$UpdateUser = function (a) {
	return {$: 1, a: a};
};
var $author$project$Game$Level$change_speed = F2(
	function (level, newspeed) {
		return _Utils_update(
			level,
			{Y: newspeed});
	});
var $author$project$Pages$Game$initialMessageTime = 5000;
var $author$project$Pages$Game$create_message = function (str) {
	return {ci: str, a9: $author$project$Pages$Game$initialMessageTime};
};
var $author$project$Pages$Game$decrease_message_time = F2(
	function (message, dt) {
		if (!message.$) {
			var m = message.a;
			var newTime = m.a9 - dt;
			return (newTime <= 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				_Utils_update(
					m,
					{a9: newTime}));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Game$Level$CurrentTile = function (a) {
	return {$: 0, a: a};
};
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Game$Playboard$get_tower = F2(
	function (board, pos) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				function (o) {
					return _Utils_eq(o.cn, pos);
				},
				board.bh));
	});
var $author$project$Game$Level$get_object = F2(
	function (board, pos) {
		var tower = A2($author$project$Game$Playboard$get_tower, board, pos);
		var tile = A2($elm$core$Dict$get, pos, board.cb);
		var _v0 = _Utils_Tuple2(tower, tile);
		if (_v0.a.$ === 1) {
			if (_v0.b.$ === 1) {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $author$project$Game$Level$NoObject;
			} else {
				var _v3 = _v0.a;
				var ti = _v0.b.a;
				return $author$project$Game$Level$CurrentTile(ti);
			}
		} else {
			var to = _v0.a.a;
			return A2($author$project$Game$Level$CurrentTower, to, false);
		}
	});
var $Zinggi$elm_2d_game$Game$TwoD$Camera$getPosition = function (_v0) {
	var position = _v0.bO;
	return position;
};
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $Zinggi$elm_2d_game$Game$TwoD$Camera$getViewSize = F2(
	function (_v0, _v1) {
		var w = _v0.a;
		var h = _v0.b;
		var size = _v1.bS;
		switch (size.$) {
			case 0:
				var x = size.a;
				return _Utils_Tuple2(x, (x * h) / w);
			case 1:
				var y = size.a;
				return _Utils_Tuple2((y * w) / h, y);
			case 2:
				var a = size.a;
				return _Utils_Tuple2(
					$elm$core$Basics$sqrt((a * w) / h),
					$elm$core$Basics$sqrt((a * h) / w));
			default:
				var fn = size.a;
				return fn(
					_Utils_Tuple2(w, h));
		}
	});
var $Zinggi$elm_2d_game$Game$TwoD$Camera$viewportToGameCoordinates = F3(
	function (camera, _v0, _v1) {
		var width = _v0.a;
		var height = _v0.b;
		var x = _v1.a;
		var y = _v1.b;
		var _v2 = _Utils_Tuple2(
			_Utils_Tuple2(0, width),
			_Utils_Tuple2(0, height));
		var _v3 = _v2.a;
		var screenLeft = _v3.a;
		var screenRight = _v3.b;
		var _v4 = _v2.b;
		var screenTop = _v4.a;
		var screenBottom = _v4.b;
		var _v5 = A2(
			$Zinggi$elm_2d_game$Game$TwoD$Camera$getViewSize,
			_Utils_Tuple2(width, height),
			camera);
		var gameWidth = _v5.a;
		var gameHeight = _v5.b;
		var _v6 = $Zinggi$elm_2d_game$Game$TwoD$Camera$getPosition(camera);
		var cameraXOffset = _v6.a;
		var cameraYOffset = _v6.b;
		var _v7 = _Utils_Tuple2(
			_Utils_Tuple2((-(gameWidth / 2)) + cameraXOffset, (gameWidth / 2) + cameraXOffset),
			_Utils_Tuple2((gameHeight / 2) + cameraYOffset, (-(gameHeight / 2)) + cameraYOffset));
		var _v8 = _v7.a;
		var viewLeft = _v8.a;
		var viewRight = _v8.b;
		var _v9 = _v7.b;
		var viewTop = _v9.a;
		var viewBottom = _v9.b;
		return _Utils_Tuple2(viewLeft + (((x - screenLeft) / (screenRight - screenLeft)) * (viewRight - viewLeft)), viewTop + (((y - screenTop) / (screenBottom - screenTop)) * (viewBottom - viewTop)));
	});
var $author$project$Game$Playboard$map_coordinates = F2(
	function (b, x_y) {
		var pos = A3($elm$core$Tuple$mapBoth, $elm$core$Basics$floor, $elm$core$Basics$floor, x_y);
		var index = A3(
			$Zinggi$elm_2d_game$Game$TwoD$Camera$viewportToGameCoordinates,
			b.a_,
			_Utils_Tuple2(
				$author$project$Game$Playboard$get_col(b) * b.aV,
				$author$project$Game$Playboard$get_row(b) * b.aV),
			pos);
		var newpos = A3($elm$core$Tuple$mapBoth, $elm$core$Basics$floor, $elm$core$Basics$floor, index);
		return A3($elm$core$Tuple$mapBoth, $elm$core$Basics$toFloat, $elm$core$Basics$toFloat, newpos);
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$core$Basics$not = _Basics_not;
var $author$project$Game$Level$Paused = 1;
var $author$project$Game$Level$pause_level = function (level) {
	var _v0 = level.S;
	if (!_v0) {
		return _Utils_update(
			level,
			{S: 1});
	} else {
		return level;
	}
};
var $author$project$Game$Tiles$get_tile_clear_cost = function (tile) {
	var _v0 = tile.O;
	if (_v0.$ === 1) {
		var obs = _v0.a;
		if (!obs.$) {
			var o = obs.a;
			return o.bn;
		} else {
			return 0;
		}
	} else {
		return 0;
	}
};
var $author$project$Game$Tiles$has_obstacle = function (tile) {
	var _v0 = tile.O;
	if (_v0.$ === 1) {
		var obs = _v0.a;
		if (obs.$ === 1) {
			return false;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
var $author$project$Game$Playboard$tile_is_clear = F2(
	function (board, pos) {
		var tower = A2($author$project$Game$Playboard$get_tower, board, pos);
		var tile = A2($elm$core$Dict$get, pos, board.cb);
		if (!tile.$) {
			var t = tile.a;
			var _v1 = t.O;
			if (_v1.$ === 1) {
				if ($author$project$Game$Tiles$has_obstacle(t)) {
					return false;
				} else {
					if (tower.$ === 1) {
						return true;
					} else {
						return false;
					}
				}
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $author$project$Game$Playboard$tower_is_placed = F2(
	function (board, tower) {
		if (!tower.fm) {
			return false;
		} else {
			var _v0 = A2($author$project$Game$Playboard$get_tower, board, tower.cn);
			if (_v0.$ === 1) {
				return false;
			} else {
				return true;
			}
		}
	});
var $author$project$Game$Playboard$update_tower = F2(
	function (board, tower) {
		var foundTowers = A2(
			$elm$core$List$filter,
			function (o) {
				return !_Utils_eq(o.cn, tower.cn);
			},
			board.bh);
		return _Utils_update(
			board,
			{
				bh: A2($elm$core$List$cons, tower, foundTowers)
			});
	});
var $author$project$Game$Level$perform_action = F3(
	function (act, level, obj) {
		var oldMap = level.i;
		switch (act.$) {
			case 0:
				if (obj.$ === 1) {
					var t = obj.a;
					var towerPrice = A2($author$project$Game$Towers$get_tower_price, t, 2);
					if (_Utils_cmp(towerPrice, level.o) > 0) {
						return _Utils_Tuple3(
							level,
							obj,
							$elm$core$Maybe$Just('Not enought money!'));
					} else {
						if (!A2($author$project$Game$Playboard$tile_is_clear, level.i, t.cn)) {
							return _Utils_Tuple3(
								level,
								obj,
								$elm$core$Maybe$Just('Wrong space!'));
						} else {
							var newTower = A3($author$project$Game$Towers$increase_level, t, 2, level.b1);
							var updateMap = _Utils_update(
								oldMap,
								{
									bh: A2($elm$core$List$cons, newTower, oldMap.bh)
								});
							var updateObj = A2($author$project$Game$Level$CurrentTower, newTower, false);
							return _Utils_Tuple3(
								_Utils_update(
									level,
									{i: updateMap, o: level.o - towerPrice}),
								updateObj,
								$elm$core$Maybe$Nothing);
						}
					}
				} else {
					return _Utils_Tuple3(
						level,
						obj,
						$elm$core$Maybe$Just('Error: Wrong object selected!'));
				}
			case 1:
				if (obj.$ === 1) {
					var t = obj.a;
					if (!A2($author$project$Game$Playboard$tower_is_placed, level.i, t)) {
						return _Utils_Tuple3(
							level,
							obj,
							$elm$core$Maybe$Just('Error: Tower NOT found!'));
					} else {
						var updateObj = $author$project$Game$Level$NoObject;
						var updateMap = _Utils_update(
							oldMap,
							{
								bh: A2(
									$elm$core$List$filter,
									function (o) {
										return !_Utils_eq(o.cn, t.cn);
									},
									oldMap.bh)
							});
						return _Utils_Tuple3(
							_Utils_update(
								level,
								{i: updateMap, o: level.o + t.fZ}),
							updateObj,
							$elm$core$Maybe$Nothing);
					}
				} else {
					return _Utils_Tuple3(
						level,
						obj,
						$elm$core$Maybe$Just('Error: Wrong object selected!'));
				}
			case 3:
				if (!obj.$) {
					var t = obj.a;
					var clearCost = $author$project$Game$Tiles$get_tile_clear_cost(t);
					if (_Utils_cmp(clearCost, level.o) > 0) {
						return _Utils_Tuple3(
							level,
							obj,
							$elm$core$Maybe$Just('Not enought money!'));
					} else {
						if (!$author$project$Game$Tiles$has_obstacle(t)) {
							return _Utils_Tuple3(
								level,
								obj,
								$elm$core$Maybe$Just('Error: Tile is clear!'));
						} else {
							var newTile = _Utils_update(
								t,
								{
									O: $author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing)
								});
							var updateMap = _Utils_update(
								oldMap,
								{
									cb: A3(
										$elm$core$Dict$update,
										t.cn,
										function (_v4) {
											return $elm$core$Maybe$Just(newTile);
										},
										oldMap.cb)
								});
							var updateObj = $author$project$Game$Level$CurrentTile(newTile);
							return _Utils_Tuple3(
								_Utils_update(
									level,
									{i: updateMap, o: level.o - clearCost}),
								updateObj,
								$elm$core$Maybe$Nothing);
						}
					}
				} else {
					return _Utils_Tuple3(
						level,
						obj,
						$elm$core$Maybe$Just('Error: Wrong object selected!'));
				}
			case 2:
				var path = act.a;
				if (obj.$ === 1) {
					var t = obj.a;
					var show = obj.b;
					var towerPrice = A2($author$project$Game$Towers$get_tower_price, t, path);
					if (_Utils_cmp(towerPrice, level.o) > 0) {
						return _Utils_Tuple3(
							level,
							obj,
							$elm$core$Maybe$Just('Not enought money!'));
					} else {
						if (!A2($author$project$Game$Playboard$tower_is_placed, level.i, t)) {
							return _Utils_Tuple3(
								level,
								obj,
								$elm$core$Maybe$Just('Error: Tower NOT found!'));
						} else {
							var updateObj = A2($author$project$Game$Level$CurrentTower, t, show);
							var updateMap = A2($author$project$Game$Playboard$update_tower, oldMap, t);
							return _Utils_Tuple3(
								_Utils_update(
									level,
									{i: updateMap, o: level.o - towerPrice}),
								updateObj,
								$elm$core$Maybe$Nothing);
						}
					}
				} else {
					return _Utils_Tuple3(
						level,
						obj,
						$elm$core$Maybe$Just('Error: Wrong object selected!'));
				}
			case 4:
				var target = act.a;
				if (obj.$ === 1) {
					var t = obj.a;
					if (!A2($author$project$Game$Playboard$tower_is_placed, level.i, t)) {
						return _Utils_Tuple3(
							level,
							obj,
							$elm$core$Maybe$Just('Error: Tower NOT found!'));
					} else {
						var oldTower = A2(
							$elm$core$Maybe$withDefault,
							t,
							A2($author$project$Game$Playboard$get_tower, oldMap, t.cn));
						var newTower = _Utils_update(
							oldTower,
							{gc: target});
						var updateMap = A2($author$project$Game$Playboard$update_tower, oldMap, newTower);
						var updateObj = A2($author$project$Game$Level$CurrentTower, newTower, false);
						return _Utils_Tuple3(
							_Utils_update(
								level,
								{i: updateMap}),
							updateObj,
							$elm$core$Maybe$Nothing);
					}
				} else {
					return _Utils_Tuple3(
						level,
						obj,
						$elm$core$Maybe$Just('Error: Wrong object selected!'));
				}
			default:
				return _Utils_Tuple3(
					level,
					obj,
					$elm$core$Maybe$Just('Error: Action NOT selected!'));
		}
	});
var $author$project$User$compare_score = F2(
	function (oldScore, newScore) {
		var orderTime = A2($elm$core$Basics$compare, oldScore.aH, newScore.aH);
		var orderLives = A2($elm$core$Basics$compare, oldScore.aq, newScore.aq);
		var score = function () {
			switch (orderLives) {
				case 2:
					return oldScore;
				case 0:
					return newScore;
				default:
					if (!orderTime) {
						return oldScore;
					} else {
						return newScore;
					}
			}
		}();
		return score;
	});
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (!_v0.$) {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $author$project$User$save_level_score = F4(
	function (user, lvlNumber, lives, time) {
		var newScore = A2($author$project$User$Score, lives, time);
		var index = lvlNumber - 1;
		var oldScore = A2($elm$core$Array$get, index, user.bE);
		var score = function () {
			if (oldScore.$ === 1) {
				return A2($elm$core$Array$push, newScore, user.bE);
			} else {
				var old = oldScore.a;
				return A3(
					$elm$core$Array$set,
					index,
					A2($author$project$User$compare_score, old, newScore),
					user.bE);
			}
		}();
		return _Utils_update(
			user,
			{bE: score});
	});
var $author$project$Game$Level$Lost = 3;
var $author$project$Game$Level$get_unbeaten_enemy_count = function (level) {
	var enemiesOnMap = $elm$core$List$length(level.i.ea);
	var enemiesInWave = function () {
		var _v0 = level.ad;
		if (_v0.$ === 1) {
			return 0;
		} else {
			var w = _v0.a;
			return $elm$core$List$length(w.cP);
		}
	}();
	return enemiesOnMap + enemiesInWave;
};
var $author$project$Game$Level$Won = 2;
var $author$project$Game$Towers$set_cooldown = F2(
	function (tower, dt) {
		var newTime = (tower.cf > 0) ? (tower.cf - dt) : tower.cf;
		var newTexture = function () {
			var _v0 = tower.O;
			if (_v0.$ === 2) {
				var ready = _Utils_cmp(newTime, tower.eZ * 0.2) < 1;
				var _v1 = $author$project$Game$Towers$get_upgrade_type(tower);
				switch (_v1) {
					case 2:
						return ready ? '/assets/towers/rocketlauncher.png' : '/assets/towers/rocketlauncher-e.png';
					case 0:
						return ready ? '/assets/towers/rocketlauncher-1.png' : '/assets/towers/rocketlauncher-1e.png';
					default:
						return ready ? '/assets/towers/rocketlauncher-2.png' : ((tower.B > 0) ? '/assets/towers/rocketlauncher-2el.png' : '/assets/towers/rocketlauncher-2er.png');
				}
			} else {
				return tower.x;
			}
		}();
		return _Utils_update(
			tower,
			{cf: newTime, x: newTexture});
	});
var $author$project$Game$Playboard$clear_board = function (board) {
	var newTowers = A2(
		$elm$core$List$map,
		function (o) {
			return A2(
				$author$project$Game$Towers$set_cooldown,
				_Utils_update(
					o,
					{cf: 0, c: 0}),
				0);
		},
		board.bh);
	return _Utils_update(
		board,
		{al: _List_Nil, bh: newTowers});
};
var $author$project$Game$Level$increase_wave = function (level) {
	var reward = function () {
		var _v2 = level.ad;
		if (!_v2.$) {
			var w = _v2.a;
			return w.M;
		} else {
			return 0;
		}
	}();
	var newWave = function () {
		var _v1 = level.ad;
		if (!_v1.$) {
			var w = _v1.a;
			return A2($elm$core$Array$get, w.dV, level.cw);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}();
	var lvlState = function () {
		if (newWave.$ === 1) {
			return 2;
		} else {
			return level.S;
		}
	}();
	return _Utils_update(
		level,
		{
			ad: newWave,
			i: $author$project$Game$Playboard$clear_board(level.i),
			S: lvlState,
			o: level.o + reward,
			Y: 0
		});
};
var $author$project$Game$Towers$can_rotate = function (tower) {
	var _v0 = tower.O;
	if (!_v0.$) {
		return (_Utils_cmp(tower.eZ - tower.cf, tower.fL) < 1) ? false : true;
	} else {
		return true;
	}
};
var $elm$core$Basics$pow = _Basics_pow;
var $author$project$Game$Calculations$distance_of_2points = F2(
	function (_v0, _v1) {
		var x1 = _v0.a;
		var y1 = _v0.b;
		var x2 = _v1.a;
		var y2 = _v1.b;
		var distanceY = A2($elm$core$Basics$pow, y2 - y1, 2);
		var distanceX = A2($elm$core$Basics$pow, x2 - x1, 2);
		return $elm$core$Basics$sqrt(distanceX + distanceY);
	});
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $author$project$Game$Enemies$closest_enemies = F2(
	function (enemies, point) {
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (o, _v1) {
					var elist = _v1.a;
					var min = _v1.b;
					var dist = A2($author$project$Game$Calculations$distance_of_2points, o.cn, point);
					if (min.$ === 1) {
						return _Utils_Tuple2(
							A2($elm$core$List$cons, o, elist),
							$elm$core$Maybe$Just(dist));
					} else {
						var m = min.a;
						return (_Utils_cmp(m, dist) < 0) ? _Utils_Tuple2(elist, min) : (_Utils_eq(m, dist) ? _Utils_Tuple2(
							A2($elm$core$List$cons, o, elist),
							min) : _Utils_Tuple2(
							$elm$core$List$singleton(o),
							$elm$core$Maybe$Just(dist)));
					}
				}),
			_Utils_Tuple2(_List_Nil, $elm$core$Maybe$Nothing),
			enemies);
		var foundEnemies = _v0.a;
		var minDisatnce = _v0.b;
		return foundEnemies;
	});
var $author$project$Game$Enemies$enemy_in_range = F3(
	function (enemy, _v0, range) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_cmp(
			A2(
				$author$project$Game$Calculations$distance_of_2points,
				enemy.cn,
				_Utils_Tuple2(x, y)),
			range) < 1;
	});
var $author$project$Game$Calculations$compare_distances = F2(
	function (dist1, dist2) {
		if (dist1.$ === 1) {
			if (dist2.$ === 1) {
				return 1;
			} else {
				return 2;
			}
		} else {
			var d1 = dist1.a;
			if (dist2.$ === 1) {
				return 0;
			} else {
				var d2 = dist2.a;
				return A2($elm$core$Basics$compare, d1, d2);
			}
		}
	});
var $author$project$Game$Enemies$furthest_enemies = function (enemies) {
	var _v0 = A3(
		$elm$core$List$foldl,
		F2(
			function (o, _v1) {
				var elist = _v1.a;
				var max = _v1.b;
				var min = _v1.c;
				var nextPoint = o.l.b;
				var currentPointIndex = o.l.a;
				if (max.$ === 1) {
					var newDistance = function () {
						if (!nextPoint.$) {
							var p = nextPoint.a;
							return $elm$core$Maybe$Just(
								A2($author$project$Game$Calculations$distance_of_2points, o.cn, p));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					return _Utils_Tuple3(
						A2($elm$core$List$cons, o, elist),
						$elm$core$Maybe$Just(currentPointIndex),
						newDistance);
				} else {
					var m = max.a;
					if (_Utils_cmp(m, currentPointIndex) > 0) {
						return _Utils_Tuple3(elist, max, min);
					} else {
						if (_Utils_cmp(m, currentPointIndex) < 0) {
							var newDistance = function () {
								if (!nextPoint.$) {
									var p = nextPoint.a;
									return $elm$core$Maybe$Just(
										A2($author$project$Game$Calculations$distance_of_2points, o.cn, p));
								} else {
									return $elm$core$Maybe$Nothing;
								}
							}();
							return _Utils_Tuple3(
								$elm$core$List$singleton(o),
								$elm$core$Maybe$Just(currentPointIndex),
								newDistance);
						} else {
							var newDistance = function () {
								if (!nextPoint.$) {
									var p = nextPoint.a;
									return $elm$core$Maybe$Just(
										A2($author$project$Game$Calculations$distance_of_2points, o.cn, p));
								} else {
									return $elm$core$Maybe$Nothing;
								}
							}();
							var ord = A2($author$project$Game$Calculations$compare_distances, min, newDistance);
							switch (ord) {
								case 1:
									return _Utils_Tuple3(
										A2($elm$core$List$cons, o, elist),
										max,
										min);
								case 0:
									return _Utils_Tuple3(elist, max, min);
								default:
									return _Utils_Tuple3(
										$elm$core$List$singleton(o),
										$elm$core$Maybe$Just(currentPointIndex),
										newDistance);
							}
						}
					}
				}
			}),
		_Utils_Tuple3(_List_Nil, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		enemies);
	var sortedEnemies = _v0.a;
	var maxPointIndex = _v0.b;
	var minDisatnce = _v0.c;
	return sortedEnemies;
};
var $author$project$Game$Enemies$first_enemy = F2(
	function (flying, enemies) {
		var groundEnemies = $author$project$Game$Enemies$furthest_enemies(
			A2(
				$elm$core$List$filter,
				function (o) {
					return !o.A;
				},
				enemies));
		var flyingEnemies = $author$project$Game$Enemies$furthest_enemies(
			A2(
				$elm$core$List$filter,
				function (o) {
					return o.A === 1;
				},
				enemies));
		return flying ? $elm$core$List$head(
			_Utils_ap(flyingEnemies, groundEnemies)) : $elm$core$List$head(
			_Utils_ap(groundEnemies, flyingEnemies));
	});
var $elm$core$Basics$atan2 = _Basics_atan2;
var $author$project$Game$Calculations$rotation_of_2points = F2(
	function (_v0, _v1) {
		var x1 = _v0.a;
		var y1 = _v0.b;
		var x2 = _v1.a;
		var y2 = _v1.b;
		var newY = y2 - y1;
		var newX = x2 - x1;
		return A2($elm$core$Basics$atan2, newX, newY);
	});
var $author$project$Game$Towers$change_offset = function (tower) {
	var newOffset = -tower.B;
	return _Utils_update(
		tower,
		{B: newOffset});
};
var $author$project$Game$Projectiles$Bullet = function (a) {
	return {$: 0, a: a};
};
var $author$project$Game$Projectiles$Cannonball = {$: 1};
var $author$project$Game$Projectiles$Explosive = 1;
var $author$project$Game$Projectiles$Impactful = 2;
var $author$project$Game$Projectiles$Missile = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Game$Projectiles$Projectile = function (_class) {
	return function (texture) {
		return function (layer) {
			return function (posXY) {
				return function (rotation) {
					return function (hitbox) {
						return function (speed) {
							return function (lifespan) {
								return function (damage) {
									return function (armorIgnore) {
										return function (pierce) {
											return {bi: armorIgnore, O: _class, bt: damage, w: hitbox, r: layer, R: lifespan, a5: pierce, cn: posXY, c: rotation, Y: speed, v: texture};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Game$Projectiles$Regular = 0;
var $author$project$Game$Towers$get_projectile_distance = F2(
	function (tower, upgradePath) {
		var _v0 = tower.O;
		switch (_v0.$) {
			case 0:
				switch (upgradePath) {
					case 2:
						return 0.74;
					case 0:
						return 1;
					default:
						return 0.9;
				}
			case 1:
				switch (upgradePath) {
					case 2:
						return 0.68;
					case 0:
						return 0.85;
					default:
						return 0.8;
				}
			default:
				switch (upgradePath) {
					case 2:
						return 0.12;
					case 0:
						return 0.18;
					default:
						return 0.44;
				}
		}
	});
var $author$project$Game$Towers$get_projectile_hitbox = F2(
	function (tower, upgradePath) {
		var _v0 = tower.O;
		switch (_v0.$) {
			case 0:
				switch (upgradePath) {
					case 2:
						return _Utils_Tuple2(0.1, 0.35);
					case 0:
						return _Utils_Tuple2(0.2, 0.55);
					default:
						return _Utils_Tuple2(0.28, 0.45);
				}
			case 1:
				switch (upgradePath) {
					case 2:
						return _Utils_Tuple2(0.25, 0.25);
					case 0:
						return _Utils_Tuple2(0.28, 0.28);
					default:
						return _Utils_Tuple2(0.19, 0.19);
				}
			default:
				switch (upgradePath) {
					case 2:
						return _Utils_Tuple2(0.22, 0.52);
					case 0:
						return _Utils_Tuple2(0.3, 0.56);
					default:
						return _Utils_Tuple2(0.24, 0.54);
				}
		}
	});
var $author$project$Game$Towers$get_projectile_texture = F2(
	function (tower, upgradePath) {
		var _v0 = tower.O;
		switch (_v0.$) {
			case 0:
				switch (upgradePath) {
					case 2:
						return '/assets/projectiles/bullet.png';
					case 0:
						return '/assets/projectiles/bullet-tall.png';
					default:
						return '/assets/projectiles/bullet-wide.png';
				}
			case 1:
				switch (upgradePath) {
					case 2:
						return '/assets/projectiles/cannonball.png';
					case 0:
						return '/assets/projectiles/cannonball-black.png';
					default:
						return '/assets/projectiles/cannonball-white.png';
				}
			default:
				switch (upgradePath) {
					case 2:
						return '/assets/projectiles/missile.png';
					case 0:
						return '/assets/projectiles/missile-big.png';
					default:
						return '/assets/projectiles/missile.png';
				}
		}
	});
var $author$project$Game$Towers$get_tower_center = function (tower) {
	var offsetY = $elm$core$Basics$cos(tower.c + ($elm$core$Basics$pi / 2)) * tower.B;
	var offsetX = $elm$core$Basics$sin(tower.c + ($elm$core$Basics$pi / 2)) * tower.B;
	var centerY = tower.cn.b + 0.5;
	var centerX = tower.cn.a + 0.5;
	return _Utils_Tuple2(centerX + offsetX, centerY + offsetY);
};
var $author$project$Game$Playboard$tower_to_projectile = F2(
	function (tower, enemyIndex) {
		var towerUpgrade = $author$project$Game$Towers$get_upgrade_type(tower);
		var texture = A2($author$project$Game$Towers$get_projectile_texture, tower, towerUpgrade);
		var speed = tower.fN;
		var rotation = tower.c;
		var pierce = tower.fM;
		var lifespan = tower.fL;
		var hitbox = A2($author$project$Game$Towers$get_projectile_hitbox, tower, towerUpgrade);
		var distance = A2($author$project$Game$Towers$get_projectile_distance, tower, towerUpgrade);
		var damage = tower.fK;
		var _class = function () {
			var _v1 = tower.O;
			switch (_v1.$) {
				case 0:
					return $author$project$Game$Projectiles$Bullet(enemyIndex);
				case 1:
					return $author$project$Game$Projectiles$Cannonball;
				default:
					var size = _v1.a;
					var _v2 = $author$project$Game$Towers$get_upgrade_type(tower);
					switch (_v2) {
						case 2:
							return A2($author$project$Game$Projectiles$Missile, 0, size);
						case 0:
							return A2($author$project$Game$Projectiles$Missile, 1, size);
						default:
							return A2($author$project$Game$Projectiles$Missile, 2, size);
					}
			}
		}();
		var armorIgnore = tower.fJ;
		var _v0 = $author$project$Game$Towers$get_tower_center(tower);
		var centerX = _v0.a;
		var centerY = _v0.b;
		var spawnX = centerX + ($elm$core$Basics$sin(tower.c) * distance);
		var spawnY = centerY + ($elm$core$Basics$cos(tower.c) * distance);
		return $author$project$Game$Projectiles$Projectile(_class)(texture)(0)(
			_Utils_Tuple2(spawnX, spawnY))(rotation)(hitbox)(speed)(lifespan)(damage)(armorIgnore)(pierce);
	});
var $author$project$Game$Playboard$shoot_projectile = F2(
	function (tower, enemyIndex) {
		if (tower.cf <= 0) {
			var newTower = $author$project$Game$Towers$change_offset(tower);
			var newProjectile = A2($author$project$Game$Playboard$tower_to_projectile, tower, enemyIndex);
			return _Utils_Tuple2(
				_Utils_update(
					newTower,
					{cf: tower.eZ}),
				$elm$core$Maybe$Just(newProjectile));
		} else {
			return _Utils_Tuple2(tower, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$Game$Enemies$strongest_enemies = function (enemies) {
	var _v0 = A3(
		$elm$core$List$foldl,
		F2(
			function (o, _v1) {
				var elist = _v1.a;
				var max = _v1.b;
				if (max.$ === 1) {
					return _Utils_Tuple2(
						A2($elm$core$List$cons, o, elist),
						$elm$core$Maybe$Just(o.h));
				} else {
					var m = max.a;
					return (_Utils_cmp(m, o.h) > 0) ? _Utils_Tuple2(elist, max) : (_Utils_eq(m, o.h) ? _Utils_Tuple2(
						A2($elm$core$List$cons, o, elist),
						max) : _Utils_Tuple2(
						$elm$core$List$singleton(o),
						$elm$core$Maybe$Just(o.h)));
				}
			}),
		_Utils_Tuple2(_List_Nil, $elm$core$Maybe$Nothing),
		enemies);
	var foundEnemies = _v0.a;
	var maxHealth = _v0.b;
	return foundEnemies;
};
var $author$project$Game$Enemies$weakest_enemies = function (enemies) {
	var _v0 = A3(
		$elm$core$List$foldl,
		F2(
			function (o, _v1) {
				var elist = _v1.a;
				var min = _v1.b;
				if (min.$ === 1) {
					return _Utils_Tuple2(
						A2($elm$core$List$cons, o, elist),
						$elm$core$Maybe$Just(o.h));
				} else {
					var m = min.a;
					return (_Utils_cmp(m, o.h) < 0) ? _Utils_Tuple2(elist, min) : (_Utils_eq(m, o.h) ? _Utils_Tuple2(
						A2($elm$core$List$cons, o, elist),
						min) : _Utils_Tuple2(
						$elm$core$List$singleton(o),
						$elm$core$Maybe$Just(o.h)));
				}
			}),
		_Utils_Tuple2(_List_Nil, $elm$core$Maybe$Nothing),
		enemies);
	var foundEnemies = _v0.a;
	var minHealth = _v0.b;
	return foundEnemies;
};
var $author$project$Game$Playboard$aim_tower = F3(
	function (tower, enemies, dt) {
		var newTower = A2($author$project$Game$Towers$set_cooldown, tower, dt);
		var _v0 = _Utils_Tuple2(tower.cn.a + 0.5, tower.cn.b + 0.5);
		var centerX = _v0.a;
		var centerY = _v0.b;
		var enemyList = A2(
			$elm$core$List$filter,
			function (o) {
				return A3(
					$author$project$Game$Enemies$enemy_in_range,
					o,
					_Utils_Tuple2(centerX, centerY),
					tower.fP);
			},
			enemies);
		var newTarget = function () {
			var _v2 = tower.gc;
			switch (_v2) {
				case 0:
					return A2($author$project$Game$Enemies$first_enemy, false, enemyList);
				case 1:
					return A2(
						$author$project$Game$Enemies$first_enemy,
						false,
						$author$project$Game$Enemies$strongest_enemies(enemyList));
				case 2:
					return A2(
						$author$project$Game$Enemies$first_enemy,
						false,
						$author$project$Game$Enemies$weakest_enemies(enemyList));
				case 3:
					return A2(
						$author$project$Game$Enemies$first_enemy,
						false,
						A2(
							$author$project$Game$Enemies$closest_enemies,
							enemyList,
							_Utils_Tuple2(centerX, centerY)));
				default:
					return A2($author$project$Game$Enemies$first_enemy, true, enemyList);
			}
		}();
		if (newTarget.$ === 1) {
			return _Utils_Tuple2(newTower, $elm$core$Maybe$Nothing);
		} else {
			var e = newTarget.a;
			var newRotation = $author$project$Game$Towers$can_rotate(tower) ? A2(
				$author$project$Game$Calculations$rotation_of_2points,
				_Utils_Tuple2(centerX, centerY),
				e.cn) : tower.c;
			return A2(
				$author$project$Game$Playboard$shoot_projectile,
				_Utils_update(
					newTower,
					{c: newRotation}),
				e.r);
		}
	});
var $author$project$Game$Projectiles$can_collide = function (projectile) {
	var _v0 = projectile.O;
	switch (_v0.$) {
		case 1:
			return projectile.R >= 0;
		case 2:
			return projectile.R >= 0;
		case 3:
			var stage = _v0.b;
			return (stage === 3) ? true : false;
		default:
			return (projectile.R <= 0) ? true : false;
	}
};
var $author$project$Game$Calculations$Line = F4(
	function (centerX, centerY, directionX, directionY) {
		return {bl: centerX, bm: centerY, bv: directionX, bw: directionY};
	});
var $author$project$Game$Calculations$create_2axis = F2(
	function (_v0, rot) {
		var centerX = _v0.a;
		var centerY = _v0.b;
		var sinValue = $elm$core$Basics$sin(rot);
		var cosValue = $elm$core$Basics$cos(rot);
		var axisY = A4($author$project$Game$Calculations$Line, centerX, centerY, sinValue, cosValue);
		var axisX = A4($author$project$Game$Calculations$Line, centerX, centerY, cosValue, -sinValue);
		return _Utils_Tuple2(axisX, axisY);
	});
var $author$project$Game$Calculations$distance_from_center = F2(
	function (axis, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		var _v1 = _Utils_Tuple2(x - axis.bl, y - axis.bm);
		var lenghtX = _v1.a;
		var lenghtY = _v1.b;
		var mult = (((lenghtX * axis.bv) + (lenghtY * axis.bw)) > 0) ? 1 : (-1);
		return $elm$core$Basics$sqrt((lenghtX * lenghtX) + (lenghtY * lenghtY)) * mult;
	});
var $author$project$Game$Calculations$project_point = F2(
	function (axis, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		var dot = (axis.bv * (x - axis.bl)) + (axis.bw * (y - axis.bm));
		var newX = axis.bl + (axis.bv * dot);
		var newY = axis.bm + (axis.bw * dot);
		return _Utils_Tuple2(newX, newY);
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Game$Calculations$projection_colliding = F2(
	function (halfSize, distances) {
		var distMin = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$minimum(distances));
		var distMax = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$maximum(distances));
		return ((distMin < 0) && (distMax > 0)) || ((_Utils_cmp(
			$elm$core$Basics$abs(distMin),
			halfSize) < 0) || (_Utils_cmp(
			$elm$core$Basics$abs(distMax),
			halfSize) < 0));
	});
var $author$project$Game$Calculations$rectangle_corners = F3(
	function (_v0, _v1, rot) {
		var centerX = _v0.a;
		var centerY = _v0.b;
		var w = _v1.a;
		var h = _v1.b;
		var sinW = $elm$core$Basics$sin(rot) * (w / 2);
		var sinH = $elm$core$Basics$sin(rot) * (h / 2);
		var cosW = $elm$core$Basics$cos(rot) * (w / 2);
		var cosH = $elm$core$Basics$cos(rot) * (h / 2);
		var corner4 = _Utils_Tuple2((centerX - cosW) + sinH, (centerY + sinW) + cosH);
		var corner3 = _Utils_Tuple2((centerX - cosW) - sinH, (centerY + sinW) - cosH);
		var corner2 = _Utils_Tuple2((centerX + cosW) - sinH, (centerY - sinW) - cosH);
		var corner1 = _Utils_Tuple2((centerX + cosW) + sinH, (centerY - sinW) + cosH);
		return _List_fromArray(
			[corner1, corner2, corner3, corner4]);
	});
var $author$project$Game$Calculations$collision_2rectangles = F6(
	function (_v0, _v1, rot1, _v2, _v3, rot2) {
		var x1 = _v0.a;
		var y1 = _v0.b;
		var w1 = _v1.a;
		var h1 = _v1.b;
		var x2 = _v2.a;
		var y2 = _v2.b;
		var w2 = _v3.a;
		var h2 = _v3.b;
		var corners2 = A3(
			$author$project$Game$Calculations$rectangle_corners,
			_Utils_Tuple2(x2, y2),
			_Utils_Tuple2(w2, h2),
			rot2);
		var corners1 = A3(
			$author$project$Game$Calculations$rectangle_corners,
			_Utils_Tuple2(x1, y1),
			_Utils_Tuple2(w1, h1),
			rot1);
		var _v4 = A2(
			$author$project$Game$Calculations$create_2axis,
			_Utils_Tuple2(x2, y2),
			rot2);
		var axis2X = _v4.a;
		var axis2Y = _v4.b;
		var hit1X = A2(
			$author$project$Game$Calculations$projection_colliding,
			w2 / 2,
			A2(
				$elm$core$List$map,
				function (o) {
					return A2($author$project$Game$Calculations$distance_from_center, axis2X, o);
				},
				A2(
					$elm$core$List$map,
					function (o) {
						return A2($author$project$Game$Calculations$project_point, axis2X, o);
					},
					corners1)));
		var hit1Y = hit1X ? A2(
			$author$project$Game$Calculations$projection_colliding,
			h2 / 2,
			A2(
				$elm$core$List$map,
				function (o) {
					return A2($author$project$Game$Calculations$distance_from_center, axis2Y, o);
				},
				A2(
					$elm$core$List$map,
					function (o) {
						return A2($author$project$Game$Calculations$project_point, axis2Y, o);
					},
					corners1))) : false;
		var _v5 = A2(
			$author$project$Game$Calculations$create_2axis,
			_Utils_Tuple2(x1, y1),
			rot1);
		var axis1X = _v5.a;
		var axis1Y = _v5.b;
		var hit2X = hit1Y ? A2(
			$author$project$Game$Calculations$projection_colliding,
			w1 / 2,
			A2(
				$elm$core$List$map,
				function (o) {
					return A2($author$project$Game$Calculations$distance_from_center, axis1X, o);
				},
				A2(
					$elm$core$List$map,
					function (o) {
						return A2($author$project$Game$Calculations$project_point, axis1X, o);
					},
					corners2))) : false;
		var hit2Y = hit2X ? A2(
			$author$project$Game$Calculations$projection_colliding,
			h1 / 2,
			A2(
				$elm$core$List$map,
				function (o) {
					return A2($author$project$Game$Calculations$distance_from_center, axis1Y, o);
				},
				A2(
					$elm$core$List$map,
					function (o) {
						return A2($author$project$Game$Calculations$project_point, axis1Y, o);
					},
					corners2))) : false;
		return hit1X && (hit1Y && (hit2X && hit2Y));
	});
var $author$project$Game$Calculations$rotate_point = F3(
	function (_v0, _v1, rot) {
		var x = _v0.a;
		var y = _v0.b;
		var centerX = _v1.a;
		var centerY = _v1.b;
		var sinValue = $elm$core$Basics$sin(rot);
		var cosValue = $elm$core$Basics$cos(rot);
		var newX = (centerX + (cosValue * (x - centerX))) + (sinValue * (y - centerY));
		var newY = (centerY - (sinValue * (x - centerX))) + (cosValue * (y - centerY));
		return _Utils_Tuple2(newX, newY);
	});
var $author$project$Game$Calculations$collision_circle_rectangle = F5(
	function (_v0, d, _v1, _v2, rot2) {
		var x1 = _v0.a;
		var y1 = _v0.b;
		var x2 = _v1.a;
		var y2 = _v1.b;
		var w2 = _v2.a;
		var h2 = _v2.b;
		var rotationDifference = -rot2;
		var halfW = w2 / 2;
		var halfH = h2 / 2;
		var _v3 = A3(
			$author$project$Game$Calculations$rotate_point,
			_Utils_Tuple2(x1, y1),
			_Utils_Tuple2(x2, y2),
			rotationDifference);
		var cx = _v3.a;
		var cy = _v3.b;
		var nearX = A2(
			$elm$core$Basics$max,
			x2 - halfW,
			A2($elm$core$Basics$min, cx, x2 + halfW));
		var nearY = A2(
			$elm$core$Basics$max,
			y2 - halfH,
			A2($elm$core$Basics$min, cy, y2 + halfH));
		var distance = A2(
			$author$project$Game$Calculations$distance_of_2points,
			_Utils_Tuple2(nearX, nearY),
			_Utils_Tuple2(cx, cy));
		return _Utils_cmp(distance, d / 2) < 1;
	});
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Game$Enemies$enemy_can_be_hit = F2(
	function (enemy, index) {
		return !A2($elm$core$List$member, index, enemy.Q);
	});
var $author$project$Game$Projectiles$Explosion = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$Game$Projectiles$explosionStageDuration = 0.04;
var $author$project$Game$Projectiles$get_explosion_size = F2(
	function (stage, maxSize) {
		var newSize = function () {
			switch (stage) {
				case 1:
					return maxSize * 0.5;
				case 2:
					return maxSize * 0.75;
				case 3:
					return maxSize;
				case 4:
					return maxSize * 0.8;
				case 5:
					return maxSize * 0.75;
				default:
					return maxSize;
			}
		}();
		return _Utils_Tuple2(newSize, newSize);
	});
var $author$project$Game$Projectiles$create_explosion = function (projectile) {
	var _v0 = projectile.O;
	if (_v0.$ === 2) {
		var size = _v0.b;
		return $elm$core$Maybe$Just(
			{
				bi: projectile.bi,
				O: A2($author$project$Game$Projectiles$Explosion, size, 1),
				bt: projectile.bt,
				w: A2($author$project$Game$Projectiles$get_explosion_size, 1, size),
				r: projectile.r,
				R: $author$project$Game$Projectiles$explosionStageDuration,
				a5: projectile.a5,
				cn: projectile.cn,
				c: projectile.c,
				Y: 0,
				v: '/assets/projectiles/explosion-1.png'
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Game$Projectiles$reduce_health = F3(
	function (health, armor, projectile) {
		var currentArmor = A2($elm$core$Basics$max, 0, armor - projectile.bi);
		var currentDamage = A2($elm$core$Basics$max, 0, projectile.bt - currentArmor);
		return health - currentDamage;
	});
var $author$project$Game$Projectiles$reduce_pierce = function (projectile) {
	var newPierce = projectile.a5 - 1;
	return (newPierce <= 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
		_Utils_update(
			projectile,
			{a5: newPierce}));
};
var $author$project$Game$Playboard$hit_enemy = F2(
	function (_v0, enemy) {
		var enemyList = _v0.a;
		var projectile = _v0.b;
		if (projectile.$ === 1) {
			return _Utils_Tuple2(
				A2($elm$core$List$cons, enemy, enemyList),
				$elm$core$Maybe$Nothing);
		} else {
			var p = projectile.a;
			var newProjectile = function () {
				var _v5 = p.O;
				if (_v5.$ === 2) {
					return $author$project$Game$Projectiles$create_explosion(p);
				} else {
					return $author$project$Game$Projectiles$reduce_pierce(p);
				}
			}();
			var newIndexList = function () {
				var _v4 = p.O;
				switch (_v4.$) {
					case 0:
						return enemy.Q;
					case 2:
						return enemy.Q;
					default:
						return A2($elm$core$List$cons, p.r, enemy.Q);
				}
			}();
			var newHealth = function () {
				var _v2 = p.O;
				if (_v2.$ === 2) {
					var t = _v2.a;
					if (t === 2) {
						return A3($author$project$Game$Projectiles$reduce_health, enemy.h, enemy.aa, p);
					} else {
						return enemy.h;
					}
				} else {
					return A3($author$project$Game$Projectiles$reduce_health, enemy.h, enemy.aa, p);
				}
			}();
			return _Utils_Tuple2(
				A2(
					$elm$core$List$cons,
					_Utils_update(
						enemy,
						{h: newHealth, Q: newIndexList}),
					enemyList),
				newProjectile);
		}
	});
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $author$project$Game$Playboard$detect_collision = F2(
	function (_v0, projectile) {
		var allEnemies = _v0.a;
		var allProjectiles = _v0.b;
		var _v1 = function () {
			var _v2 = projectile.O;
			switch (_v2.$) {
				case 0:
					var index = _v2.a;
					return A2(
						$elm$core$List$partition,
						function (o) {
							return (o.h > 0) && _Utils_eq(o.r, index);
						},
						allEnemies);
				case 3:
					return A2(
						$elm$core$List$partition,
						function (o) {
							return (o.h > 0) && (A2($author$project$Game$Enemies$enemy_can_be_hit, o, projectile.r) && A6($author$project$Game$Calculations$collision_2rectangles, o.cn, o.w, o.c, projectile.cn, projectile.w, projectile.c));
						},
						allEnemies);
				case 2:
					return A2(
						$elm$core$List$partition,
						function (o) {
							return (o.h > 0) && A6($author$project$Game$Calculations$collision_2rectangles, o.cn, o.w, o.c, projectile.cn, projectile.w, projectile.c);
						},
						allEnemies);
				default:
					return A2(
						$elm$core$List$partition,
						function (o) {
							return (o.h > 0) && (A2($author$project$Game$Enemies$enemy_can_be_hit, o, projectile.r) && A5($author$project$Game$Calculations$collision_circle_rectangle, projectile.cn, projectile.w.a, o.cn, o.w, o.c));
						},
						allEnemies);
			}
		}();
		var collidingEnemies = _v1.a;
		var otherEnemies = _v1.b;
		var _v3 = A3(
			$elm$core$List$foldl,
			F2(
				function (o, _v4) {
					var elist = _v4.a;
					var pr = _v4.b;
					return A2(
						$author$project$Game$Playboard$hit_enemy,
						_Utils_Tuple2(elist, pr),
						o);
				}),
			_Utils_Tuple2(
				_List_Nil,
				$elm$core$Maybe$Just(projectile)),
			collidingEnemies);
		var newEnemies = _v3.a;
		var collidedProjectile = _v3.b;
		var newProjectiles = function () {
			var _v5 = projectile.O;
			if (!_v5.$) {
				return allProjectiles;
			} else {
				if (collidedProjectile.$ === 1) {
					return allProjectiles;
				} else {
					var p = collidedProjectile.a;
					return A2($elm$core$List$cons, p, allProjectiles);
				}
			}
		}();
		return _Utils_Tuple2(
			_Utils_ap(otherEnemies, newEnemies),
			newProjectiles);
	});
var $author$project$Game$Playboard$collide_objects = F2(
	function (allEnemies, allProjectiles) {
		var _v0 = A2($elm$core$List$partition, $author$project$Game$Projectiles$can_collide, allProjectiles);
		var activeProjectiles = _v0.a;
		var nonActiveProjectiles = _v0.b;
		var _v1 = A3(
			$elm$core$List$foldl,
			F2(
				function (o, _v2) {
					var elist = _v2.a;
					var plist = _v2.b;
					return A2(
						$author$project$Game$Playboard$detect_collision,
						_Utils_Tuple2(elist, plist),
						o);
				}),
			_Utils_Tuple2(allEnemies, _List_Nil),
			activeProjectiles);
		var newEnemies = _v1.a;
		var newProjectiles = _v1.b;
		return _Utils_Tuple2(
			newEnemies,
			_Utils_ap(newProjectiles, nonActiveProjectiles));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (!_v0.$) {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $author$project$Game$Calculations$rot_to_dir = function (rot) {
	var deg = rot * (180 / $elm$core$Basics$pi);
	var _v0 = $elm$core$Basics$round(deg);
	switch (_v0) {
		case 0:
			return 0;
		case 90:
			return 1;
		case 180:
			return 2;
		case 270:
			return 3;
		default:
			return 0;
	}
};
var $author$project$Game$Enemies$move_enemy = F3(
	function (enemy, path, diff) {
		move_enemy:
		while (true) {
			var point = enemy.l.b;
			var index = enemy.l.a;
			var currentY = enemy.cn.b;
			var currentX = enemy.cn.a;
			if (point.$ === 1) {
				var _v1 = enemy.A;
				if (_v1 === 1) {
					var newPoint = A2($elm$core$Array$get, index, path);
					var lastPoint = A2(
						$elm$core$Maybe$withDefault,
						$author$project$Game$Calculations$emptyPoint,
						A2(
							$elm$core$Array$get,
							$elm$core$Array$length(path) - 1,
							path));
					var newRotation = function () {
						if (newPoint.$ === 1) {
							return $author$project$Game$Calculations$dir_to_rot(lastPoint.b6);
						} else {
							var p = newPoint.a;
							return A2($author$project$Game$Calculations$rotation_of_2points, enemy.cn, p.cn);
						}
					}();
					var newX = function () {
						if (newPoint.$ === 1) {
							return (lastPoint.b6 === 1) ? (currentX + 1) : ((lastPoint.b6 === 3) ? (currentX - 1) : currentX);
						} else {
							var p = newPoint.a;
							return p.cn.a;
						}
					}();
					var newY = function () {
						if (newPoint.$ === 1) {
							return (!lastPoint.b6) ? (currentY + 1) : ((lastPoint.b6 === 2) ? (currentY - 1) : currentY);
						} else {
							var p = newPoint.a;
							return p.cn.b;
						}
					}();
					return $author$project$Game$Enemies$set_healthbar_distance(
						_Utils_update(
							enemy,
							{
								l: _Utils_Tuple2(
									index + 1,
									$elm$core$Maybe$Just(
										_Utils_Tuple2(newX, newY))),
								c: newRotation
							}));
				} else {
					var newPoint = A2($elm$core$Array$get, index, path);
					var newIndex = index + 1;
					var newDirection = function () {
						if (newPoint.$ === 1) {
							return $author$project$Game$Calculations$rot_to_dir(enemy.c);
						} else {
							var p = newPoint.a;
							return p.b6;
						}
					}();
					var offsetMult = function () {
						var nextDirection = function () {
							var _v8 = A2($elm$core$Array$get, newIndex, path);
							if (_v8.$ === 1) {
								return newDirection;
							} else {
								var p = _v8.a;
								return p.b6;
							}
						}();
						switch (nextDirection) {
							case 0:
								return 1;
							case 2:
								return -1;
							case 1:
								return -1;
							default:
								return 1;
						}
					}();
					var newX = function () {
						if (newPoint.$ === 1) {
							return ((newDirection === 1) || (newDirection === 3)) ? (currentX + 1) : currentX;
						} else {
							var p = newPoint.a;
							return ((!newDirection) || (newDirection === 2)) ? currentX : (p.cn.a + (enemy.u * offsetMult));
						}
					}();
					var newY = function () {
						if (newPoint.$ === 1) {
							return ((!newDirection) || (newDirection === 2)) ? (currentY + 1) : currentY;
						} else {
							var p = newPoint.a;
							return ((newDirection === 1) || (newDirection === 3)) ? currentY : (p.cn.b + (enemy.u * offsetMult));
						}
					}();
					return $author$project$Game$Enemies$set_healthbar_distance(
						_Utils_update(
							enemy,
							{
								l: _Utils_Tuple2(
									newIndex,
									$elm$core$Maybe$Just(
										_Utils_Tuple2(newX, newY))),
								c: $author$project$Game$Calculations$dir_to_rot(newDirection)
							}));
				}
			} else {
				var p = point.a;
				var movement = diff * enemy.Y;
				var distanceY = $elm$core$Basics$abs(p.b - currentY);
				var distanceX = $elm$core$Basics$abs(p.a - currentX);
				if ((_Utils_cmp(distanceX, movement) < 1) && (_Utils_cmp(distanceY, movement) < 1)) {
					var $temp$enemy = _Utils_update(
						enemy,
						{
							l: _Utils_Tuple2(index, $elm$core$Maybe$Nothing),
							cn: p
						}),
						$temp$path = path,
						$temp$diff = 0;
					enemy = $temp$enemy;
					path = $temp$path;
					diff = $temp$diff;
					continue move_enemy;
				} else {
					return _Utils_update(
						enemy,
						{
							cn: _Utils_Tuple2(
								currentX + (movement * $elm$core$Basics$sin(enemy.c)),
								currentY + (movement * $elm$core$Basics$cos(enemy.c)))
						});
				}
			}
		}
	});
var $author$project$Game$Calculations$out_of_map = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var y = _v0.b;
		var row = _v1.a;
		var col = _v1.b;
		var maxY = row;
		var maxX = col;
		return ((x < 0) || ((_Utils_cmp(x, maxX) > 0) || ((y < 0) || (_Utils_cmp(y, maxY) > 0)))) ? true : false;
	});
var $author$project$Game$Projectiles$move_projectile = F3(
	function (projectile, _v0, dt) {
		var row = _v0.a;
		var col = _v0.b;
		var newLifespan = A2($elm$core$Basics$max, 0, projectile.R - dt);
		var canExplode = function () {
			var _v2 = projectile.O;
			if (_v2.$ === 2) {
				var t = _v2.a;
				if (t === 1) {
					return newLifespan <= 0;
				} else {
					return false;
				}
			} else {
				return false;
			}
		}();
		var _v1 = projectile.O;
		switch (_v1.$) {
			case 0:
				return $elm$core$Maybe$Just(
					_Utils_update(
						projectile,
						{R: newLifespan}));
			case 3:
				var size = _v1.a;
				var stage = _v1.b;
				if (newLifespan <= 0) {
					var newStage = stage + 1;
					return (newStage > 5) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
						_Utils_update(
							projectile,
							{
								O: A2($author$project$Game$Projectiles$Explosion, size, newStage),
								w: A2($author$project$Game$Projectiles$get_explosion_size, newStage, size),
								R: $author$project$Game$Projectiles$explosionStageDuration,
								v: '/assets/projectiles/explosion-' + ($elm$core$String$fromInt(newStage) + '.png')
							}));
				} else {
					return $elm$core$Maybe$Just(
						_Utils_update(
							projectile,
							{R: newLifespan}));
				}
			default:
				if (canExplode) {
					return $author$project$Game$Projectiles$create_explosion(projectile);
				} else {
					if (newLifespan <= 0) {
						return $elm$core$Maybe$Nothing;
					} else {
						var movement = dt * projectile.Y;
						var newX = projectile.cn.a + ($elm$core$Basics$sin(projectile.c) * movement);
						var newY = projectile.cn.b + ($elm$core$Basics$cos(projectile.c) * movement);
						return A2(
							$author$project$Game$Calculations$out_of_map,
							_Utils_Tuple2(newX, newY),
							_Utils_Tuple2(row, col)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
							_Utils_update(
								projectile,
								{
									R: newLifespan,
									cn: _Utils_Tuple2(newX, newY)
								}));
					}
				}
		}
	});
var $author$project$Game$Playboard$enemyLayerDifference = 0.001;
var $author$project$Game$Playboard$enemyLayerMinimal = -0.95;
var $author$project$Game$Playboard$place_projectiles = F2(
	function (board, newProjectiles) {
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (o, _v1) {
					var layer = _v1.a;
					var plist = _v1.b;
					if (o.$ === 1) {
						return _Utils_Tuple2(layer, plist);
					} else {
						var p = o.a;
						var currentLayer = (_Utils_cmp(layer - $author$project$Game$Playboard$enemyLayerDifference, $author$project$Game$Playboard$enemyLayerMinimal) < 0) ? ($author$project$Game$Playboard$enemyLayerInitial - $author$project$Game$Playboard$enemyLayerDifference) : (layer - $author$project$Game$Playboard$enemyLayerDifference);
						var newProjectile = _Utils_update(
							p,
							{r: currentLayer});
						return _Utils_Tuple2(
							currentLayer,
							A2($elm$core$List$cons, newProjectile, plist));
					}
				}),
			_Utils_Tuple2(board.bP, _List_Nil),
			newProjectiles);
		var newLayer = _v0.a;
		var placedProjectiles = _v0.b;
		return _Utils_update(
			board,
			{al: placedProjectiles, bP: newLayer});
	});
var $elm$core$List$unzip = function (pairs) {
	var step = F2(
		function (_v0, _v1) {
			var x = _v0.a;
			var y = _v0.b;
			var xs = _v1.a;
			var ys = _v1.b;
			return _Utils_Tuple2(
				A2($elm$core$List$cons, x, xs),
				A2($elm$core$List$cons, y, ys));
		});
	return A3(
		$elm$core$List$foldr,
		step,
		_Utils_Tuple2(_List_Nil, _List_Nil),
		pairs);
};
var $author$project$Game$Playboard$move_entities = F2(
	function (board, dt) {
		var _v0 = A2($author$project$Game$Playboard$collide_objects, board.ea, board.al);
		var newEnemies = _v0.a;
		var newProjectiles = _v0.b;
		var movedProjectiles = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				function (o) {
					return A3($author$project$Game$Projectiles$move_projectile, o, board.aQ, dt);
				},
				newProjectiles));
		var _v1 = A2(
			$elm$core$List$partition,
			function (o) {
				return o.h <= 0;
			},
			newEnemies);
		var deadEnemies = _v1.a;
		var aliveEnemies = _v1.b;
		var _v2 = A2(
			$elm$core$List$partition,
			function (o) {
				return A2($author$project$Game$Calculations$out_of_map, o.cn, board.aQ);
			},
			A2(
				$elm$core$List$map,
				function (o) {
					return A3($author$project$Game$Enemies$move_enemy, o, board.bM, dt);
				},
				aliveEnemies));
		var escapedEnemies = _v2.a;
		var movedEnemies = _v2.b;
		var livesLost = A3(
			$elm$core$List$foldl,
			F2(
				function (o, sum) {
					return sum + o.ag;
				}),
			0,
			escapedEnemies);
		var _v3 = $elm$core$List$unzip(
			A2(
				$elm$core$List$map,
				function (o) {
					return A3($author$project$Game$Playboard$aim_tower, o, movedEnemies, dt);
				},
				board.bh));
		var movedTowers = _v3.a;
		var spawnedProjectiles = _v3.b;
		var newBoard = A2($author$project$Game$Playboard$place_projectiles, board, spawnedProjectiles);
		var moneyEarned = A3(
			$elm$core$List$foldl,
			F2(
				function (o, sum) {
					return sum + o.M;
				}),
			0,
			deadEnemies);
		return _Utils_Tuple3(
			livesLost,
			moneyEarned,
			_Utils_update(
				newBoard,
				{
					ea: movedEnemies,
					al: _Utils_ap(movedProjectiles, newBoard.al),
					bh: movedTowers
				}));
	});
var $author$project$Game$Enemies$enemy_can_spawn = F2(
	function (enemy, time) {
		return _Utils_cmp(enemy.a, time) < 1;
	});
var $author$project$Game$Playboard$spawn_enemies = F3(
	function (board, wave, enemyMultipllier) {
		var newEnemies = A2($elm$core$List$map, $elm$core$Tuple$second, wave);
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (o, _v1) {
					var layer = _v1.a;
					var elist = _v1.b;
					var currentLayer = (_Utils_cmp(layer - $author$project$Game$Playboard$enemyLayerDifference, $author$project$Game$Playboard$enemyLayerMinimal) < 0) ? ($author$project$Game$Playboard$enemyLayerInitial - $author$project$Game$Playboard$enemyLayerDifference) : (layer - $author$project$Game$Playboard$enemyLayerDifference);
					var newEnemy = A5($author$project$Game$Enemies$place_enemy, o, board.bM, board.bZ, currentLayer, enemyMultipllier);
					return _Utils_Tuple2(
						currentLayer,
						A2($elm$core$List$cons, newEnemy, elist));
				}),
			_Utils_Tuple2(board.bz, _List_Nil),
			newEnemies);
		var newLayer = _v0.a;
		var placedEnemies = _v0.b;
		return _Utils_update(
			board,
			{
				ea: _Utils_ap(board.ea, placedEnemies),
				bz: newLayer
			});
	});
var $author$project$Game$Level$spawn_wave = F2(
	function (dt, level) {
		var _v0 = level.ad;
		if (_v0.$ === 1) {
			return level;
		} else {
			var w = _v0.a;
			var newTime = w.cK + dt;
			var _v1 = A2(
				$elm$core$List$partition,
				function (o) {
					return A2($author$project$Game$Enemies$enemy_can_spawn, o, newTime);
				},
				w.cP);
			var spawnedEnemies = _v1.a;
			var waveEnemies = _v1.b;
			var newWave = _Utils_update(
				w,
				{cK: newTime, cP: waveEnemies});
			return _Utils_update(
				level,
				{
					ad: $elm$core$Maybe$Just(newWave),
					i: A3($author$project$Game$Playboard$spawn_enemies, level.i, spawnedEnemies, level.b8)
				});
		}
	});
var $author$project$Game$Level$tick_time = F2(
	function (oldLevel, dt) {
		var _v0 = oldLevel.S;
		if (!_v0) {
			var level = _Utils_update(
				oldLevel,
				{cK: oldLevel.cK + dt});
			var seconds = (dt * level.Y) / 1000;
			if (!seconds) {
				return level;
			} else {
				var _v1 = A2($author$project$Game$Playboard$move_entities, level.i, seconds);
				var livesLost = _v1.a;
				var moneyEarned = _v1.b;
				var newBoard = _v1.c;
				var newLives = A2($elm$core$Basics$max, 0, level.ag - livesLost);
				var newLevel = _Utils_update(
					level,
					{ag: newLives, i: newBoard, o: level.o + moneyEarned});
				return (newLevel.ag <= 0) ? _Utils_update(
					newLevel,
					{S: 3}) : ((!$author$project$Game$Level$get_unbeaten_enemy_count(newLevel)) ? $author$project$Game$Level$increase_wave(newLevel) : A2($author$project$Game$Level$spawn_wave, seconds, newLevel));
			}
		} else {
			return oldLevel;
		}
	});
var $author$project$Game$Level$unpause_level = function (level) {
	var _v0 = level.S;
	if (_v0 === 1) {
		return _Utils_update(
			level,
			{S: 0});
	} else {
		return level;
	}
};
var $author$project$Pages$Game$update = F2(
	function (msg, model) {
		update:
		while (true) {
			switch (msg.$) {
				case 0:
					var id = msg.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{f: id}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				case 1:
					var n = msg.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								fm: A2($author$project$Game$Level$change_speed, model.fm, n)
							}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				case 4:
					var _v1 = model.d;
					switch (_v1.$) {
						case 5:
							return _Utils_Tuple3(
								_Utils_update(
									model,
									{e: $author$project$Game$Level$NoObject}),
								$elm$core$Platform$Cmd$none,
								$author$project$SharedState$NoUpdate);
						case 0:
							return _Utils_Tuple3(
								_Utils_update(
									model,
									{d: $author$project$Game$Level$NoAction, e: $author$project$Game$Level$NoObject}),
								$elm$core$Platform$Cmd$none,
								$author$project$SharedState$NoUpdate);
						case 2:
							var $temp$msg = $author$project$Pages$Game$SelectAction($author$project$Game$Level$NoAction),
								$temp$model = model;
							msg = $temp$msg;
							model = $temp$model;
							continue update;
						default:
							return _Utils_Tuple3(
								_Utils_update(
									model,
									{d: $author$project$Game$Level$NoAction}),
								$elm$core$Platform$Cmd$none,
								$author$project$SharedState$NoUpdate);
					}
				case 7:
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{aj: !model.aj}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				case 8:
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{aS: !model.aS}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				case 9:
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{aR: !model.aR}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				case 2:
					var name = msg.a;
					var newTower = A2($author$project$Game$Towers$create_tower, name, model.fm.b1);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								d: $author$project$Game$Level$Buy,
								e: A2($author$project$Game$Level$CurrentTower, newTower, false)
							}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				case 5:
					var pos = msg.a;
					if (!pos.$) {
						var p = pos.a;
						var newpos = A2($author$project$Game$Playboard$map_coordinates, model.fm.i, p);
						var _v3 = model.e;
						if (_v3.$ === 1) {
							var t = _v3.a;
							var preview = _v3.b;
							if (_Utils_eq(newpos, t.cn) && preview) {
								return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $author$project$SharedState$NoUpdate);
							} else {
								if (A2($author$project$Game$Playboard$tower_is_placed, model.fm.i, t)) {
									return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $author$project$SharedState$NoUpdate);
								} else {
									var newtower = A2(
										$author$project$Game$Level$CurrentTower,
										_Utils_update(
											t,
											{cn: newpos}),
										true);
									return _Utils_Tuple3(
										_Utils_update(
											model,
											{e: newtower}),
										$elm$core$Platform$Cmd$none,
										$author$project$SharedState$NoUpdate);
								}
							}
						} else {
							return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $author$project$SharedState$NoUpdate);
						}
					} else {
						var _v4 = model.e;
						if (_v4.$ === 1) {
							var t = _v4.a;
							var preview = _v4.b;
							return preview ? _Utils_Tuple3(
								_Utils_update(
									model,
									{
										e: A2($author$project$Game$Level$CurrentTower, t, false)
									}),
								$elm$core$Platform$Cmd$none,
								$author$project$SharedState$NoUpdate) : _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $author$project$SharedState$NoUpdate);
						} else {
							return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $author$project$SharedState$NoUpdate);
						}
					}
				case 6:
					var pos = msg.a;
					var newpos = A2($author$project$Game$Playboard$map_coordinates, model.fm.i, pos);
					var _v5 = model.e;
					if (_v5.$ === 1) {
						var preview = _v5.b;
						if (preview) {
							var $temp$msg = $author$project$Pages$Game$SelectAction($author$project$Game$Level$Buy),
								$temp$model = model;
							msg = $temp$msg;
							model = $temp$model;
							continue update;
						} else {
							return _Utils_Tuple3(
								_Utils_update(
									model,
									{
										d: $author$project$Game$Level$NoAction,
										e: A2($author$project$Game$Level$get_object, model.fm.i, newpos)
									}),
								$elm$core$Platform$Cmd$none,
								$author$project$SharedState$NoUpdate);
						}
					} else {
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									d: $author$project$Game$Level$NoAction,
									e: A2($author$project$Game$Level$get_object, model.fm.i, newpos)
								}),
							$elm$core$Platform$Cmd$none,
							$author$project$SharedState$NoUpdate);
					}
				case 3:
					var act = msg.a;
					if ((!_Utils_eq(act, $author$project$Game$Level$NoAction)) && _Utils_eq(act, model.d)) {
						var newID = function () {
							switch (act.$) {
								case 1:
									return 0;
								case 3:
									return 0;
								case 2:
									var path = act.a;
									if (path === 2) {
										return model.f;
									} else {
										return 0;
									}
								default:
									return model.f;
							}
						}();
						var _v6 = A3($author$project$Game$Level$perform_action, act, model.fm, model.e);
						var newlevel = _v6.a;
						var newobj = _v6.b;
						var result = _v6.c;
						var _v7 = function () {
							if (result.$ === 1) {
								return _Utils_Tuple2($author$project$Game$Level$NoAction, $elm$core$Maybe$Nothing);
							} else {
								var str = result.a;
								return _Utils_Tuple2(
									model.d,
									$elm$core$Maybe$Just(
										$author$project$Pages$Game$create_message(str)));
							}
						}();
						var newAction = _v7.a;
						var newMessage = _v7.b;
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{f: newID, d: newAction, aL: newMessage, e: newobj, fm: newlevel}),
							$elm$core$Platform$Cmd$none,
							$author$project$SharedState$NoUpdate);
					} else {
						var _v11 = model.d;
						if (_v11.$ === 2) {
							var _v12 = model.e;
							if (_v12.$ === 1) {
								var t = _v12.a;
								var $temp$msg = $author$project$Pages$Game$SelectAction(act),
									$temp$model = _Utils_update(
									model,
									{
										d: $author$project$Game$Level$NoAction,
										e: A2($author$project$Game$Level$get_object, model.fm.i, t.cn)
									});
								msg = $temp$msg;
								model = $temp$model;
								continue update;
							} else {
								return _Utils_Tuple3(
									_Utils_update(
										model,
										{d: act}),
									$elm$core$Platform$Cmd$none,
									$author$project$SharedState$NoUpdate);
							}
						} else {
							switch (act.$) {
								case 2:
									var path = act.a;
									var _v14 = model.e;
									if (_v14.$ === 1) {
										var t = _v14.a;
										var preview = _v14.b;
										var newTower = A3($author$project$Game$Towers$increase_level, t, path, model.fm.b1);
										return _Utils_Tuple3(
											_Utils_update(
												model,
												{
													d: act,
													e: A2($author$project$Game$Level$CurrentTower, newTower, preview)
												}),
											$elm$core$Platform$Cmd$none,
											$author$project$SharedState$NoUpdate);
									} else {
										return _Utils_Tuple3(
											_Utils_update(
												model,
												{d: act}),
											$elm$core$Platform$Cmd$none,
											$author$project$SharedState$NoUpdate);
									}
								case 4:
									var $temp$msg = $author$project$Pages$Game$SelectAction(act),
										$temp$model = _Utils_update(
										model,
										{d: act});
									msg = $temp$msg;
									model = $temp$model;
									continue update;
								default:
									return _Utils_Tuple3(
										_Utils_update(
											model,
											{d: act}),
										$elm$core$Platform$Cmd$none,
										$author$project$SharedState$NoUpdate);
							}
						}
					}
				case 10:
					var t = msg.a;
					var newMessage = A2($author$project$Pages$Game$decrease_message_time, model.aL, t);
					var newLevel = A2($author$project$Game$Level$tick_time, model.fm, t);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{aL: newMessage, fm: newLevel}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				case 11:
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								fm: $author$project$Game$Level$pause_level(model.fm)
							}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				case 12:
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								fm: $author$project$Game$Level$unpause_level(model.fm)
							}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				case 14:
					var link = msg.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{a2: link}),
						$elm$core$Platform$Cmd$none,
						$author$project$SharedState$NoUpdate);
				default:
					var _v15 = model.fm.S;
					if (_v15 === 2) {
						var newUser = A4($author$project$User$save_level_score, model.b2, model.fm.c6, model.fm.ag, model.fm.cK);
						return _Utils_Tuple3(
							model,
							$elm$core$Platform$Cmd$none,
							$author$project$SharedState$UpdateUser(newUser));
					} else {
						return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $author$project$SharedState$NoUpdate);
					}
			}
		}
	});
var $author$project$Game$Towers$maxTowerLevel = 5;
var $author$project$Pages$Guide$get_tower_index_range = function (index) {
	return _Utils_Tuple2(index, (index + $author$project$Game$Towers$maxTowerLevel) + 1);
};
var $author$project$Pages$Guide$Basics = 0;
var $author$project$Pages$Guide$Enemies = 2;
var $author$project$Pages$Guide$Tips = 3;
var $author$project$Pages$Guide$Towers = 1;
var $author$project$Pages$Guide$index_to_category = function (index) {
	switch (index) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		default:
			return 0;
	}
};
var $author$project$Pages$Guide$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{f: id}),
					$elm$core$Platform$Cmd$none);
			case 1:
				var index = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aK: index, m: 0}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var index = msg.a;
				var _v1 = $author$project$Pages$Guide$index_to_category(model.aK);
				switch (_v1) {
					case 2:
						return _Utils_eq(index, model.m) ? _Utils_Tuple2(
							_Utils_update(
								model,
								{m: 0}),
							$elm$core$Platform$Cmd$none) : _Utils_Tuple2(
							_Utils_update(
								model,
								{m: index}),
							$elm$core$Platform$Cmd$none);
					case 1:
						var _v2 = $author$project$Pages$Guide$get_tower_index_range(index);
						var indexMin = _v2.a;
						var indexMax = _v2.b;
						return ((_Utils_cmp(indexMin, model.m) < 1) && (_Utils_cmp(indexMax, model.m) > -1)) ? _Utils_Tuple2(
							_Utils_update(
								model,
								{m: 0}),
							$elm$core$Platform$Cmd$none) : _Utils_Tuple2(
							_Utils_update(
								model,
								{m: index}),
							$elm$core$Platform$Cmd$none);
					default:
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			default:
				var index = msg.a;
				return (!_Utils_eq(index, model.m)) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{m: index}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Home$update = F2(
	function (msg, model) {
		var id = msg;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{f: id}),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Pages$Info$update = F2(
	function (msg, model) {
		var id = msg;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{f: id}),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Pages$LevelPreview$update = F2(
	function (msg, model) {
		if (!msg.$) {
			var id = msg.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{f: id}),
				$elm$core$Platform$Cmd$none);
		} else {
			var lvl = msg.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{a1: lvl}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$ScoreBoard$update = F2(
	function (msg, model) {
		var id = msg;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{f: id}),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$User$diff_from_str = function (str) {
	switch (str) {
		case 'Easy':
			return 0;
		case 'Medium':
			return 1;
		case 'Hard':
			return 2;
		default:
			return 0;
	}
};
var $author$project$Pages$Settings$messageUnsaved = '* You have unsaved changes.';
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (!node.$) {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						p: _List_Nil,
						j: 0,
						n: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!_v0.$) {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (!_v0.$) {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (!_v0.$) {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $author$project$User$set_level = F2(
	function (user, lvlNumber) {
		var difference = lvlNumber - $author$project$User$get_unlocked_level(user);
		var newScore = function () {
			var _v0 = A2($elm$core$Basics$compare, difference, 0);
			switch (_v0) {
				case 2:
					return A2(
						$elm$core$Array$append,
						user.bE,
						A2($elm$core$Array$repeat, difference, $author$project$User$emptyScore));
				case 1:
					return user.bE;
				default:
					return A3(
						$elm$core$Array$slice,
						0,
						$elm$core$Array$length(user.bE) + difference,
						user.bE);
			}
		}();
		return _Utils_update(
			user,
			{bE: newScore});
	});
var $author$project$User$set_user_score = F2(
	function (oldUser, newUser) {
		var oldScore = $elm$core$Array$toList(oldUser.bE);
		var newScore = $elm$core$Array$toList(newUser.bE);
		var updatedScore = $elm$core$Array$fromList(
			A3(
				$elm$core$List$map2,
				F2(
					function (old, _new) {
						return A2($author$project$User$compare_score, old, _new);
					}),
				oldScore,
				newScore));
		var difference = $elm$core$Array$length(newUser.bE) - $elm$core$Array$length(updatedScore);
		var score = (($elm$core$Array$length(oldUser.bE) === 9) && ($elm$core$Array$length(newUser.bE) >= 8)) ? oldUser.bE : ((difference > 0) ? A2(
			$elm$core$Array$append,
			updatedScore,
			A2($elm$core$Array$repeat, difference, $author$project$User$emptyScore)) : updatedScore);
		return _Utils_update(
			newUser,
			{bE: score});
	});
var $author$project$User$user_not_changed = F2(
	function (oldUser, newUser) {
		var nameUnchanged = _Utils_eq(oldUser.dQ, newUser.dQ);
		var levelUnchanged = _Utils_eq(
			$author$project$User$get_unlocked_level(oldUser),
			$author$project$User$get_unlocked_level(newUser));
		var difficultyUnchanged = _Utils_eq(oldUser.eQ, newUser.eQ);
		return nameUnchanged && (levelUnchanged && difficultyUnchanged);
	});
var $author$project$Pages$Settings$update = F2(
	function (msg, model) {
		var player = model.b2;
		switch (msg.$) {
			case 0:
				var id = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{f: id}),
					$elm$core$Platform$Cmd$none,
					$author$project$SharedState$NoUpdate);
			case 1:
				var str = msg.a;
				var newPlayer = _Utils_update(
					player,
					{dQ: str});
				var message = A2($author$project$User$user_not_changed, model.aA, newPlayer) ? $author$project$Pages$Settings$messageCurrent : $author$project$Pages$Settings$messageUnsaved;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{aL: message, b2: newPlayer}),
					$elm$core$Platform$Cmd$none,
					$author$project$SharedState$NoUpdate);
			case 2:
				var lvl = msg.a;
				var newPlayer = A2(
					$author$project$User$set_level,
					player,
					$elm$core$Basics$round(lvl));
				var message = A2($author$project$User$user_not_changed, model.aA, newPlayer) ? $author$project$Pages$Settings$messageCurrent : $author$project$Pages$Settings$messageUnsaved;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{aL: message, b2: newPlayer}),
					$elm$core$Platform$Cmd$none,
					$author$project$SharedState$NoUpdate);
			case 3:
				var str = msg.a;
				var diff = $author$project$User$diff_from_str(str);
				var newPlayer = _Utils_update(
					player,
					{eQ: diff});
				var message = A2($author$project$User$user_not_changed, model.aA, newPlayer) ? $author$project$Pages$Settings$messageCurrent : $author$project$Pages$Settings$messageUnsaved;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{aL: message, b2: newPlayer}),
					$elm$core$Platform$Cmd$none,
					$author$project$SharedState$NoUpdate);
			default:
				var newPlayer = A2($author$project$User$set_user_score, model.aA, player);
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{aL: $author$project$Pages$Settings$messageCurrent, b2: newPlayer, aA: newPlayer}),
					$elm$core$Platform$Cmd$none,
					$author$project$SharedState$UpdateUser(newPlayer));
		}
	});
var $author$project$Route$page_update = F2(
	function (pageMsg, route) {
		var errorUpdate = _Utils_Tuple3(route, $elm$core$Platform$Cmd$none, $author$project$SharedState$NoUpdate);
		switch (pageMsg.$) {
			case 0:
				var msg = pageMsg.a;
				if (!route.$) {
					var model = route.a;
					var _v2 = A2($author$project$Pages$Home$update, msg, model);
					var newmodel = _v2.a;
					var newCmd = _v2.b;
					var newroute = $author$project$Route$Home(newmodel);
					return _Utils_Tuple3(
						newroute,
						A2($elm$core$Platform$Cmd$map, $author$project$Route$HomeMsg, newCmd),
						$author$project$SharedState$NoUpdate);
				} else {
					return errorUpdate;
				}
			case 1:
				var msg = pageMsg.a;
				if (route.$ === 1) {
					var model = route.a;
					var _v4 = A2($author$project$Pages$Info$update, msg, model);
					var newmodel = _v4.a;
					var newCmd = _v4.b;
					var newroute = $author$project$Route$Info(newmodel);
					return _Utils_Tuple3(
						newroute,
						A2($elm$core$Platform$Cmd$map, $author$project$Route$InfoMsg, newCmd),
						$author$project$SharedState$NoUpdate);
				} else {
					return errorUpdate;
				}
			case 2:
				var msg = pageMsg.a;
				if (route.$ === 2) {
					var model = route.a;
					var _v6 = A2($author$project$Pages$LevelPreview$update, msg, model);
					var newmodel = _v6.a;
					var newCmd = _v6.b;
					var newroute = $author$project$Route$Level(newmodel);
					return _Utils_Tuple3(
						newroute,
						A2($elm$core$Platform$Cmd$map, $author$project$Route$LevelMsg, newCmd),
						$author$project$SharedState$NoUpdate);
				} else {
					return errorUpdate;
				}
			case 3:
				var msg = pageMsg.a;
				if (route.$ === 3) {
					var model = route.a;
					var _v8 = A2($author$project$Pages$ScoreBoard$update, msg, model);
					var newmodel = _v8.a;
					var newCmd = _v8.b;
					var newroute = $author$project$Route$Score(newmodel);
					return _Utils_Tuple3(
						newroute,
						A2($elm$core$Platform$Cmd$map, $author$project$Route$ScoreMsg, newCmd),
						$author$project$SharedState$NoUpdate);
				} else {
					return errorUpdate;
				}
			case 4:
				var msg = pageMsg.a;
				if (route.$ === 4) {
					var model = route.a;
					var _v10 = A2($author$project$Pages$Guide$update, msg, model);
					var newmodel = _v10.a;
					var newCmd = _v10.b;
					var newroute = $author$project$Route$Guide(newmodel);
					return _Utils_Tuple3(
						newroute,
						A2($elm$core$Platform$Cmd$map, $author$project$Route$GuideMsg, newCmd),
						$author$project$SharedState$NoUpdate);
				} else {
					return errorUpdate;
				}
			case 5:
				var msg = pageMsg.a;
				if (route.$ === 5) {
					var model = route.a;
					var _v12 = A2($author$project$Pages$Settings$update, msg, model);
					var newmodel = _v12.a;
					var newCmd = _v12.b;
					var stateupdate = _v12.c;
					var newroute = $author$project$Route$Settings(newmodel);
					return _Utils_Tuple3(
						newroute,
						A2($elm$core$Platform$Cmd$map, $author$project$Route$SettingsMsg, newCmd),
						stateupdate);
				} else {
					return errorUpdate;
				}
			default:
				var msg = pageMsg.a;
				if (route.$ === 6) {
					var model = route.a;
					var _v14 = A2($author$project$Pages$Game$update, msg, model);
					var newmodel = _v14.a;
					var newCmd = _v14.b;
					var stateupdate = _v14.c;
					var newroute = $author$project$Route$Game(newmodel);
					return _Utils_Tuple3(
						newroute,
						A2($elm$core$Platform$Cmd$map, $author$project$Route$GameMsg, newCmd),
						stateupdate);
				} else {
					return errorUpdate;
				}
		}
	});
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $author$project$User$diff_to_str = function (diff) {
	switch (diff) {
		case 0:
			return 'Easy';
		case 1:
			return 'Medium';
		default:
			return 'Hard';
	}
};
var $elm$json$Json$Encode$float = _Json_wrap;
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(0),
			pairs));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$User$encode_user = function (user) {
	var listTimes = A3(
		$elm$core$Array$foldr,
		F2(
			function (o, listT) {
				return A2($elm$core$List$cons, o.aH, listT);
			}),
		_List_Nil,
		user.bE);
	var listLives = A3(
		$elm$core$Array$foldr,
		F2(
			function (o, listL) {
				return A2($elm$core$List$cons, o.aq, listL);
			}),
		_List_Nil,
		user.bE);
	var diff = $author$project$User$diff_to_str(user.eQ);
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'username',
				$elm$json$Json$Encode$string(user.dQ)),
				_Utils_Tuple2(
				'lives',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, listLives)),
				_Utils_Tuple2(
				'times',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$float, listTimes)),
				_Utils_Tuple2(
				'difficulty',
				$elm$json$Json$Encode$string(diff))
			]));
};
var $author$project$Ports$setStorage = _Platform_outgoingPort('setStorage', $elm$core$Basics$identity);
var $author$project$SharedState$save_storage = function (player) {
	return $author$project$Ports$setStorage(
		$author$project$User$encode_user(player));
};
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 1) {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 1) {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.dD;
		if (!_v0) {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.e$,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.dE,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.dA,
					_Utils_ap(http, url.cY)),
				url.bM)));
};
var $Zinggi$elm_game_resources$Game$Resources$update = F2(
	function (_v0, _v1) {
		var url = _v0.a;
		var result = _v0.b;
		var res = _v1;
		if (!result.$) {
			var tex = result.a;
			return A3($elm$core$Dict$insert, url, tex, res);
		} else {
			var err = result.a;
			return res;
		}
	});
var $author$project$SharedState$update = F2(
	function (sharedState, sharedStateUpdate) {
		switch (sharedStateUpdate.$) {
			case 1:
				var u = sharedStateUpdate.a;
				return _Utils_update(
					sharedState,
					{fE: u});
			case 2:
				var resourceMsg = sharedStateUpdate.a;
				return _Utils_update(
					sharedState,
					{
						fQ: A2($Zinggi$elm_game_resources$Game$Resources$update, resourceMsg, sharedState.fQ)
					});
			default:
				return sharedState;
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 1:
				var urlRequest = msg.a;
				if (!urlRequest.$) {
					var url = urlRequest.a;
					return _Utils_Tuple2(
						model,
						A2(
							$elm$browser$Browser$Navigation$pushUrl,
							model.ck,
							$elm$url$Url$toString(url)));
				} else {
					var href = urlRequest.a;
					return _Utils_Tuple2(
						model,
						$elm$browser$Browser$Navigation$load(href));
				}
			case 0:
				var url = msg.a;
				var _v2 = model.C;
				if (_v2.$ === 1) {
					var state = _v2.a;
					var newRoute = A2($author$project$Route$parse_url, state, url);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								C: A2($author$project$Main$Ready, state, newRoute),
								bV: $author$project$Route$delete_fragment(url)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 2:
				var m = msg.a;
				var _v3 = model.C;
				if (_v3.$ === 1) {
					var state = _v3.a;
					var route = _v3.b;
					var newstate = A2(
						$author$project$SharedState$update,
						state,
						$author$project$SharedState$UpdateResource(m));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								C: A2($author$project$Main$Ready, newstate, route)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			default:
				var m = msg.a;
				var _v4 = model.C;
				if (_v4.$ === 1) {
					var state = _v4.a;
					var route = _v4.b;
					var _v5 = A2($author$project$Route$page_update, m, route);
					var newRoute = _v5.a;
					var cmd = _v5.b;
					var stateUpdate = _v5.c;
					var newstate = A2($author$project$SharedState$update, state, stateUpdate);
					if (stateUpdate.$ === 1) {
						var u = stateUpdate.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									C: A2($author$project$Main$Ready, newstate, newRoute)
								}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2($elm$core$Platform$Cmd$map, $author$project$Main$PageMsg, cmd),
										$author$project$SharedState$save_storage(u)
									])));
					} else {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									C: A2($author$project$Main$Ready, newstate, newRoute)
								}),
							A2($elm$core$Platform$Cmd$map, $author$project$Main$PageMsg, cmd));
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
		}
	});
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $author$project$Pages$Game$MapClicked = function (a) {
	return {$: 6, a: a};
};
var $author$project$Pages$Game$MouseMoved = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Bottom = 2;
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY(2);
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$classes = {d0: 'a', bY: 'atv', d2: 'ab', d3: 'cx', d4: 'cy', d5: 'acb', d6: 'accx', d7: 'accy', d8: 'acr', cC: 'al', cD: 'ar', d9: 'at', b_: 'ah', b$: 'av', ee: 's', ej: 'bh', ek: 'b', em: 'w7', eo: 'bd', ep: 'bdt', bj: 'bn', eq: 'bs', bk: 'cpe', ez: 'cp', eA: 'cpx', eB: 'cpy', ao: 'c', bp: 'ctr', bq: 'cb', br: 'ccx', ap: 'ccy', a0: 'cl', bs: 'cr', eE: 'ct', eH: 'cptr', eI: 'ctxt', e_: 'fcs', cT: 'focus-within', e1: 'fs', cb: 'g', cc: 'hbh', cd: 'hc', cW: 'he', ce: 'hf', cX: 'hfp', e7: 'hv', fa: 'ic', fc: 'fr', bD: 'lbl', fe: 'iml', ff: 'imlf', fg: 'imlp', fh: 'implw', fi: 'it', fk: 'i', c5: 'lnk', aO: 'nb', dq: 'notxt', ft: 'ol', fv: 'or', aB: 'oq', fA: 'oh', dx: 'pg', dy: 'p', fC: 'ppe', fS: 'ui', W: 'r', fV: 'sb', fW: 'sbx', fX: 'sby', fY: 'sbt', f0: 'e', f1: 'cap', f2: 'sev', f8: 'sk', gd: 't', ge: 'tc', gf: 'w8', gg: 'w2', gh: 'w9', gi: 'tj', bT: 'tja', gj: 'tl', gk: 'w3', gl: 'w5', gm: 'w4', gn: 'tr', go: 'w6', gp: 'w1', gq: 'tun', dP: 'ts', aF: 'clr', gx: 'u', cx: 'wc', dX: 'we', cy: 'wf', dY: 'wfp', cz: 'wrp'};
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$alignLeft = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.gj);
var $mdgriffith$elm_ui$Internal$Model$Top = 0;
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY(0);
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Internal$Model$Behind = 5;
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 0};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 3) {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 5, element);
};
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.ge);
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = 1;
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX(1);
var $mdgriffith$elm_ui$Internal$Model$CenterY = 1;
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY(1);
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.ez);
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$Pages$Styles$colors = {
	an: A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0),
	el: A3($mdgriffith$elm_ui$Element$rgb255, 51, 153, 255),
	cF: A3($mdgriffith$elm_ui$Element$rgb255, 102, 60, 28),
	eJ: A3($mdgriffith$elm_ui$Element$rgb255, 0, 15, 191),
	b4: A3($mdgriffith$elm_ui$Element$rgb255, 46, 139, 87),
	bu: A3($mdgriffith$elm_ui$Element$rgb255, 120, 120, 120),
	b5: A3($mdgriffith$elm_ui$Element$rgb255, 193, 28, 28),
	eR: A3($mdgriffith$elm_ui$Element$rgb255, 210, 191, 172),
	eS: A3($mdgriffith$elm_ui$Element$rgb255, 158, 183, 147),
	eT: A3($mdgriffith$elm_ui$Element$rgb255, 255, 163, 70),
	cM: A3($mdgriffith$elm_ui$Element$rgb255, 250, 250, 90),
	e3: A3($mdgriffith$elm_ui$Element$rgb255, 120, 255, 30),
	K: A3($mdgriffith$elm_ui$Element$rgb255, 173, 255, 47),
	e4: A3($mdgriffith$elm_ui$Element$rgb255, 193, 193, 193),
	c3: A3($mdgriffith$elm_ui$Element$rgb255, 152, 251, 152),
	cg: A3($mdgriffith$elm_ui$Element$rgb255, 225, 225, 225),
	fz: A3($mdgriffith$elm_ui$Element$rgb255, 250, 125, 0),
	dF: A3($mdgriffith$elm_ui$Element$rgb255, 255, 0, 0),
	bX: A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
	d_: A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 0)
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = 1;
var $mdgriffith$elm_ui$Internal$Model$asColumn = 1;
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ao);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cb);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.dx);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.dy);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.W);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.f0);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 1:
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 2:
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 3:
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 4:
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = 2;
var $mdgriffith$elm_ui$Internal$Model$asEl = 2;
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = 4;
var $mdgriffith$elm_ui$Internal$Model$asParagraph = 4;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 0:
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 1:
			return 'auto';
		case 2:
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 3:
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 13:
			var name = style.a;
			return name;
		case 12:
			var name = style.a;
			var o = style.b;
			return name;
		case 0:
			var _class = style.a;
			return _class;
		case 1:
			var name = style.a;
			return name;
		case 2:
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 3:
			var _class = style.a;
			return _class;
		case 4:
			var _class = style.a;
			return _class;
		case 5:
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 7:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 6:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 8:
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.fT)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.ac)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.f3.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.f3.b)))))));
		case 9:
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.W) + ('-' + ($elm$core$String$fromInt(pos.eC) + ('-' + ($elm$core$String$fromInt(pos.dW) + ('-' + $elm$core$String$fromInt(pos.cV)))))));
		case 11:
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector) {
					case 0:
						return 'fs';
					case 1:
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0;
		return A3($elm$core$Dict$insert, key, 0, dict);
	});
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$member, key, dict);
	});
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.c0 ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.u.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.u.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.aI) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.bS) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.J))
				])));
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cT) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.en),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.eh),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										aI: shadow.aI,
										J: shadow.J,
										c0: false,
										u: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.u)),
										bS: shadow.bS
									}));
						},
						focus.f_),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.en),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.eh),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										aI: shadow.aI,
										J: shadow.J,
										c0: false,
										u: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.u)),
										bS: shadow.bS
									}));
						},
						focus.f_),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlJson(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = 3;
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = 2;
var $mdgriffith$elm_ui$Internal$Style$Self = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Bottom = 1;
var $mdgriffith$elm_ui$Internal$Style$CenterX = 4;
var $mdgriffith$elm_ui$Internal$Style$CenterY = 5;
var $mdgriffith$elm_ui$Internal$Style$Top = 0;
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[0, 1, 2, 3, 4, 5]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eE);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bq);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bs);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.a0);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.br);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ap);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d9);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d2);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cD);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cC);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d3);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d4);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(alignment),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cc),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ej),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fY),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cy),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cd),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cy),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dY),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cx),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment) {
				case 0:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 1:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 2:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 3:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 4:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = 0;
var $mdgriffith$elm_ui$Internal$Style$Behind = 5;
var $mdgriffith$elm_ui$Internal$Style$Below = 1;
var $mdgriffith$elm_ui$Internal$Style$OnLeft = 3;
var $mdgriffith$elm_ui$Internal$Style$OnRight = 2;
var $mdgriffith$elm_ui$Internal$Style$Within = 4;
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = 0;
	var _v0 = function () {
		switch (loc) {
			case 0:
				return 0;
			case 1:
				return 0;
			case 2:
				return 0;
			case 3:
				return 0;
			case 4:
				return 0;
			default:
				return 0;
		}
	}();
	return _List_fromArray(
		[0, 1, 2, 3, 4, 5]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f0),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fa))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cy),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fS),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fc),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aO),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aO),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f0),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc) {
							case 0:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cy),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 1:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ek),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 2:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fv),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 3:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 4:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fc),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ej),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cz),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dq),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eH),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eI),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fC),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bk),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aF),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aB),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.e7, $mdgriffith$elm_ui$Internal$Style$classes.aF)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.e7, $mdgriffith$elm_ui$Internal$Style$classes.aB)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.e_, $mdgriffith$elm_ui$Internal$Style$classes.aF)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.e_, $mdgriffith$elm_ui$Internal$Style$classes.aB)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.bY, $mdgriffith$elm_ui$Internal$Style$classes.aF)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.bY, $mdgriffith$elm_ui$Internal$Style$classes.aB)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dP),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fV),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fW),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.W),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ao),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f0),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ez),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eA),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eB),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cx),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bj),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eo),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ep),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eq),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fi),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f0),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.W),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.c5),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cy),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bp),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.d8,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.d6,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d3),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.d6,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d3),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.d6,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d4),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.d6 + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.d8 + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.d6)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f2),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bD),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ao),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cW),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cy),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dY),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cx),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.d5,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.d7,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d4),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.d7,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d4),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.d7,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d4),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.d7 + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.d5 + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.d7)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bp),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f2),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cb),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 1:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 2:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 3:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 4:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dx),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.ee + ($mdgriffith$elm_ui$Internal$Style$selfName(3) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.ee))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.ee + ($mdgriffith$elm_ui$Internal$Style$selfName(2) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.ee))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fe),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fh),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f0),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fg),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ff),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cc),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ej),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dy),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f0),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fc),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ej),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ek),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fv),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.W),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ao),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cb),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gp),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gg),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gk),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gm),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gl),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.go),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.em),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gf),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gh),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fk),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f8),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gx),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gx),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f8)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gq),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gi),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bT),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ge),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gn),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gj),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.ee + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.ee + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.W) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.W) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bp) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $mdgriffith$elm_ui$Internal$Style$Intermediate = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return {bo: closing, s: _List_Nil, as: _List_Nil, X: selector};
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 0:
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								as: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.as)
							});
					case 3:
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								s: A2(
									$elm$core$List$cons,
									{bo: '\n}', s: _List_Nil, as: props, X: '@supports (' + (prop + (':' + (value + (') {' + parent.X))))},
									rendered.s)
							});
					case 5:
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								s: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.X + (' + ' + selector), ''),
										adjRules),
									rendered.s)
							});
					case 1:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								s: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.X + (' > ' + child), ''),
										childRules),
									rendered.s)
							});
					case 2:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								s: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.X + (' ' + child), ''),
										childRules),
									rendered.s)
							});
					case 4:
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								s: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.X, descriptor),
											''),
										descriptorRules),
									rendered.s)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								s: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.X, ''),
										batched),
									rendered.s)
							});
				}
			});
		return A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender);
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.as;
		if (!_v2.b) {
			return '';
		} else {
			return rule.X + ('{' + (renderValues(rule.as) + (rule.bo + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.s)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.dn;
	switch (_v0) {
		case 0:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 1:
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 0:
			return 'serif';
		case 1:
			return 'sans-serif';
		case 2:
			return 'monospace';
		case 3:
			var name = font.a;
			return '\"' + (name + '\"');
		case 4:
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.fr;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return name === 'smcp';
		case 1:
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.dR);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 1) {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo) {
				case 1:
					var _v2 = options.e7;
					switch (_v2) {
						case 0:
							return _List_Nil;
						case 2:
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 0:
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.ee + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ee) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return '\"' + (name + '\"');
		case 1:
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.dR)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 0:
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 13:
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 12:
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 2:
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 1:
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 3:
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 4:
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 5:
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.f0;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.W;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.cz + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.cD;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.dy;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.dx;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.cC;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.ao;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.ee;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 7:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 6:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 8:
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 0:
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 1:
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 1) {
										if (_v2.b.$ === 1) {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 1) {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 2:
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 1) {
										if (_v7.b.$ === 1) {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 1) {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 3:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.f3.a);
				var ySpacing = toGridLength(template.f3.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.fT)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.ac)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.ac)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.f3.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.f3.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.ac)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.fT)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.ac)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.f3.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.f3.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 9:
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.W) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.cV) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.eC) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.dW) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.W) + (' / ' + ($elm$core$String$fromInt(position.W + position.cV) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.eC) + (' / ' + ($elm$core$String$fromInt(position.eC + position.dW) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.W) + ('-' + ($elm$core$String$fromInt(position.eC) + ('-' + ($elm$core$String$fromInt(position.dW) + ('-' + $elm$core$String$fromInt(position.cV)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 11:
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((!_v12.a.$) && (!_v12.b.$)) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.gd + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.gd)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.f1, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.e1, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.f1 + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.f1))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.f1 + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.gd + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.f1 + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.gd)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {cV: height / size, bS: size, dS: vertical};
	});
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.ev, adjustment.ei, adjustment.eN, adjustment.fn]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.eN,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.ei,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.ev,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		ev: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		cU: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.cV)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.dS) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.bS) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 1) {
					if (face.$ === 5) {
						var _with = face.a;
						var _v2 = _with.d1;
						if (_v2.$ === 1) {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.cU;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.ev;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 4) {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 1) {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 1) {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					bQ: _Utils_ap(
						rendered.bQ,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					bb: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 1) {
							return rendered.bb;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.bb);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{bQ: _List_Nil, bb: _List_Nil},
			stylesheet);
		var topLevel = _v0.bb;
		var rules = _v0.bQ;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.dn;
		switch (_v0) {
			case 0:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 1:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.e_)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.e_)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 1) {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return keyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return unkeyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 0:
					return A2(createNode, 'div', attributes);
				case 1:
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.f0))
									]))
							]));
			}
		}();
		switch (parentContext) {
			case 0:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.ee, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.bp, $mdgriffith$elm_ui$Internal$Style$classes.ap, $mdgriffith$elm_ui$Internal$Style$classes.d8])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.ee, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.bp, $mdgriffith$elm_ui$Internal$Style$classes.ap, $mdgriffith$elm_ui$Internal$Style$classes.d6])))
						]),
					_List_fromArray(
						[html])) : html));
			case 1:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.ee, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.bp, $mdgriffith$elm_ui$Internal$Style$classes.d7])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.ee, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.bp, $mdgriffith$elm_ui$Internal$Style$classes.d5])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.gd + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.cx + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cd)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.ee + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.gd + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.cy + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ce)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.e8, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.f9 : _Utils_ap(styled.f9, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.e8, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.f9 : _Utils_ap(styled.f9, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.e8, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.f9 : _Utils_ap(styled.f9, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.e8, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.f9 : _Utils_ap(styled.f9, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 1) {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.f9 : _Utils_ap(rendered.f9, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.ay,
						rendered.az,
						rendered.au,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.av)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						e8: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.ay,
							rendered.az,
							rendered.au,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.av))),
						f9: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.f9 : _Utils_ap(rendered.f9, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.ay,
						rendered.az,
						rendered.au,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.av)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						e8: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.ay,
							rendered.az,
							rendered.au,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.av))),
						f9: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 3, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 10, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location) {
							case 0:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.aO, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.d0]));
							case 1:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.aO, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.ek]));
							case 2:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.aO, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.fv]));
							case 3:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.aO, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.ft]));
							case 4:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.aO, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.fc]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.aO, $mdgriffith$elm_ui$Internal$Style$classes.f0, $mdgriffith$elm_ui$Internal$Style$classes.ej]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 3:
							return $elm$virtual_dom$VirtualDom$text('');
						case 2:
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 0:
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.e8, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 0:
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 1:
				var existingBehind = existing.a;
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 2:
				var existingInFront = existing.a;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 1:
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.b_ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cC);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.b_ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cD);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.b_ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.d3);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.b$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.d9);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.b$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.d2);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.b$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.d4);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 2, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 0:
				switch (component.$) {
					case 0:
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 1:
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 2:
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 1:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 1:
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 2:
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 1:
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 2:
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 3:
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 4:
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 0:
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.cW + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.cd,
				_List_Nil);
		case 2:
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.ce,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.cX + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.ee + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.ao + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 0:
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.dX + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.cx,
				_List_Nil);
		case 2:
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.cy,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.dY + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.ee + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.W + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 3) {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 2:
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 7:
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 1) {
					return {
						au: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						av: children,
						ay: has,
						az: node,
						f9: styles
					};
				} else {
					var _class = _v1.a;
					return {
						au: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						av: children,
						ay: has,
						az: node,
						f9: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 0:
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 3:
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 1:
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 4:
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 10:
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 7:
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 0:
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.dX + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cx),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cy),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.dY + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.ee + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.W + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 8:
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 0:
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.cW + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.cd + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.ce + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.cX + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.ee + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.ao + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 2:
						var description = attribute.a;
						switch (description.$) {
							case 0:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 1:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 2:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 3:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 4:
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 9:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 8:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 5:
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 6:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 9:
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 3:
									return styles;
								case 2:
									var str = elem.a;
									return styles;
								case 0:
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.f9);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 6:
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 8, a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 1};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 7, a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.eE + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.a0)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Pages$Game$ChangeLink = function (a) {
	return {$: 14, a: a};
};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.f5;
		var description = _v0.eO;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 7:
						return true;
					case 8:
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.fa),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.eH);
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $author$project$Pages$Styles$hover_button = F4(
	function (_v0, _v1, hover, buttonAttr) {
		var w = _v0.a;
		var h = _v0.b;
		var source = _v1.a;
		var sourceHover = _v1.b;
		var newSource = hover ? sourceHover : source;
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_Utils_ap(
				buttonAttr,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(h)),
						$mdgriffith$elm_ui$Element$pointer
					])),
			{eO: 'hover_button-' + source, f5: newSource});
	});
var $author$project$Pages$Game$ButtonOver = function (a) {
	return {$: 0, a: a};
};
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 0, a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseenter',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseEnter = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseEnter);
var $elm$html$Html$Events$onMouseLeave = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseLeave = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseLeave);
var $author$project$Pages$Game$hover_events = function (id) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Events$onMouseEnter(
			$author$project$Pages$Game$ButtonOver(id)),
			$mdgriffith$elm_ui$Element$Events$onMouseLeave(
			$author$project$Pages$Game$ButtonOver(0))
		]);
};
var $mdgriffith$elm_ui$Internal$Model$InFront = 4;
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 4, element);
};
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.bV;
		var label = _v0.c2;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.br + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.ap + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.c5)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $phollyer$elm_cursor$Element$Cursor$cursor = $mdgriffith$elm_ui$Element$htmlAttribute;
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $phollyer$elm_cursor$Html$Cursor$cursor = $elm$html$Html$Attributes$style('cursor');
var $phollyer$elm_cursor$Html$Cursor$pointer = $phollyer$elm_cursor$Html$Cursor$cursor('pointer');
var $phollyer$elm_cursor$Element$Cursor$pointer = $phollyer$elm_cursor$Element$Cursor$cursor($phollyer$elm_cursor$Html$Cursor$pointer);
var $author$project$Pages$Styles$link_button = F6(
	function (_v0, link, _v1, hover, linkAttr, buttonAttr) {
		var w = _v0.a;
		var h = _v0.b;
		var source = _v1.a;
		var sourceHover = _v1.b;
		var newSource = hover ? sourceHover : source;
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_Utils_ap(
				linkAttr,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(h)),
						$phollyer$elm_cursor$Element$Cursor$pointer
					])),
			{
				c2: A2(
					$mdgriffith$elm_ui$Element$image,
					_Utils_ap(
						buttonAttr,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(w)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(h))
							])),
					{eO: 'link_button-' + link, f5: newSource}),
				bV: link
			});
	});
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveLeft = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(-x));
};
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $author$project$Pages$Game$confirm_button = F3(
	function (check, model, id) {
		var iconName = check ? '/assets/ui/icons/check.svg' : '/assets/ui/icons/cross.svg';
		var buttonSource = _Utils_Tuple2('/assets/ui/button_img_square.svg', '/assets/ui/button_img_squareH.svg');
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Game$hover_events(id),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					check ? $mdgriffith$elm_ui$Element$moveLeft(0) : $mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Game$ChangeLink($elm$core$Maybe$Nothing)),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(35)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						{eO: 'options', f5: iconName}))
				]));
		return check ? A6(
			$author$project$Pages$Styles$link_button,
			_Utils_Tuple2(65, 65),
			A2($elm$core$Maybe$withDefault, '', model.a2),
			buttonSource,
			_Utils_eq(model.f, id),
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX]),
			buttonAttr) : A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(65, 65),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$extraBold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.gf);
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.em);
var $phollyer$elm_cursor$Html$Cursor$default = $phollyer$elm_cursor$Html$Cursor$cursor('default');
var $phollyer$elm_cursor$Element$Cursor$default = $phollyer$elm_cursor$Element$Cursor$cursor($phollyer$elm_cursor$Html$Cursor$default);
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $elm$core$String$toLower = _String_toLower;
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 0:
						return 'serif';
					case 1:
						return 'sans-serif';
					case 2:
						return 'monospace';
					case 3:
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 4:
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.fr;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Element$Font$light = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.gk);
var $mdgriffith$elm_ui$Element$Font$medium = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.gl);
var $mdgriffith$elm_ui$Internal$Model$Monospace = {$: 2};
var $mdgriffith$elm_ui$Element$Font$monospace = $mdgriffith$elm_ui$Internal$Model$Monospace;
var $mdgriffith$elm_ui$Element$Font$semiBold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.go);
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 3, a: a};
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$Pages$Styles$fonts = {
	b0: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$typeface('Lucida Console')
				])),
			$mdgriffith$elm_ui$Element$Font$medium,
			$mdgriffith$elm_ui$Element$Font$center,
			$phollyer$elm_cursor$Element$Cursor$pointer
		]),
	eP: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$typeface('Arial'),
					$mdgriffith$elm_ui$Element$Font$monospace
				])),
			$mdgriffith$elm_ui$Element$Font$center,
			$mdgriffith$elm_ui$Element$Font$light,
			$phollyer$elm_cursor$Element$Cursor$default
		]),
	cS: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$typeface('Verdana')
				])),
			$mdgriffith$elm_ui$Element$Font$medium,
			$phollyer$elm_cursor$Element$Cursor$default
		]),
	b9: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$typeface('Garamond')
				])),
			$mdgriffith$elm_ui$Element$Font$bold,
			$mdgriffith$elm_ui$Element$Font$center,
			$phollyer$elm_cursor$Element$Cursor$default
		]),
	fs: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$typeface('Trebuchet MS'),
					$mdgriffith$elm_ui$Element$Font$monospace
				])),
			$mdgriffith$elm_ui$Element$Font$alignLeft,
			$mdgriffith$elm_ui$Element$Font$medium,
			$phollyer$elm_cursor$Element$Cursor$default
		]),
	cq: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$typeface('Arial')
				])),
			$phollyer$elm_cursor$Element$Cursor$default
		]),
	cr: _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$typeface('Times New Roman')
				])),
			$mdgriffith$elm_ui$Element$Font$semiBold,
			$mdgriffith$elm_ui$Element$Font$center,
			$phollyer$elm_cursor$Element$Cursor$default
		])
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 3};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 7, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 9};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 5, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$AsRow = 0;
var $mdgriffith$elm_ui$Internal$Model$asRow = 0;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.a0 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ap)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $mdgriffith$elm_ui$Element$Font$underline = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gx);
var $author$project$Pages$Game$confirm_screen = function (model) {
	var title = _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_Utils_ap(
				$author$project$Pages$Styles$fonts.b9,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Font$size(30),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.an)
					])),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Current Level Progress Will Be'),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$extraBold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.b5)
						]),
					$mdgriffith$elm_ui$Element$text(' LOST')),
					$mdgriffith$elm_ui$Element$text('!!!')
				])),
			A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_Utils_ap(
				$author$project$Pages$Styles$fonts.b9,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Font$size(26),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.an)
					])),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Do you Still Want To '),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$extraBold, $mdgriffith$elm_ui$Element$Font$underline]),
					$mdgriffith$elm_ui$Element$text('EXIT')),
					$mdgriffith$elm_ui$Element$text(' Level?')
				]))
		]);
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(model.aN.a + 410)),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$behindContent(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.cg),
							$mdgriffith$elm_ui$Element$alpha(0.5)
						]),
					$mdgriffith$elm_ui$Element$none))
			]),
		A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(320)),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								A2($mdgriffith$elm_ui$Element$paddingXY, 100, 30),
								$mdgriffith$elm_ui$Element$spacing(25)
							]),
						_Utils_ap(
							title,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$spacing(100),
											$mdgriffith$elm_ui$Element$moveUp(25)
										]),
									_List_fromArray(
										[
											A3($author$project$Pages$Game$confirm_button, true, model, 4),
											A3($author$project$Pages$Game$confirm_button, false, model, 5)
										]))
								]))))
				]),
			{eO: 'panel_pause', f5: '/assets/ui/panel_confirm.svg'}));
};
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm_explorations$webgl$WebGL$Internal$Alpha = function (a) {
	return {$: 0, a: a};
};
var $elm_explorations$webgl$WebGL$alpha = $elm_explorations$webgl$WebGL$Internal$Alpha;
var $elm_explorations$webgl$WebGL$Internal$Antialias = {$: 3};
var $elm_explorations$webgl$WebGL$antialias = $elm_explorations$webgl$WebGL$Internal$Antialias;
var $elm_explorations$webgl$WebGL$Internal$Depth = function (a) {
	return {$: 1, a: a};
};
var $elm_explorations$webgl$WebGL$depth = $elm_explorations$webgl$WebGL$Internal$Depth;
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $elm_explorations$webgl$WebGL$Internal$enableOption = F2(
	function (ctx, option) {
		switch (option.$) {
			case 0:
				return A2(_WebGL_enableAlpha, ctx, option);
			case 1:
				return A2(_WebGL_enableDepth, ctx, option);
			case 2:
				return A2(_WebGL_enableStencil, ctx, option);
			case 3:
				return A2(_WebGL_enableAntialias, ctx, option);
			case 4:
				return A2(_WebGL_enableClearColor, ctx, option);
			default:
				return A2(_WebGL_enablePreserveDrawingBuffer, ctx, option);
		}
	});
var $elm_explorations$webgl$WebGL$Internal$enableSetting = F2(
	function (cache, setting) {
		switch (setting.$) {
			case 0:
				return A2(_WebGL_enableBlend, cache, setting);
			case 1:
				return A2(_WebGL_enableDepthTest, cache, setting);
			case 2:
				return A2(_WebGL_enableStencilTest, cache, setting);
			case 3:
				return A2(_WebGL_enableScissor, cache, setting);
			case 4:
				return A2(_WebGL_enableColorMask, cache, setting);
			case 5:
				return A2(_WebGL_enableCullFace, cache, setting);
			case 6:
				return A2(_WebGL_enablePolygonOffset, cache, setting);
			case 7:
				return A2(_WebGL_enableSampleCoverage, cache, setting);
			default:
				return _WebGL_enableSampleAlphaToCoverage(cache);
		}
	});
var $elm_explorations$webgl$WebGL$toHtmlWith = F3(
	function (options, attributes, entities) {
		return A3(_WebGL_toHtml, options, attributes, entities);
	});
var $Zinggi$elm_2d_game$Game$TwoD$Render$toWebGl = F4(
	function (time, camera, screenSize, _v0) {
		var f = _v0;
		return f(
			{a_: camera, aE: screenSize, gu: time});
	});
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $Zinggi$elm_2d_game$Game$TwoD$renderWithOptions = F3(
	function (attributes, _v0, objects) {
		var time = _v0.gu;
		var size = _v0.bS;
		var camera = _v0.a_;
		var _v1 = size;
		var w = _v1.a;
		var h = _v1.b;
		var _v2 = _Utils_Tuple2(w, h);
		var wf = _v2.a;
		var hf = _v2.b;
		return A3(
			$elm_explorations$webgl$WebGL$toHtmlWith,
			_List_fromArray(
				[
					$elm_explorations$webgl$WebGL$alpha(false),
					$elm_explorations$webgl$WebGL$depth(1),
					$elm_explorations$webgl$WebGL$antialias
				]),
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$width(w),
						$elm$html$Html$Attributes$height(h)
					]),
				attributes),
			A2(
				$elm$core$List$map,
				A3(
					$Zinggi$elm_2d_game$Game$TwoD$Render$toWebGl,
					time,
					camera,
					_Utils_Tuple2(wf, hf)),
				objects));
	});
var $Zinggi$elm_game_resources$Game$Resources$getTexture = F2(
	function (url, _v0) {
		var res = _v0;
		return A2($elm$core$Dict$get, url, res);
	});
var $author$project$Game$Enemies$healthbarLayer = 0.0001;
var $author$project$Game$Enemies$heathbarOffset = 0.05;
var $Zinggi$elm_2d_game$Game$TwoD$Render$Rectangle = 0;
var $Zinggi$elm_2d_game$Game$TwoD$Shaders$fragTextured = {
	src: '\n\nprecision mediump float;\n\nuniform sampler2D texture;\nuniform vec2 tileWH;\nvarying vec2 vcoord;\n\nvoid main () {\n    gl_FragColor = texture2D(texture, vcoord*tileWH);\n}\n',
	attributes: {},
	uniforms: {texture: 'v', tileWH: 'a8'}
};
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$grey = A4($avh4$elm_color$Color$RgbaSpace, 211 / 255, 215 / 255, 207 / 255, 1.0);
var $elm_explorations$linear_algebra$Math$Matrix4$makeRotate = _MJS_m4x4makeRotate;
var $elm_explorations$linear_algebra$Math$Matrix4$makeScale = _MJS_m4x4makeScale;
var $elm_explorations$linear_algebra$Math$Matrix4$makeTranslate = _MJS_m4x4makeTranslate;
var $elm_explorations$linear_algebra$Math$Matrix4$mul = _MJS_m4x4mul;
var $elm_explorations$linear_algebra$Math$Vector3$vec3 = _MJS_v3;
var $Zinggi$elm_2d_game$Game$TwoD$Shaders$makeTransform = F4(
	function (_v0, rotation, _v1, _v2) {
		var x = _v0.a;
		var y = _v0.b;
		var z = _v0.c;
		var w = _v1.a;
		var h = _v1.b;
		var px = _v2.a;
		var py = _v2.b;
		var trans = $elm_explorations$linear_algebra$Math$Matrix4$makeTranslate(
			A3($elm_explorations$linear_algebra$Math$Vector3$vec3, x, y, z));
		var scale = $elm_explorations$linear_algebra$Math$Matrix4$makeScale(
			A3($elm_explorations$linear_algebra$Math$Vector3$vec3, w, h, 1));
		var rot = A2(
			$elm_explorations$linear_algebra$Math$Matrix4$makeRotate,
			rotation,
			A3($elm_explorations$linear_algebra$Math$Vector3$vec3, 0, 0, 1));
		var pivot = $elm_explorations$linear_algebra$Math$Matrix4$makeTranslate(
			A3($elm_explorations$linear_algebra$Math$Vector3$vec3, -px, -py, 0));
		return A2(
			$elm_explorations$linear_algebra$Math$Matrix4$mul,
			A2(
				$elm_explorations$linear_algebra$Math$Matrix4$mul,
				A2($elm_explorations$linear_algebra$Math$Matrix4$mul, trans, rot),
				scale),
			pivot);
	});
var $elm_explorations$webgl$WebGL$Internal$Blend = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {$: 0, a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h, i: i, j: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm_explorations$webgl$WebGL$Settings$Blend$custom = function (_v0) {
	var r = _v0.fO;
	var g = _v0.e2;
	var b = _v0.eg;
	var a = _v0.d$;
	var color = _v0.J;
	var alpha = _v0.eb;
	var expand = F2(
		function (_v1, _v2) {
			var eq1 = _v1.a;
			var f11 = _v1.b;
			var f12 = _v1.c;
			var eq2 = _v2.a;
			var f21 = _v2.b;
			var f22 = _v2.c;
			return $elm_explorations$webgl$WebGL$Internal$Blend(eq1)(f11)(f12)(eq2)(f21)(f22)(r)(g)(b)(a);
		});
	return A2(expand, color, alpha);
};
var $elm_explorations$webgl$WebGL$Settings$Blend$Blender = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm_explorations$webgl$WebGL$Settings$Blend$customAdd = F2(
	function (_v0, _v1) {
		var factor1 = _v0;
		var factor2 = _v1;
		return A3($elm_explorations$webgl$WebGL$Settings$Blend$Blender, 32774, factor1, factor2);
	});
var $elm_explorations$webgl$WebGL$Internal$DepthTest = F4(
	function (a, b, c, d) {
		return {$: 1, a: a, b: b, c: c, d: d};
	});
var $elm_explorations$webgl$WebGL$Settings$DepthTest$less = function (_v0) {
	var write = _v0._;
	var near = _v0.T;
	var far = _v0.P;
	return A4($elm_explorations$webgl$WebGL$Internal$DepthTest, 513, write, near, far);
};
var $elm_explorations$webgl$WebGL$Settings$DepthTest$default = $elm_explorations$webgl$WebGL$Settings$DepthTest$less(
	{P: 1, T: 0, _: true});
var $elm_explorations$webgl$WebGL$entityWith = _WebGL_entity;
var $elm_explorations$webgl$WebGL$Settings$Blend$Factor = $elm$core$Basics$identity;
var $elm_explorations$webgl$WebGL$Settings$Blend$one = 1;
var $elm_explorations$webgl$WebGL$Settings$Blend$oneMinusSrcAlpha = 771;
var $elm_explorations$webgl$WebGL$Settings$Blend$srcAlpha = 770;
var $Zinggi$elm_2d_game$Game$TwoD$Render$renderTransparent = $elm_explorations$webgl$WebGL$entityWith(
	_List_fromArray(
		[
			$elm_explorations$webgl$WebGL$Settings$Blend$custom(
			{
				d$: 0,
				eb: A2($elm_explorations$webgl$WebGL$Settings$Blend$customAdd, $elm_explorations$webgl$WebGL$Settings$Blend$one, $elm_explorations$webgl$WebGL$Settings$Blend$oneMinusSrcAlpha),
				eg: 0,
				J: A2($elm_explorations$webgl$WebGL$Settings$Blend$customAdd, $elm_explorations$webgl$WebGL$Settings$Blend$srcAlpha, $elm_explorations$webgl$WebGL$Settings$Blend$oneMinusSrcAlpha),
				e2: 0,
				fO: 0
			}),
			$elm_explorations$webgl$WebGL$Settings$DepthTest$default
		]));
var $Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex = function (position) {
	return {bO: position};
};
var $elm_explorations$webgl$WebGL$Mesh3 = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $elm_explorations$webgl$WebGL$triangles = $elm_explorations$webgl$WebGL$Mesh3(
	{cN: 3, c$: 0, dn: 4});
var $elm_explorations$linear_algebra$Math$Vector2$vec2 = _MJS_v2;
var $Zinggi$elm_2d_game$Game$TwoD$Shapes$unitSquare = $elm_explorations$webgl$WebGL$triangles(
	_List_fromArray(
		[
			_Utils_Tuple3(
			$Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex(
				A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, 0)),
			$Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex(
				A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, 1)),
			$Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex(
				A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, 0))),
			_Utils_Tuple3(
			$Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex(
				A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, 1)),
			$Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex(
				A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, 0)),
			$Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex(
				A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, 1)))
		]));
var $Zinggi$elm_2d_game$Game$TwoD$Shaders$vertTexturedRect = {
	src: '\nattribute vec2 position;\n\nuniform mat4 transform;\nuniform mat4 cameraProj;\n\nvarying vec2 vcoord;\nvoid main () {\n    vec4 pos = cameraProj*transform*vec4(position, 0, 1);\n    gl_Position = pos;\n    vcoord = position.xy;\n}\n',
	attributes: {position: 'bO'},
	uniforms: {cameraProj: 'a$', transform: 'bc'}
};
var $Zinggi$elm_2d_game$Game$TwoD$Render$rectWithFragment = F2(
	function (frag, uniforms) {
		return A4($Zinggi$elm_2d_game$Game$TwoD$Render$renderTransparent, $Zinggi$elm_2d_game$Game$TwoD$Shaders$vertTexturedRect, frag, $Zinggi$elm_2d_game$Game$TwoD$Shapes$unitSquare, uniforms);
	});
var $avh4$elm_color$Color$toRgba = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {eb: a, el: b, e3: g, dF: r};
};
var $Zinggi$elm_2d_game$Game$TwoD$Shaders$colorToRGBVector = function (color) {
	var _v0 = $avh4$elm_color$Color$toRgba(color);
	var red = _v0.dF;
	var green = _v0.e3;
	var blue = _v0.el;
	return A3($elm_explorations$linear_algebra$Math$Vector3$vec3, red, green, blue);
};
var $Zinggi$elm_2d_game$Game$TwoD$Shaders$fragUniColor = {
	src: '\n\nprecision mediump float;\n\nuniform vec3 color;\nvarying vec2 vcoord;\n\nvoid main() {\n    gl_FragColor = vec4(color, 1);\n}\n',
	attributes: {},
	uniforms: {color: 'J'}
};
var $Zinggi$elm_2d_game$Game$TwoD$Shaders$fragUniColorCircle = {
	src: '\n\nprecision mediump float;\n\nuniform vec3 color;\nvarying vec2 vcoord;\n\nvoid main () {\n  float dist = length(vec2(0.5, 0.5) - vcoord);\n\n  float alpha = 1.0 - smoothstep(0.5 - 0.01, 0.5, dist);\n  vec4 color = vec4(color, alpha);\n\n  if (alpha <= 0.01) {\n      discard;\n  }\n\n  gl_FragColor = color;\n}\n',
	attributes: {},
	uniforms: {color: 'J'}
};
var $Zinggi$elm_2d_game$Game$TwoD$Shaders$fragUniColorRing = {
	src: '\n\nprecision mediump float;\n\nuniform vec3 color;\nvarying vec2 vcoord;\n\nvoid main () {\n  float dist = length(vec2(0.5, 0.5) - vcoord);\n\n  float alpha = smoothstep(0.5, 0.5 - 0.01, dist) * smoothstep(0.49 - 0.01, 0.49, dist);\n  vec4 color = vec4(color, alpha);\n\n  if (alpha <= 0.01) {\n      discard;\n  }\n\n  gl_FragColor = color;\n}\n',
	attributes: {},
	uniforms: {color: 'J'}
};
var $Zinggi$elm_2d_game$Game$TwoD$Shapes$unitTriangle = $elm_explorations$webgl$WebGL$triangles(
	_List_fromArray(
		[
			_Utils_Tuple3(
			$Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex(
				A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, 0)),
			$Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex(
				A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 0, 1)),
			$Zinggi$elm_2d_game$Game$TwoD$Shapes$Vertex(
				A2($elm_explorations$linear_algebra$Math$Vector2$vec2, 1, 0)))
		]));
var $Zinggi$elm_2d_game$Game$TwoD$Shaders$vertColoredShape = {
	src: '\nattribute vec2 position;\n\nuniform mat4 transform;\nuniform mat4 cameraProj;\nvarying vec2 vcoord;\nvoid main() {\n    gl_Position = cameraProj*transform*vec4(position, 0, 1);\n    vcoord = position.xy;\n}\n',
	attributes: {position: 'bO'},
	uniforms: {cameraProj: 'a$', transform: 'bc'}
};
var $Zinggi$elm_2d_game$Game$TwoD$Render$Renderable = $elm$core$Basics$identity;
var $Zinggi$elm_2d_game$Game$TwoD$Render$veryCustom = $elm$core$Basics$identity;
var $elm_explorations$linear_algebra$Math$Matrix4$makeOrtho2D = _MJS_m4x4makeOrtho2D;
var $Zinggi$elm_2d_game$Game$Helpers$scale = F2(
	function (a, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(a * x, a * y);
	});
var $Zinggi$elm_2d_game$Game$TwoD$Camera$view = F2(
	function (camera, size) {
		var position = camera.bO;
		var _v0 = position;
		var x = _v0.a;
		var y = _v0.b;
		var _v1 = A2(
			$Zinggi$elm_2d_game$Game$Helpers$scale,
			0.5,
			A2($Zinggi$elm_2d_game$Game$TwoD$Camera$getViewSize, size, camera));
		var w = _v1.a;
		var h = _v1.b;
		var _v2 = _Utils_Tuple2(
			_Utils_Tuple2(x - w, x + w),
			_Utils_Tuple2(y - h, y + h));
		var _v3 = _v2.a;
		var l = _v3.a;
		var r = _v3.b;
		var _v4 = _v2.b;
		var d = _v4.a;
		var u = _v4.b;
		return A4($elm_explorations$linear_algebra$Math$Matrix4$makeOrtho2D, l, r, d, u);
	});
var $Zinggi$elm_2d_game$Game$TwoD$Render$shapeWithOptions = F2(
	function (theShape, _v0) {
		var color = _v0.J;
		var rotation = _v0.c;
		var position = _v0.bO;
		var size = _v0.bS;
		var pivot = _v0.bN;
		var _v1 = function () {
			switch (theShape) {
				case 0:
					return _Utils_Tuple2($Zinggi$elm_2d_game$Game$TwoD$Shaders$fragUniColor, $Zinggi$elm_2d_game$Game$TwoD$Shapes$unitSquare);
				case 1:
					return _Utils_Tuple2($Zinggi$elm_2d_game$Game$TwoD$Shaders$fragUniColor, $Zinggi$elm_2d_game$Game$TwoD$Shapes$unitTriangle);
				case 2:
					return _Utils_Tuple2($Zinggi$elm_2d_game$Game$TwoD$Shaders$fragUniColorCircle, $Zinggi$elm_2d_game$Game$TwoD$Shapes$unitSquare);
				default:
					return _Utils_Tuple2($Zinggi$elm_2d_game$Game$TwoD$Shaders$fragUniColorRing, $Zinggi$elm_2d_game$Game$TwoD$Shapes$unitSquare);
			}
		}();
		var frag = _v1.a;
		var attribs = _v1.b;
		return $Zinggi$elm_2d_game$Game$TwoD$Render$veryCustom(
			function (_v3) {
				var camera = _v3.a_;
				var screenSize = _v3.aE;
				return A4(
					$Zinggi$elm_2d_game$Game$TwoD$Render$renderTransparent,
					$Zinggi$elm_2d_game$Game$TwoD$Shaders$vertColoredShape,
					frag,
					attribs,
					{
						a$: A2($Zinggi$elm_2d_game$Game$TwoD$Camera$view, camera, screenSize),
						J: $Zinggi$elm_2d_game$Game$TwoD$Shaders$colorToRGBVector(color),
						bc: A4($Zinggi$elm_2d_game$Game$TwoD$Shaders$makeTransform, position, rotation, size, pivot)
					});
			});
	});
var $Zinggi$elm_2d_game$Game$TwoD$Render$shapeZ = F2(
	function (theShape, _v0) {
		var color = _v0.J;
		var position = _v0.bO;
		var size = _v0.bS;
		return A2(
			$Zinggi$elm_2d_game$Game$TwoD$Render$shapeWithOptions,
			theShape,
			{
				J: color,
				bN: _Utils_Tuple2(0, 0),
				bO: position,
				c: 0,
				bS: size
			});
	});
var $Zinggi$elm_2d_game$Game$Helpers$v2FromTuple = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return A2($elm_explorations$linear_algebra$Math$Vector2$vec2, x, y);
};
var $Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions = function (args) {
	var texture = args.v;
	var position = args.bO;
	var size = args.bS;
	var tiling = args.bU;
	var rotation = args.c;
	var pivot = args.bN;
	if (!texture.$) {
		var t = texture.a;
		return $Zinggi$elm_2d_game$Game$TwoD$Render$veryCustom(
			function (_v1) {
				var camera = _v1.a_;
				var screenSize = _v1.aE;
				return A2(
					$Zinggi$elm_2d_game$Game$TwoD$Render$rectWithFragment,
					$Zinggi$elm_2d_game$Game$TwoD$Shaders$fragTextured,
					{
						a$: A2($Zinggi$elm_2d_game$Game$TwoD$Camera$view, camera, screenSize),
						v: t,
						a8: $Zinggi$elm_2d_game$Game$Helpers$v2FromTuple(tiling),
						bc: A4($Zinggi$elm_2d_game$Game$TwoD$Shaders$makeTransform, position, rotation, size, pivot)
					});
			});
	} else {
		return A2(
			$Zinggi$elm_2d_game$Game$TwoD$Render$shapeZ,
			0,
			{J: $avh4$elm_color$Color$grey, bO: position, bS: size});
	}
};
var $author$project$Game$Enemies$render_enemy_health = F3(
	function (enemy, res, barWidth) {
		var missingHealth = 1 - (enemy.h / enemy.G);
		var redBarWidth = barWidth * missingHealth;
		var redBarOffset = (barWidth / 2) - (redBarWidth / 2);
		var redBar = $Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions(
			{
				bN: _Utils_Tuple2(0.5, 0.5),
				bO: _Utils_Tuple3(enemy.cn.a + redBarOffset, (enemy.cn.b + enemy.H) + $author$project$Game$Enemies$heathbarOffset, enemy.r + ($author$project$Game$Enemies$healthbarLayer * 2)),
				c: 0,
				bS: _Utils_Tuple2(redBarWidth, $author$project$Game$Enemies$heathbarHeight),
				v: A2($Zinggi$elm_game_resources$Game$Resources$getTexture, '/assets/ui/map/healthbar-red.png', res),
				bU: _Utils_Tuple2(1, 1)
			});
		var greenBar = $Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions(
			{
				bN: _Utils_Tuple2(0.5, 0.5),
				bO: _Utils_Tuple3(enemy.cn.a, (enemy.cn.b + enemy.H) + $author$project$Game$Enemies$heathbarOffset, enemy.r + $author$project$Game$Enemies$healthbarLayer),
				c: 0,
				bS: _Utils_Tuple2(barWidth, $author$project$Game$Enemies$heathbarHeight),
				v: A2($Zinggi$elm_game_resources$Game$Resources$getTexture, '/assets/ui/map/healthbar-green.png', res),
				bU: _Utils_Tuple2(1, 1)
			});
		return _List_fromArray(
			[greenBar, redBar]);
	});
var $author$project$Game$Enemies$render_enemy = F3(
	function (enemy, res, showHPbar) {
		var enemySize = A2($elm$core$Basics$max, enemy.w.a, enemy.w.b);
		return A2(
			$elm$core$List$cons,
			$Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions(
				{
					bN: _Utils_Tuple2(0.5, 0.5),
					bO: _Utils_Tuple3(enemy.cn.a, enemy.cn.b, enemy.r),
					c: -enemy.c,
					bS: _Utils_Tuple2(enemySize, enemySize),
					v: A2($Zinggi$elm_game_resources$Game$Resources$getTexture, enemy.v, res),
					bU: _Utils_Tuple2(1, 1)
				}),
			showHPbar ? A3($author$project$Game$Enemies$render_enemy_health, enemy, res, enemySize) : _List_Nil);
	});
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Game$Enemies$render_all_enemies = F3(
	function (enemies, showHPbar, res) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (o) {
					return A3($author$project$Game$Enemies$render_enemy, o, res, showHPbar);
				},
				A2(
					$elm$core$List$sortBy,
					function ($) {
						return $.r;
					},
					enemies)));
	});
var $author$project$Game$Projectiles$render_projectile = F2(
	function (projectile, res) {
		var newSize = A2($elm$core$Basics$max, projectile.w.a, projectile.w.b);
		return _List_fromArray(
			[
				$Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions(
				{
					bN: _Utils_Tuple2(0.5, 0.5),
					bO: _Utils_Tuple3(projectile.cn.a, projectile.cn.b, projectile.r),
					c: -projectile.c,
					bS: _Utils_Tuple2(newSize, newSize),
					v: A2($Zinggi$elm_game_resources$Game$Resources$getTexture, projectile.v, res),
					bU: _Utils_Tuple2(1, 1)
				})
			]);
	});
var $author$project$Game$Projectiles$render_all_projectiles = F2(
	function (projectiles, res) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (o) {
					return A2($author$project$Game$Projectiles$render_projectile, o, res);
				},
				A2(
					$elm$core$List$sortBy,
					function ($) {
						return $.r;
					},
					projectiles)));
	});
var $author$project$Game$Tiles$obstacleLayer = -0.98;
var $author$project$Game$Tiles$render_flag = F2(
	function (_v0, res) {
		var x = _v0.a;
		var y = _v0.b;
		return $Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions(
			{
				bN: _Utils_Tuple2(0, 0),
				bO: _Utils_Tuple3(x, y, $author$project$Game$Tiles$obstacleLayer),
				c: 0,
				bS: _Utils_Tuple2(0.8, 0.8),
				v: A2($Zinggi$elm_game_resources$Game$Resources$getTexture, '/assets/ui/map/road-flag.png', res),
				bU: _Utils_Tuple2(1, 1)
			});
	});
var $author$project$Game$Tiles$groundLayer = -0.99;
var $author$project$Game$Tiles$render_ground = F2(
	function (tile, res) {
		return $Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions(
			{
				bN: _Utils_Tuple2(0, 0),
				bO: _Utils_Tuple3(tile.cn.a, tile.cn.b, $author$project$Game$Tiles$groundLayer),
				c: 0,
				bS: _Utils_Tuple2(1, 1),
				v: A2($Zinggi$elm_game_resources$Game$Resources$getTexture, tile.v, res),
				bU: _Utils_Tuple2(1, 1)
			});
	});
var $author$project$Game$Tiles$render_obstacle = F2(
	function (tile, res) {
		var _v0 = tile.O;
		if (_v0.$ === 1) {
			var obs = _v0.a;
			if (!obs.$) {
				var o = obs.a;
				return $elm$core$Maybe$Just(
					$Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions(
						{
							bN: _Utils_Tuple2(0.5, 0.5),
							bO: _Utils_Tuple3(o.cn.a, o.cn.b, $author$project$Game$Tiles$obstacleLayer),
							c: -o.c,
							bS: _Utils_Tuple2(o.bS, o.bS),
							v: A2($Zinggi$elm_game_resources$Game$Resources$getTexture, o.v, res),
							bU: _Utils_Tuple2(1, 1)
						}));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Game$Tiles$render_all_tiles = F3(
	function (tiles, flagPos, res) {
		return _Utils_ap(
			A2(
				$elm$core$List$map,
				function (o) {
					return A2($author$project$Game$Tiles$render_ground, o, res);
				},
				tiles),
			_Utils_ap(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					A2(
						$elm$core$List$map,
						function (o) {
							return A2($author$project$Game$Tiles$render_obstacle, o, res);
						},
						tiles)),
				_List_fromArray(
					[
						A2($author$project$Game$Tiles$render_flag, flagPos, res)
					])));
	});
var $author$project$Game$Towers$towerBaseLayer = -0.97;
var $author$project$Game$Towers$towerBaseSize = 0.85;
var $author$project$Game$Towers$render_base = F2(
	function (tower, res) {
		return $Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions(
			{
				bN: _Utils_Tuple2(0.5, 0.5),
				bO: _Utils_Tuple3(tower.cn.a + 0.5, tower.cn.b + 0.5, $author$project$Game$Towers$towerBaseLayer),
				c: 0,
				bS: _Utils_Tuple2($author$project$Game$Towers$towerBaseSize, $author$project$Game$Towers$towerBaseSize),
				v: A2($Zinggi$elm_game_resources$Game$Resources$getTexture, tower.aU, res),
				bU: _Utils_Tuple2(1, 1)
			});
	});
var $author$project$Game$Towers$towerBodyLayer = -0.96;
var $author$project$Game$Towers$render_body = F2(
	function (tower, res) {
		return $Zinggi$elm_2d_game$Game$TwoD$Render$spriteWithOptions(
			{
				bN: _Utils_Tuple2(0.5, 0.5 - tower.I),
				bO: _Utils_Tuple3(tower.cn.a + 0.5, tower.cn.b + 0.5, $author$project$Game$Towers$towerBodyLayer),
				c: -tower.c,
				bS: _Utils_Tuple2(tower.bS, tower.bS),
				v: A2($Zinggi$elm_game_resources$Game$Resources$getTexture, tower.x, res),
				bU: _Utils_Tuple2(1, 1)
			});
	});
var $author$project$Game$Towers$render_all_towers = F2(
	function (towers, res) {
		return _Utils_ap(
			A2(
				$elm$core$List$map,
				function (o) {
					return A2($author$project$Game$Towers$render_base, o, res);
				},
				towers),
			A2(
				$elm$core$List$map,
				function (o) {
					return A2($author$project$Game$Towers$render_body, o, res);
				},
				towers));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$Game$Playboard$draw_board = F3(
	function (b, res, showHPbar) {
		var allEntities = _Utils_ap(
			A3(
				$author$project$Game$Tiles$render_all_tiles,
				$elm$core$Dict$values(b.cb),
				b.ca,
				res),
			_Utils_ap(
				A2($author$project$Game$Towers$render_all_towers, b.bh, res),
				_Utils_ap(
					A3($author$project$Game$Enemies$render_all_enemies, b.ea, showHPbar, res),
					A2($author$project$Game$Projectiles$render_all_projectiles, b.al, res))));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('playboard')
				]),
			_List_fromArray(
				[
					A3(
					$Zinggi$elm_2d_game$Game$TwoD$renderWithOptions,
					_List_Nil,
					{
						a_: b.a_,
						bS: _Utils_Tuple2(
							b.aV * $author$project$Game$Playboard$get_col(b),
							b.aV * $author$project$Game$Playboard$get_row(b)),
						gu: 0
					},
					allEntities)
				]));
	});
var $author$project$Game$Level$get_wave_number = function (level) {
	var _v0 = level.ad;
	if (_v0.$ === 1) {
		return 0;
	} else {
		var w = _v0.a;
		return w.dV;
	}
};
var $mdgriffith$elm_ui$Internal$Model$formatTextShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		_List_fromArray(
			[
				$elm$core$String$fromFloat(shadow.u.a) + 'px',
				$elm$core$String$fromFloat(shadow.u.b) + 'px',
				$elm$core$String$fromFloat(shadow.aI) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.J)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				'txt',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.u.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.u.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.aI) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.J)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$txtShadows = $mdgriffith$elm_ui$Internal$Flag$flag(18);
var $mdgriffith$elm_ui$Element$Font$glow = F2(
	function (clr, i) {
		var shade = {
			aI: i * 2,
			J: clr,
			u: _Utils_Tuple2(0, 0)
		};
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$txtShadows,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				$mdgriffith$elm_ui$Internal$Model$textShadowClass(shade),
				'text-shadow',
				$mdgriffith$elm_ui$Internal$Model$formatTextShadow(shade)));
	});
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $mdgriffith$elm_ui$Internal$Model$Above = 0;
var $mdgriffith$elm_ui$Element$above = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 0, element);
};
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 6, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $author$project$Pages$Game$description_text = F2(
	function (offset, description) {
		return $mdgriffith$elm_ui$Element$above(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					$author$project$Pages$Styles$fonts.eP,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(20)),
							$mdgriffith$elm_ui$Element$moveRight(offset),
							$mdgriffith$elm_ui$Element$Font$size(16),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.bX),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$alpha(0.6),
							$mdgriffith$elm_ui$Element$Events$onMouseEnter(
							$author$project$Pages$Game$ButtonOver(0))
						])),
				$mdgriffith$elm_ui$Element$text(' ' + (description + ' '))));
	});
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $author$project$Pages$Game$icon_label_description = F6(
	function (_v0, icon, _v1, model, id, listAttr) {
		var w = _v0.a;
		var h = _v0.b;
		var label = _v1.a;
		var description = _v1.b;
		var halfHeight = ((h / 2) | 0) + 6;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(w)),
					A2($mdgriffith$elm_ui$Element$spacingXY, (w / 20) | 0, 0)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_Utils_ap(
						$author$project$Pages$Game$hover_events(id),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(halfHeight)),
								$mdgriffith$elm_ui$Element$centerY,
								(model.aj && _Utils_eq(id, model.f)) ? A2($author$project$Pages$Game$description_text, halfHeight, description) : $mdgriffith$elm_ui$Element$above($mdgriffith$elm_ui$Element$none)
							])),
					{eO: icon, f5: '/assets/ui/icons/' + icon}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.fs,
						_Utils_ap(
							listAttr,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(halfHeight)),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$Font$size(halfHeight),
									$mdgriffith$elm_ui$Element$centerY
								]))),
					$mdgriffith$elm_ui$Element$text(label))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = 1;
var $mdgriffith$elm_ui$Internal$Model$Layout = 0;
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	eh: $elm$core$Maybe$Nothing,
	en: $elm$core$Maybe$Nothing,
	f_: $elm$core$Maybe$Just(
		{
			aI: 0,
			J: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			u: _Utils_Tuple2(0, 0),
			bS: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 0:
					var hoverable = opt.a;
					var _v4 = record.e7;
					if (_v4.$ === 1) {
						return _Utils_update(
							record,
							{
								e7: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 1:
					var focusStyle = opt.a;
					var _v5 = record.e_;
					if (_v5.$ === 1) {
						return _Utils_update(
							record,
							{
								e_: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.dn;
					if (_v6.$ === 1) {
						return _Utils_update(
							record,
							{
								dn: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			e_: function () {
				var _v0 = record.e_;
				if (_v0.$ === 1) {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			e7: function () {
				var _v1 = record.e7;
				if (_v1.$ === 1) {
					return 1;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			dn: function () {
				var _v2 = record.dn;
				if (_v2.$ === 1) {
					return 0;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{e_: $elm$core$Maybe$Nothing, e7: $elm$core$Maybe$Nothing, dn: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 0:
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 1:
				var styles = el.a.f9;
				var html = el.a.e8;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 2:
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.dn;
			if (_v0 === 1) {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.dv;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.fS, $mdgriffith$elm_ui$Internal$Style$classes.ee, $mdgriffith$elm_ui$Internal$Style$classes.f0]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $mdgriffith$elm_ui$Element$layout = $mdgriffith$elm_ui$Element$layoutWith(
	{dv: _List_Nil});
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions = {co: true, cv: false};
var $elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 3, a: a};
};
var $elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event = F6(
	function (keys, button, clientPos, offsetPos, pagePos, screenPos) {
		return {es: button, ey: clientPos, fl: keys, cl: offsetPos, fB: pagePos, fU: screenPos};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$BackButton = 4;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ErrorButton = 0;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ForwardButton = 5;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MainButton = 1;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MiddleButton = 2;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton = 3;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId = function (id) {
	switch (id) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		default:
			return 0;
	}
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder = A2(
	$elm$json$Json$Decode$map,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId,
	A2($elm$json$Json$Decode$field, 'button', $elm$json$Json$Decode$int));
var $mpizenberg$elm_pointer_events$Internal$Decode$clientPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'clientX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'clientY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$Keys = F3(
	function (alt, ctrl, shift) {
		return {ec: alt, eG: ctrl, f$: shift};
	});
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $mpizenberg$elm_pointer_events$Internal$Decode$keys = A4(
	$elm$json$Json$Decode$map3,
	$mpizenberg$elm_pointer_events$Internal$Decode$Keys,
	A2($elm$json$Json$Decode$field, 'altKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'ctrlKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'shiftKey', $elm$json$Json$Decode$bool));
var $elm$json$Json$Decode$map6 = _Json_map6;
var $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'offsetX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'offsetY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$pagePos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$screenPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'screenX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'screenY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder = A7($elm$json$Json$Decode$map6, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event, $mpizenberg$elm_pointer_events$Internal$Decode$keys, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder, $mpizenberg$elm_pointer_events$Internal$Decode$clientPos, $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos, $mpizenberg$elm_pointer_events$Internal$Decode$pagePos, $mpizenberg$elm_pointer_events$Internal$Decode$screenPos);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions = F3(
	function (event, options, tag) {
		return A2(
			$elm$html$Html$Events$custom,
			event,
			A2(
				$elm$json$Json$Decode$map,
				function (ev) {
					return {
						ci: tag(ev),
						co: options.co,
						cv: options.cv
					};
				},
				$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder));
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'click', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onEnter = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'mouseenter', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'mousemove', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onOut = A2($mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onWithOptions, 'mouseout', $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$defaultOptions);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.ak;
	var right = _v0.ai;
	var bottom = _v0.ab;
	var left = _v0.af;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $author$project$Pages$Game$PauseLevel = {$: 11};
var $author$project$Pages$Game$pause_button = F2(
	function (model, id) {
		var buttonSource = _Utils_Tuple2('/assets/ui/button_img_brown.svg', '/assets/ui/button_img_brownH.svg');
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Game$hover_events(id),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveUp(3),
					$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Game$PauseLevel),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(25)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						{eO: 'options', f5: '/assets/ui/icons/options.svg'}))
				]));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(35, 35),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Pages$Game$exit_button = F5(
	function (_v0, link, label, model, id) {
		var w = _v0.a;
		var h = _v0.b;
		var buttonSource = _Utils_Tuple2('/assets/ui/button_green.png', '/assets/ui/button_greenH.png');
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Game$hover_events(id),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Game$ChangeLink(
						$elm$core$Maybe$Just(link))),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							$author$project$Pages$Styles$fonts.b0,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$size(20),
									$mdgriffith$elm_ui$Element$Font$semiBold
								])),
						$mdgriffith$elm_ui$Element$text(label)))
				]));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(w, h),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Pages$Game$SaveProgress = {$: 13};
var $author$project$Pages$Game$link_pause_screen = F5(
	function (_v0, link, label, model, id) {
		var w = _v0.a;
		var h = _v0.b;
		var buttonSource = _Utils_Tuple2('/assets/ui/button_green.png', '/assets/ui/button_greenH.png');
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Game$hover_events(id),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Game$SaveProgress),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							$author$project$Pages$Styles$fonts.b0,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$size(20),
									$mdgriffith$elm_ui$Element$Font$semiBold
								])),
						$mdgriffith$elm_ui$Element$text(label)))
				]));
		return A6(
			$author$project$Pages$Styles$link_button,
			_Utils_Tuple2(w, h),
			link,
			buttonSource,
			_Utils_eq(model.f, id),
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX]),
			buttonAttr);
	});
var $mdgriffith$elm_ui$Internal$Model$OnLeft = 3;
var $mdgriffith$elm_ui$Element$onLeft = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 3, element);
};
var $mdgriffith$elm_ui$Internal$Model$OnRight = 2;
var $mdgriffith$elm_ui$Element$onRight = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 2, element);
};
var $author$project$Pages$Game$ResumeLevel = {$: 12};
var $author$project$Pages$Game$resume_button = F2(
	function (model, id) {
		var buttonSource = _Utils_Tuple2('/assets/ui/button_green.png', '/assets/ui/button_greenH.png');
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Game$hover_events(id),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Game$ResumeLevel),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							$author$project$Pages$Styles$fonts.b0,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$size(20),
									$mdgriffith$elm_ui$Element$Font$semiBold
								])),
						$mdgriffith$elm_ui$Element$text('RESUME')))
				]));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(140, 55),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Pages$Game$pause_screen = function (model) {
	var _v0 = model.fm.S;
	if (!_v0) {
		return $mdgriffith$elm_ui$Element$none;
	} else {
		var screenTitle = _Utils_ap(
			$author$project$Pages$Styles$fonts.cr,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(35),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$paddingEach(
					{ab: 20, af: 0, ai: 0, ak: 10})
				]));
		var panel = function () {
			var _v1 = model.fm.S;
			switch (_v1) {
				case 0:
					return _List_Nil;
				case 1:
					return _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.cM),
								screenTitle),
							$mdgriffith$elm_ui$Element$text('Level Paused')),
							A2($author$project$Pages$Game$resume_button, model, 1),
							A5(
							$author$project$Pages$Game$exit_button,
							_Utils_Tuple2(200, 55),
							'game#' + $elm$core$String$fromInt(model.fm.c6),
							'RETRY LEVEL',
							model,
							2),
							A5(
							$author$project$Pages$Game$exit_button,
							_Utils_Tuple2(200, 55),
							'levels',
							'BACK TO MENU',
							model,
							3)
						]);
				case 2:
					var lastLevel = _Utils_eq(model.fm.c6, $author$project$User$maxMapNumber);
					var nextButton = lastLevel ? $mdgriffith$elm_ui$Element$none : A5(
						$author$project$Pages$Game$link_pause_screen,
						_Utils_Tuple2(200, 55),
						'game#' + $elm$core$String$fromInt(model.fm.c6 + 1),
						'NEXT LEVEL',
						model,
						1);
					return _Utils_ap(
						lastLevel ? _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									screenTitle,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.c3),
											$mdgriffith$elm_ui$Element$moveRight(4),
											$mdgriffith$elm_ui$Element$onLeft(
											A2(
												$mdgriffith$elm_ui$Element$image,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(32)),
														$mdgriffith$elm_ui$Element$moveDown(8),
														$mdgriffith$elm_ui$Element$moveLeft(2)
													]),
												{eO: 'fireworks-left', f5: '/assets/ui/icons/fireworks.svg'})),
											$mdgriffith$elm_ui$Element$onRight(
											A2(
												$mdgriffith$elm_ui$Element$image,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(32)),
														$mdgriffith$elm_ui$Element$moveDown(8),
														$mdgriffith$elm_ui$Element$moveRight(2)
													]),
												{eO: 'fireworks-left', f5: '/assets/ui/icons/fireworks.svg'}))
										])),
								$mdgriffith$elm_ui$Element$text('Congratulations!')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									$author$project$Pages$Styles$fonts.cr,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(25),
											$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.cM),
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 10, af: 0, ai: 0, ak: 0})
										])),
								$mdgriffith$elm_ui$Element$text('You Beat The Final Level.'))
							]) : _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.c3),
									screenTitle),
								$mdgriffith$elm_ui$Element$text('Level Complete'))
							]),
						_List_fromArray(
							[
								nextButton,
								A5(
								$author$project$Pages$Game$link_pause_screen,
								_Utils_Tuple2(200, 55),
								'levels',
								'BACK TO MENU',
								model,
								2),
								A5(
								$author$project$Pages$Game$link_pause_screen,
								_Utils_Tuple2(140, 55),
								'home',
								'EXIT',
								model,
								3)
							]));
				default:
					return _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.b5),
								screenTitle),
							$mdgriffith$elm_ui$Element$text('Game Over')),
							A5(
							$author$project$Pages$Game$link_pause_screen,
							_Utils_Tuple2(200, 55),
							'game#' + $elm$core$String$fromInt(model.fm.c6),
							'RETRY LEVEL',
							model,
							1),
							A5(
							$author$project$Pages$Game$link_pause_screen,
							_Utils_Tuple2(200, 55),
							'levels',
							'BACK TO MENU',
							model,
							2),
							A5(
							$author$project$Pages$Game$link_pause_screen,
							_Utils_Tuple2(140, 55),
							'home',
							'EXIT',
							model,
							3)
						]);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(model.aN.a + 410)),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$behindContent(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.cg),
								$mdgriffith$elm_ui$Element$alpha(0.5)
							]),
						$mdgriffith$elm_ui$Element$none))
				]),
			A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(420)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($mdgriffith$elm_ui$Element$paddingXY, 0, 40),
									$mdgriffith$elm_ui$Element$spacing(25)
								]),
							panel))
					]),
				{eO: 'panel_pause', f5: '/assets/ui/panel_pause.svg'}));
	}
};
var $author$project$Game$Towers$get_tower_name = function (tower) {
	var _v0 = tower.O;
	switch (_v0.$) {
		case 0:
			return 'minigun';
		case 1:
			return 'cannon';
		default:
			return 'rocketlauncher';
	}
};
var $mdgriffith$elm_ui$Internal$Model$Scale = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$scale = $mdgriffith$elm_ui$Internal$Flag$flag(23);
var $mdgriffith$elm_ui$Element$scale = function (n) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$scale,
		$mdgriffith$elm_ui$Internal$Model$Scale(
			_Utils_Tuple3(n, n, 1)));
};
var $author$project$Game$Towers$preview_tower = F4(
	function (tower, tileSize, height, listAttr) {
		var bodyOffset = tileSize * tower.I;
		var previewAttr = function () {
			if ($elm$core$List$isEmpty(listAttr)) {
				var newY = tileSize * ((tower.cn.b - height) + 1);
				var newX = tileSize * tower.cn.a;
				return _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alpha(0.5),
						$mdgriffith$elm_ui$Element$moveRight(newX),
						$mdgriffith$elm_ui$Element$moveUp(newY)
					]);
			} else {
				return _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$moveDown(bodyOffset * 0.4)
					]);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_Utils_ap(
				listAttr,
				_Utils_ap(
					previewAttr,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(tileSize)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(tileSize)),
							$mdgriffith$elm_ui$Element$scale($author$project$Game$Towers$towerBaseSize),
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$image,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(tileSize)),
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(tileSize)),
										$mdgriffith$elm_ui$Element$scale(tower.bS / $author$project$Game$Towers$towerBaseSize),
										$mdgriffith$elm_ui$Element$moveUp(bodyOffset * $author$project$Game$Towers$towerBaseSize)
									]),
								{
									eO: 'body-' + $author$project$Game$Towers$get_tower_name(tower),
									f5: tower.x
								}))
						]))),
			{
				eO: 'base-' + $author$project$Game$Towers$get_tower_name(tower),
				f5: tower.aU
			});
	});
var $author$project$Game$Towers$preview_tower_range = F3(
	function (tower, tileSize, height) {
		var y = (tower.cn.b - height) + 1;
		var x = tower.cn.a;
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(tileSize)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(tileSize)),
					$mdgriffith$elm_ui$Element$scale(tower.fP * 2),
					$mdgriffith$elm_ui$Element$moveUp(tileSize * y),
					$mdgriffith$elm_ui$Element$moveRight(tileSize * x),
					$mdgriffith$elm_ui$Element$alpha(0.25)
				]),
			{
				eO: 'range-' + $author$project$Game$Towers$get_tower_name(tower),
				f5: '/assets/ui/map/range_circle.svg'
			});
	});
var $author$project$Pages$Styles$screen_background = F2(
	function (source, a) {
		return _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$behindContent(
				A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(745)),
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$alpha(a)
						]),
					{eO: 'background-menu', f5: source}))
			]);
	});
var $author$project$Game$Level$Clear = {$: 3};
var $author$project$Game$Level$Sell = {$: 1};
var $author$project$Game$Level$Upgrade = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Right = 2;
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX(2);
var $author$project$Pages$Game$action_button = F4(
	function (_v0, action, model, id) {
		var w = _v0.a;
		var h = _v0.b;
		var selected = _Utils_eq(action, model.d);
		var buttonSource = selected ? _Utils_Tuple2('/assets/ui/button_img_brownS.svg', '/assets/ui/button_img_brownSH.svg') : _Utils_Tuple2('/assets/ui/button_img_brown.svg', '/assets/ui/button_img_brownH.svg');
		var _v1 = function () {
			switch (action.$) {
				case 1:
					return _Utils_Tuple3('sell', 'sell tower', '');
				case 2:
					var path = action.a;
					switch (path) {
						case 2:
							return _Utils_Tuple3('upgrade', 'upgrade tower', '');
						case 0:
							return _Utils_Tuple3('upgrade', 'upgrade path 1', '★');
						default:
							return _Utils_Tuple3('upgrade', 'upgrade path 2', '✦');
					}
				case 3:
					return _Utils_Tuple3('break', 'break obstacle', '');
				default:
					return _Utils_Tuple3('', '', '');
			}
		}();
		var icon = _v1.a;
		var description = _v1.b;
		var upgradeText = _v1.c;
		var iconName = selected ? ('/assets/ui/icons/' + (icon + '-S.svg')) : ('/assets/ui/icons/' + (icon + '.svg'));
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Game$hover_events(id),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Game$SelectAction(action)),
					$mdgriffith$elm_ui$Element$centerX,
					(model.aj && _Utils_eq(id, model.f)) ? A2($author$project$Pages$Game$description_text, h / 2, description) : $mdgriffith$elm_ui$Element$above($mdgriffith$elm_ui$Element$none),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(w - 15)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						{eO: 'icon-' + icon, f5: iconName})),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignRight,
								$mdgriffith$elm_ui$Element$alignBottom,
								$mdgriffith$elm_ui$Element$Font$size(22),
								selected ? $mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.an) : $mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.b4),
								$mdgriffith$elm_ui$Element$moveLeft(2),
								$mdgriffith$elm_ui$Element$moveUp(1)
							]),
						$mdgriffith$elm_ui$Element$text(upgradeText)))
				]));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(w, h),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $mdgriffith$elm_ui$Internal$Model$Left = 0;
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX(0);
var $author$project$Pages$Game$DisselectActivity = {$: 4};
var $author$project$Pages$Game$disselect_button = F2(
	function (model, id) {
		var buttonSource = _Utils_Tuple2('/assets/ui/button_img_round.svg', '/assets/ui/button_img_roundH.svg');
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Game$hover_events(id),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Game$DisselectActivity),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(15)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						{eO: 'options', f5: '/assets/ui/icons/cross.svg'}))
				]));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(30, 30),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Pages$Game$get_targeting_index = function (tower) {
	var _v0 = tower.gc;
	switch (_v0) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		default:
			return 5;
	}
};
var $author$project$Game$Towers$get_targeting_name = function (tower) {
	var _v0 = tower.gc;
	switch (_v0) {
		case 0:
			return 'FIRST';
		case 1:
			return 'STRONG';
		case 2:
			return 'WEAK';
		case 3:
			return 'CLOSE';
		default:
			return 'FLYING';
	}
};
var $author$project$Game$Tiles$get_tile_name = function (tile) {
	var _v0 = tile.O;
	if (_v0.$ === 1) {
		return 'Plot';
	} else {
		return 'Road';
	}
};
var $author$project$Game$Towers$get_tower_description = function (tower) {
	var path = $author$project$Game$Towers$get_upgrade_type(tower);
	var fancyName = function () {
		var _v4 = tower.O;
		switch (_v4.$) {
			case 0:
				switch (path) {
					case 2:
						return 'Minigun';
					case 0:
						return 'Flak Gun';
					default:
						return 'Machine Gun';
				}
			case 1:
				switch (path) {
					case 2:
						return 'Cannon';
					case 0:
						return 'Artillery';
					default:
						return 'Autocannon';
				}
			default:
				switch (path) {
					case 2:
						return 'Rocket Launcher';
					case 0:
						return 'Heavy Mortar';
					default:
						return 'Missile Battery';
				}
		}
	}();
	var description = function () {
		var _v0 = tower.O;
		switch (_v0.$) {
			case 0:
				switch (path) {
					case 2:
						return 'Never misses, but it cannot hit more than one enemy.';
					case 0:
						return 'High damage and range, but slow fire-rate.';
					default:
						return 'Fast fire-rate, but short range and low damage.';
				}
			case 1:
				switch (path) {
					case 2:
						return 'Capable of hitting multiple enemies in a straight line.';
					case 0:
						return 'Better pierce and damage, but slow projectile speed.';
					default:
						return 'High fire-rate and projectile speed, but less pierce.';
				}
			default:
				switch (path) {
					case 2:
						return 'Its projectiles explode on contact and hit multiple nearby enemies.';
					case 0:
						return 'Its projectiles explode when they hit an enemy or when they expire.';
					default:
						return 'Its projectiles explode and damage a single enemy on contact.';
				}
		}
	}();
	return _Utils_Tuple2(fancyName, description);
};
var $author$project$Game$Towers$get_tower_fireRate = function (tower) {
	var shotsPerSecond = 1 / tower.eZ;
	return A2(
		$elm$core$String$left,
		4,
		$elm$core$String$fromFloat(shotsPerSecond));
};
var $author$project$Game$Towers$get_tower_level = function (tower) {
	var _v0 = $author$project$Game$Towers$get_upgrade_type(tower);
	switch (_v0) {
		case 2:
			var _v1 = tower.fm;
			switch (_v1) {
				case 1:
					return 'Ⅰ';
				case 2:
					return 'Ⅱ';
				case 3:
					return 'Ⅲ';
				case 4:
					return 'Ⅳ';
				case 5:
					return 'Ⅴ';
				default:
					return '';
			}
		case 0:
			return '★';
		default:
			return '✦';
	}
};
var $author$project$Game$Towers$get_tower_projectileDistance = function (tower) {
	var _v0 = tower.O;
	if (!_v0.$) {
		return ' ✘ ';
	} else {
		return A2(
			$elm$core$String$left,
			4,
			$elm$core$String$fromFloat(tower.fL * tower.fN));
	}
};
var $author$project$Game$Towers$get_tower_projectileSpeed = function (tower) {
	var _v0 = tower.O;
	if (!_v0.$) {
		return ' ✘ ';
	} else {
		return A2(
			$elm$core$String$left,
			3,
			$elm$core$String$fromFloat(tower.fN));
	}
};
var $author$project$Game$Towers$get_tower_range = function (tower) {
	var actualRange = tower.fP - 0.4999;
	return A2(
		$elm$core$String$left,
		4,
		$elm$core$String$fromFloat(actualRange));
};
var $mdgriffith$elm_ui$Internal$Model$Rotate = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$rotate = $mdgriffith$elm_ui$Internal$Flag$flag(24);
var $mdgriffith$elm_ui$Element$rotate = function (angle) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$rotate,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Rotate,
			_Utils_Tuple3(0, 0, 1),
			angle));
};
var $author$project$Game$Tiles$preview_tile = F2(
	function (tile, tileSize) {
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(tileSize)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(tileSize)),
					function () {
					var _v0 = tile.O;
					if (_v0.$ === 1) {
						var obs = _v0.a;
						if (!obs.$) {
							var o = obs.a;
							var offsetY = (o.cn.b - 0.5) - tile.cn.b;
							var offsetX = (o.cn.a - 0.5) - tile.cn.a;
							return $mdgriffith$elm_ui$Element$inFront(
								A2(
									$mdgriffith$elm_ui$Element$image,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(tileSize)),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(tileSize)),
											$mdgriffith$elm_ui$Element$scale(o.bS),
											$mdgriffith$elm_ui$Element$rotate(o.c),
											$mdgriffith$elm_ui$Element$moveUp(offsetY * tileSize),
											$mdgriffith$elm_ui$Element$moveRight(offsetX * tileSize)
										]),
									{eO: 'tile', f5: o.v}));
						} else {
							return $mdgriffith$elm_ui$Element$inFront($mdgriffith$elm_ui$Element$none);
						}
					} else {
						return $mdgriffith$elm_ui$Element$inFront($mdgriffith$elm_ui$Element$none);
					}
				}()
				]),
			{eO: 'tile', f5: tile.v});
	});
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Element$spaceEvenly = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$spacing, $mdgriffith$elm_ui$Internal$Style$classes.f2);
var $author$project$Game$Level$ChangeTargeting = function (a) {
	return {$: 4, a: a};
};
var $author$project$Pages$Game$maxTargetingIndex = 5;
var $author$project$Pages$Game$set_targeting_index = F2(
	function (currentIndex, difference) {
		var newIndex = currentIndex + difference;
		return (_Utils_cmp(newIndex, $author$project$Pages$Game$maxTargetingIndex) > 0) ? 1 : ((newIndex < 1) ? $author$project$Pages$Game$maxTargetingIndex : newIndex);
	});
var $author$project$Game$Towers$Close = 3;
var $author$project$Game$Towers$Flying = 4;
var $author$project$Game$Towers$Strong = 1;
var $author$project$Game$Towers$Weak = 2;
var $author$project$Pages$Game$targeting_from_index = function (index) {
	switch (index) {
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 2;
		case 4:
			return 3;
		case 5:
			return 4;
		default:
			return 0;
	}
};
var $author$project$Pages$Game$targeting_button = F4(
	function (currentIndex, indexDifference, model, id) {
		var buttonSource = (indexDifference === 1) ? _Utils_Tuple2('/assets/ui/button_arrow-r.svg', '/assets/ui/button_arrow-rH.svg') : _Utils_Tuple2('/assets/ui/button_arrow-l.svg', '/assets/ui/button_arrow-lH.svg');
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Game$hover_events(id),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Game$SelectAction(
						$author$project$Game$Level$ChangeTargeting(
							$author$project$Pages$Game$targeting_from_index(
								A2($author$project$Pages$Game$set_targeting_index, currentIndex, indexDifference)))))
				]));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(30, 30),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.ab;
	var top = _v0.ak;
	var left = _v0.af;
	var right = _v0.ai;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $author$project$Pages$Game$show_object = F2(
	function (panelHeight, model) {
		var borderWidth = 3;
		var imageHeight = 75 + (borderWidth * 2);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(panelHeight)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$padding(5),
					A2($mdgriffith$elm_ui$Element$spacingXY, 0, 10),
					$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.bu),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{ab: 2, af: 0, ai: 0, ak: 2})
				]),
			function () {
				var _v0 = model.e;
				switch (_v0.$) {
					case 2:
						return $mdgriffith$elm_ui$Element$none;
					case 1:
						var t = _v0.a;
						var placed = A2($author$project$Game$Playboard$tower_is_placed, model.fm.i, t);
						var showTargeting = function () {
							var _v8 = model.d;
							switch (_v8.$) {
								case 0:
									return false;
								case 1:
									return false;
								case 2:
									return false;
								default:
									return placed;
							}
						}();
						var towerLevel = placed ? $author$project$Game$Towers$get_tower_level(t) : '';
						var pathUpgrades = _List_fromArray(
							[
								A4(
								$author$project$Pages$Game$action_button,
								_Utils_Tuple2(40, 40),
								$author$project$Game$Level$Upgrade(0),
								model,
								21),
								A4(
								$author$project$Pages$Game$action_button,
								_Utils_Tuple2(40, 40),
								$author$project$Game$Level$Upgrade(1),
								model,
								22)
							]);
						var oneUpgrade = _List_fromArray(
							[
								A4(
								$author$project$Pages$Game$action_button,
								_Utils_Tuple2(40, 40),
								$author$project$Game$Level$Upgrade(2),
								model,
								20)
							]);
						var labelBorder = _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Border$widthEach(
								{ab: 0, af: 0, ai: 1, ak: 0}),
								$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.bu)
							]);
						var _v1 = $author$project$Game$Towers$get_tower_description(t);
						var towerName = _v1.a;
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(imageHeight + 10)),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											A2($mdgriffith$elm_ui$Element$paddingXY, 15, 5),
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(imageHeight)),
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(imageHeight)),
													$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.cg),
													$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an),
													$mdgriffith$elm_ui$Element$Border$rounded(5),
													$mdgriffith$elm_ui$Element$Border$width(borderWidth),
													$mdgriffith$elm_ui$Element$inFront(
													A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$alignBottom,
																$mdgriffith$elm_ui$Element$alignRight,
																$mdgriffith$elm_ui$Element$Font$size(20),
																$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.b4),
																$mdgriffith$elm_ui$Element$moveLeft(3),
																$mdgriffith$elm_ui$Element$moveUp(1)
															]),
														$mdgriffith$elm_ui$Element$text(towerLevel)))
												]),
											A4(
												$author$project$Game$Towers$preview_tower,
												t,
												imageHeight - 19,
												0,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]))),
											A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													A2($mdgriffith$elm_ui$Element$spacingXY, 0, 5)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px(35)),
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
														]),
													_List_fromArray(
														[
															A2(
															$mdgriffith$elm_ui$Element$el,
															_Utils_ap(
																$author$project$Pages$Styles$fonts.cS,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$width(
																		$mdgriffith$elm_ui$Element$px(120)),
																		$mdgriffith$elm_ui$Element$Font$size(20),
																		$mdgriffith$elm_ui$Element$Font$alignLeft,
																		$mdgriffith$elm_ui$Element$Font$semiBold
																	])),
															$mdgriffith$elm_ui$Element$text(towerName)),
															A2($author$project$Pages$Game$disselect_button, model, 23)
														])),
													function () {
													if (showTargeting) {
														return A2(
															$mdgriffith$elm_ui$Element$row,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
																	$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																	$mdgriffith$elm_ui$Element$spacing(5),
																	$mdgriffith$elm_ui$Element$paddingEach(
																	{ab: 0, af: 0, ai: 15, ak: 0})
																]),
															_List_fromArray(
																[
																	A4(
																	$author$project$Pages$Game$targeting_button,
																	$author$project$Pages$Game$get_targeting_index(t),
																	-1,
																	model,
																	24),
																	A2(
																	$mdgriffith$elm_ui$Element$image,
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$width(
																			$mdgriffith$elm_ui$Element$px(135)),
																			$mdgriffith$elm_ui$Element$height(
																			$mdgriffith$elm_ui$Element$px(35)),
																			$mdgriffith$elm_ui$Element$centerX,
																			$mdgriffith$elm_ui$Element$inFront(
																			A2(
																				$mdgriffith$elm_ui$Element$row,
																				_List_fromArray(
																					[
																						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
																						$mdgriffith$elm_ui$Element$spacing(5),
																						A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
																					]),
																				_List_fromArray(
																					[
																						A2(
																						$mdgriffith$elm_ui$Element$image,
																						_Utils_ap(
																							$author$project$Pages$Game$hover_events(25),
																							_List_fromArray(
																								[
																									$mdgriffith$elm_ui$Element$width(
																									$mdgriffith$elm_ui$Element$px(25)),
																									$mdgriffith$elm_ui$Element$height(
																									$mdgriffith$elm_ui$Element$px(25)),
																									((model.f === 25) && model.aj) ? A2($author$project$Pages$Game$description_text, 10, 'targeting priority') : $mdgriffith$elm_ui$Element$above($mdgriffith$elm_ui$Element$none)
																								])),
																						{eO: 'targeting_icon', f5: '/assets/ui/icons/target.svg'}),
																						A2(
																						$mdgriffith$elm_ui$Element$el,
																						_Utils_ap(
																							$author$project$Pages$Styles$fonts.cq,
																							_List_fromArray(
																								[
																									$mdgriffith$elm_ui$Element$width(
																									$mdgriffith$elm_ui$Element$px(110)),
																									$mdgriffith$elm_ui$Element$height(
																									$mdgriffith$elm_ui$Element$px(15)),
																									$mdgriffith$elm_ui$Element$centerY,
																									$mdgriffith$elm_ui$Element$Font$size(18),
																									$mdgriffith$elm_ui$Element$Font$alignLeft,
																									$mdgriffith$elm_ui$Element$Font$semiBold
																								])),
																						$mdgriffith$elm_ui$Element$text(
																							$author$project$Game$Towers$get_targeting_name(t)))
																					])))
																		]),
																	{eO: 'targeting', f5: '/assets/ui/text_field.png'}),
																	A4(
																	$author$project$Pages$Game$targeting_button,
																	$author$project$Pages$Game$get_targeting_index(t),
																	1,
																	model,
																	26)
																]));
													} else {
														var moneyValue = function () {
															var _v4 = model.d;
															if (_v4.$ === 1) {
																return $elm$core$String$fromInt(t.fZ);
															} else {
																return $elm$core$String$fromInt(
																	A2(
																		$author$project$Game$Towers$get_tower_price,
																		t,
																		$author$project$Game$Towers$get_upgrade_type(t)));
															}
														}();
														var _v2 = function () {
															var _v3 = model.d;
															if (_v3.$ === 1) {
																return _Utils_Tuple2(
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.e3)
																		]),
																	'sell value');
															} else {
																return _Utils_Tuple2(
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.dF)
																		]),
																	'cost');
															}
														}();
														var fontColor = _v2.a;
														var moneyDescription = _v2.b;
														return A2(
															$mdgriffith$elm_ui$Element$el,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
																	$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																	A2($mdgriffith$elm_ui$Element$paddingXY, 20, 5)
																]),
															A6(
																$author$project$Pages$Game$icon_label_description,
																_Utils_Tuple2(160, 30),
																'money.svg',
																_Utils_Tuple2(moneyValue, moneyDescription),
																model,
																27,
																fontColor));
													}
												}()
												]))
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											A2($mdgriffith$elm_ui$Element$paddingXY, 10, 2)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(240)),
													$mdgriffith$elm_ui$Element$spacing(5)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px(30)),
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$spacing(10)
														]),
													_List_fromArray(
														[
															A6(
															$author$project$Pages$Game$icon_label_description,
															_Utils_Tuple2(90, 30),
															'damage.svg',
															_Utils_Tuple2(
																$elm$core$String$fromInt(t.fK),
																'damage per shot'),
															model,
															28,
															labelBorder),
															A6(
															$author$project$Pages$Game$icon_label_description,
															_Utils_Tuple2(75, 30),
															'armor_ignore.svg',
															_Utils_Tuple2(
																$elm$core$String$fromInt(t.fJ),
																'armor ignore'),
															model,
															29,
															_List_Nil)
														])),
													A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px(30)),
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$spacing(10)
														]),
													A2(
														$elm$core$List$cons,
														A6(
															$author$project$Pages$Game$icon_label_description,
															_Utils_Tuple2(90, 30),
															'attack_speed.svg',
															_Utils_Tuple2(
																$author$project$Game$Towers$get_tower_fireRate(t),
																'shots per second'),
															model,
															30,
															labelBorder),
														function () {
															var _v5 = t.O;
															if (_v5.$ === 2) {
																var explosion_range = _v5.a;
																return _List_fromArray(
																	[
																		A6(
																		$author$project$Pages$Game$icon_label_description,
																		_Utils_Tuple2(75, 30),
																		'range.svg',
																		_Utils_Tuple2(
																			$author$project$Game$Towers$get_tower_range(t),
																			'range (in tiles)'),
																		model,
																		31,
																		labelBorder),
																		A6(
																		$author$project$Pages$Game$icon_label_description,
																		_Utils_Tuple2(50, 30),
																		'explosion_range.svg',
																		_Utils_Tuple2(
																			$elm$core$String$fromFloat(explosion_range),
																			'range of explosion'),
																		model,
																		32,
																		_List_Nil)
																	]);
															} else {
																return $elm$core$List$singleton(
																	A6(
																		$author$project$Pages$Game$icon_label_description,
																		_Utils_Tuple2(75, 30),
																		'range.svg',
																		_Utils_Tuple2(
																			$author$project$Game$Towers$get_tower_range(t),
																			'range (in tiles)'),
																		model,
																		31,
																		_List_Nil));
															}
														}())),
													A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px(30)),
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$spacing(10)
														]),
													_List_fromArray(
														[
															A6(
															$author$project$Pages$Game$icon_label_description,
															_Utils_Tuple2(90, 30),
															'projectile_distance.svg',
															_Utils_Tuple2(
																$author$project$Game$Towers$get_tower_projectileDistance(t),
																'travel distance of shots'),
															model,
															33,
															labelBorder),
															A6(
															$author$project$Pages$Game$icon_label_description,
															_Utils_Tuple2(75, 30),
															'projectile_speed.svg',
															_Utils_Tuple2(
																$author$project$Game$Towers$get_tower_projectileSpeed(t),
																'travel speed of shots '),
															model,
															34,
															labelBorder),
															A6(
															$author$project$Pages$Game$icon_label_description,
															_Utils_Tuple2(50, 30),
															'projectile_pierce.svg',
															_Utils_Tuple2(
																$elm$core$String$fromInt(t.fM),
																'number of hit enemies per shot'),
															model,
															35,
															_List_Nil)
														]))
												])),
											placed ? A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$spaceEvenly,
													A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5),
													$mdgriffith$elm_ui$Element$moveRight(12)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width(
															$mdgriffith$elm_ui$Element$px(95)),
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px(40)),
															$mdgriffith$elm_ui$Element$spacing(15)
														]),
													function () {
														var _v6 = model.d;
														if (_v6.$ === 2) {
															var path = _v6.a;
															if (path === 2) {
																return oneUpgrade;
															} else {
																return pathUpgrades;
															}
														} else {
															return (_Utils_cmp(t.fm, $author$project$Game$Towers$maxTowerLevel) < 0) ? oneUpgrade : (_Utils_eq(t.fm, $author$project$Game$Towers$maxTowerLevel) ? pathUpgrades : _List_Nil);
														}
													}()),
													A4(
													$author$project$Pages$Game$action_button,
													_Utils_Tuple2(40, 40),
													$author$project$Game$Level$Sell,
													model,
													36)
												])) : $mdgriffith$elm_ui$Element$none
										]))
								]));
					default:
						var t = _v0.a;
						var showObstacle = $author$project$Game$Tiles$has_obstacle(t);
						var buildText = function () {
							var _v10 = t.O;
							if (_v10.$ === 1) {
								return showObstacle ? 'Can\'t build tower' : 'Can build tower';
							} else {
								return 'Can\'t build tower';
							}
						}();
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(imageHeight + 10)),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0),
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(imageHeight)),
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(imageHeight)),
													$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an),
													$mdgriffith$elm_ui$Element$Border$rounded(5),
													$mdgriffith$elm_ui$Element$Border$width(borderWidth),
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$clip
												]),
											A2($author$project$Game$Tiles$preview_tile, t, 76)),
											A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$spacing(5)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px(35)),
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
														]),
													_List_fromArray(
														[
															A2(
															$mdgriffith$elm_ui$Element$el,
															_Utils_ap(
																$author$project$Pages$Styles$fonts.cS,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$width(
																		$mdgriffith$elm_ui$Element$px(120)),
																		$mdgriffith$elm_ui$Element$Font$size(20),
																		$mdgriffith$elm_ui$Element$Font$alignLeft,
																		$mdgriffith$elm_ui$Element$Font$semiBold
																	])),
															$mdgriffith$elm_ui$Element$text(
																$author$project$Game$Tiles$get_tile_name(t))),
															A2($author$project$Pages$Game$disselect_button, model, 37)
														])),
													function () {
													var _v9 = model.d;
													if (_v9.$ === 3) {
														return A2(
															$mdgriffith$elm_ui$Element$el,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
																	$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																	A2($mdgriffith$elm_ui$Element$paddingXY, 20, 5)
																]),
															A6(
																$author$project$Pages$Game$icon_label_description,
																_Utils_Tuple2(160, 30),
																'money.svg',
																_Utils_Tuple2(
																	$elm$core$String$fromInt(
																		$author$project$Game$Tiles$get_tile_clear_cost(t)),
																	'cost'),
																model,
																38,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.dF)
																	])));
													} else {
														return $mdgriffith$elm_ui$Element$none;
													}
												}()
												]))
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											A2($mdgriffith$elm_ui$Element$paddingXY, 15, 10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_Utils_ap(
												$author$project$Pages$Styles$fonts.cq,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(180)),
														$mdgriffith$elm_ui$Element$alignLeft,
														A2($mdgriffith$elm_ui$Element$paddingXY, 15, 20),
														$mdgriffith$elm_ui$Element$Font$size(18),
														$mdgriffith$elm_ui$Element$Font$alignLeft
													])),
											$mdgriffith$elm_ui$Element$text(buildText)),
											A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(50)),
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(80)),
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$centerY
												]),
											showObstacle ? _List_fromArray(
												[
													A4(
													$author$project$Pages$Game$action_button,
													_Utils_Tuple2(45, 45),
													$author$project$Game$Level$Clear,
													model,
													39)
												]) : _List_Nil)
										]))
								]));
				}
			}());
	});
var $author$project$Pages$Game$ChangeSpeed = function (a) {
	return {$: 1, a: a};
};
var $author$project$Pages$Game$speed_button = F3(
	function (speed, model, id) {
		var selected = _Utils_eq(speed, model.fm.Y);
		var iconName = selected ? ('/assets/ui/icons/level_speed-' + ($elm$core$String$fromInt(speed) + 'S.svg')) : ('/assets/ui/icons/level_speed-' + ($elm$core$String$fromInt(speed) + '.svg'));
		var buttonSource = selected ? _Utils_Tuple2('/assets/ui/button_img_roundS.svg', '/assets/ui/button_img_roundS.svg') : _Utils_Tuple2('/assets/ui/button_img_round.svg', '/assets/ui/button_img_roundH.svg');
		var buttonIcon = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						(speed === 3) ? $mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(27)) : $mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(21)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						((speed === 1) || (speed === 3)) ? $mdgriffith$elm_ui$Element$moveRight(2) : $mdgriffith$elm_ui$Element$moveRight(0)
					]),
				{
					eO: 'speed-' + $elm$core$String$fromInt(speed),
					f5: iconName
				}));
		var buttonAttr = selected ? _Utils_ap(
			_List_fromArray(
				[$phollyer$elm_cursor$Element$Cursor$default, buttonIcon]),
			$author$project$Pages$Game$hover_events(id)) : _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Game$ChangeSpeed(speed)),
					buttonIcon
				]),
			$author$project$Pages$Game$hover_events(id));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(45, 45),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Pages$Game$ToggleDescription = {$: 7};
var $author$project$Pages$Game$ToggleEnemyHealth = {$: 9};
var $author$project$Pages$Game$ToggleTowerRange = {$: 8};
var $author$project$Pages$Game$toggle_button = F3(
	function (icon, model, id) {
		var _v0 = function () {
			switch (icon) {
				case 'info':
					return _Utils_Tuple3(
						model.aj,
						$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Game$ToggleDescription),
						'show this text');
				case 'HPbar':
					return _Utils_Tuple3(
						model.aR,
						$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Game$ToggleEnemyHealth),
						'show enemy health');
				case 'sight':
					return _Utils_Tuple3(
						model.aS,
						$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Game$ToggleTowerRange),
						'show tower range');
				default:
					return _Utils_Tuple3(
						false,
						$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Game$ToggleDescription),
						'');
			}
		}();
		var selected = _v0.a;
		var toggleEvent = _v0.b;
		var descriptionText = _v0.c;
		var buttonSource = selected ? _Utils_Tuple2('/assets/ui/button_img_brownS.svg', '/assets/ui/button_img_brownSH.svg') : _Utils_Tuple2('/assets/ui/button_img_brown.svg', '/assets/ui/button_img_brownH.svg');
		var iconName = selected ? ('/assets/ui/icons/' + (icon + '-S.svg')) : ('/assets/ui/icons/' + (icon + '.svg'));
		var buttonIcon = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(20)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY
					]),
				{eO: 'icon-' + icon, f5: iconName}));
		var buttonAttr = (model.aj && _Utils_eq(id, model.f)) ? A2(
			$elm$core$List$cons,
			A2($author$project$Pages$Game$description_text, 15, descriptionText),
			_Utils_ap(
				$author$project$Pages$Game$hover_events(id),
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX, toggleEvent, buttonIcon]))) : _Utils_ap(
			$author$project$Pages$Game$hover_events(id),
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, toggleEvent, buttonIcon]));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(30, 30),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Pages$Game$SelectTower = function (a) {
	return {$: 2, a: a};
};
var $author$project$Pages$Game$tower_image = F3(
	function (towerName, model, id) {
		var name = $elm$core$String$toLower(towerName);
		var selected = function () {
			var _v0 = model.e;
			if (_v0.$ === 1) {
				var t = _v0.a;
				return (_Utils_eq(
					$author$project$Game$Towers$get_tower_name(t),
					name) && (!A2($author$project$Game$Playboard$tower_is_placed, model.fm.i, t))) ? true : false;
			} else {
				return false;
			}
		}();
		var towerImage = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(50)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(50)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY
					]),
				{eO: 'tower', f5: '/assets/towers/' + (name + '.png')}));
		var buttonSource = selected ? _Utils_Tuple2('/assets/ui/button_img_greenS.svg', '/assets/ui/button_img_greenSH.svg') : _Utils_Tuple2('/assets/ui/button_img_green.svg', '/assets/ui/button_img_greenH.svg');
		var buttonAttr = selected ? _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Game$DisselectActivity),
					towerImage
				]),
			$author$project$Pages$Game$hover_events(id)) : _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Game$SelectTower(name)),
					towerImage
				]),
			$author$project$Pages$Game$hover_events(id));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(80, 80),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Pages$Game$view = F2(
	function (state, model) {
		var wavesText = $elm$core$String$fromInt(
			$author$project$Game$Level$get_wave_number(model.fm)) + ('/' + ($elm$core$String$fromInt(
			$elm$core$Array$length(model.fm.cw)) + (' (' + ($elm$core$String$fromInt(
			$author$project$Game$Level$get_unbeaten_enemy_count(model.fm)) + ' left)'))));
		var newWidth = model.aN.a + 5;
		var newHeight = model.aN.b + 5;
		var borderSize = 3;
		return A2(
			$mdgriffith$elm_ui$Element$layout,
			A2($author$project$Pages$Styles$screen_background, '/assets/ui/background-game.svg', 0.5),
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						A2(
							$mdgriffith$elm_ui$Element$minimum,
							$author$project$Pages$Game$minimumGameHeight,
							A2($mdgriffith$elm_ui$Element$maximum, $author$project$Pages$Game$minimumGameHeight, $mdgriffith$elm_ui$Element$fill))),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$moveDown(20),
						$mdgriffith$elm_ui$Element$inFront(
						function () {
							var _v0 = model.a2;
							if (_v0.$ === 1) {
								return $author$project$Pages$Game$pause_screen(model);
							} else {
								var l = _v0.a;
								return $author$project$Pages$Game$confirm_screen(model);
							}
						}())
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px($author$project$Pages$Game$minimumGameHeight)),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(newWidth)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.eR)
							]),
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(newHeight)),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an),
									$mdgriffith$elm_ui$Element$Border$width(borderSize),
									$mdgriffith$elm_ui$Element$clip,
									function () {
									var _v1 = model.e;
									if (_v1.$ === 1) {
										var t = _v1.a;
										var show = _v1.b;
										return show ? $mdgriffith$elm_ui$Element$inFront(
											A4(
												$author$project$Game$Towers$preview_tower,
												t,
												model.fm.i.aV,
												$author$project$Game$Playboard$get_row(model.fm.i),
												_List_Nil)) : $mdgriffith$elm_ui$Element$inFront($mdgriffith$elm_ui$Element$none);
									} else {
										return $mdgriffith$elm_ui$Element$inFront($mdgriffith$elm_ui$Element$none);
									}
								}(),
									function () {
									var _v2 = model.e;
									if (_v2.$ === 1) {
										var t = _v2.a;
										var show = _v2.b;
										return (model.aS && (show || A2($author$project$Game$Playboard$tower_is_placed, model.fm.i, t))) ? $mdgriffith$elm_ui$Element$inFront(
											A3(
												$author$project$Game$Towers$preview_tower_range,
												t,
												model.fm.i.aV,
												$author$project$Game$Playboard$get_row(model.fm.i))) : $mdgriffith$elm_ui$Element$inFront($mdgriffith$elm_ui$Element$none);
									} else {
										return $mdgriffith$elm_ui$Element$inFront($mdgriffith$elm_ui$Element$none);
									}
								}(),
									$mdgriffith$elm_ui$Element$inFront(
									A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$htmlAttribute(
												$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onEnter(
													function (event) {
														return $author$project$Pages$Game$MouseMoved(
															$elm$core$Maybe$Just(event.cl));
													})),
												$mdgriffith$elm_ui$Element$htmlAttribute(
												$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onOut(
													function (_v3) {
														return $author$project$Pages$Game$MouseMoved($elm$core$Maybe$Nothing);
													})),
												$mdgriffith$elm_ui$Element$htmlAttribute(
												$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onMove(
													function (event) {
														return $author$project$Pages$Game$MouseMoved(
															$elm$core$Maybe$Just(event.cl));
													})),
												$mdgriffith$elm_ui$Element$htmlAttribute(
												$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$onClick(
													function (event) {
														return $author$project$Pages$Game$MapClicked(event.cl);
													}))
											]),
										$mdgriffith$elm_ui$Element$text('')))
								]),
							$mdgriffith$elm_ui$Element$html(
								A3($author$project$Game$Playboard$draw_board, model.fm.i, state.fQ, model.aR)))),
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px($author$project$Pages$Game$minimumGameHeight)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$inFront(
								A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$padding(20),
											$mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(45)),
													$mdgriffith$elm_ui$Element$spaceEvenly,
													A2($mdgriffith$elm_ui$Element$paddingXY, 90, 0),
													$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.bu),
													$mdgriffith$elm_ui$Element$Border$widthEach(
													{ab: 2, af: 0, ai: 0, ak: 0})
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_Utils_ap(
														$author$project$Pages$Styles$fonts.b9,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$width(
																$mdgriffith$elm_ui$Element$px(120)),
																$mdgriffith$elm_ui$Element$Font$size(30),
																$mdgriffith$elm_ui$Element$Font$alignLeft,
																$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.b4)
															])),
													$mdgriffith$elm_ui$Element$text(
														'Level ' + $elm$core$String$fromInt(model.fm.c6))),
													A2($author$project$Pages$Game$pause_button, model, 6)
												])),
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(155)),
													$mdgriffith$elm_ui$Element$moveDown(5),
													$mdgriffith$elm_ui$Element$spaceEvenly,
													A2($mdgriffith$elm_ui$Element$paddingXY, 5, 0),
													$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an),
													$mdgriffith$elm_ui$Element$Border$widthEach(
													{ab: 2, af: 0, ai: 0, ak: 0})
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width(
															$mdgriffith$elm_ui$Element$px(270)),
															$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$spacing(5),
															A2($mdgriffith$elm_ui$Element$paddingXY, 5, 0)
														]),
													_List_fromArray(
														[
															A2(
															$mdgriffith$elm_ui$Element$row,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																	$mdgriffith$elm_ui$Element$height(
																	$mdgriffith$elm_ui$Element$px(60)),
																	$mdgriffith$elm_ui$Element$spaceEvenly,
																	A2($mdgriffith$elm_ui$Element$paddingXY, 5, 0),
																	$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.bu),
																	$mdgriffith$elm_ui$Element$Border$widthEach(
																	{ab: 1, af: 0, ai: 0, ak: 0})
																]),
															_List_fromArray(
																[
																	A3($author$project$Pages$Game$speed_button, 0, model, 7),
																	A3($author$project$Pages$Game$speed_button, 1, model, 8),
																	A3($author$project$Pages$Game$speed_button, 2, model, 9),
																	A3($author$project$Pages$Game$speed_button, 3, model, 10)
																])),
															A2(
															$mdgriffith$elm_ui$Element$row,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																	$mdgriffith$elm_ui$Element$height(
																	$mdgriffith$elm_ui$Element$px(40)),
																	$mdgriffith$elm_ui$Element$spacing(20),
																	A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
																]),
															_List_fromArray(
																[
																	A6(
																	$author$project$Pages$Game$icon_label_description,
																	_Utils_Tuple2(70, 38),
																	'lives.svg',
																	_Utils_Tuple2(
																		$elm$core$String$fromInt(model.fm.ag),
																		'lives left'),
																	model,
																	11,
																	_List_fromArray(
																		[
																			A2($mdgriffith$elm_ui$Element$Font$glow, $author$project$Pages$Styles$colors.bX, 1.5)
																		])),
																	A6(
																	$author$project$Pages$Game$icon_label_description,
																	_Utils_Tuple2(150, 38),
																	'money.svg',
																	_Utils_Tuple2(
																		$elm$core$String$fromInt(model.fm.o),
																		'money left'),
																	model,
																	12,
																	_List_fromArray(
																		[
																			A2($mdgriffith$elm_ui$Element$Font$glow, $author$project$Pages$Styles$colors.bX, 1.5)
																		]))
																])),
															A2(
															$mdgriffith$elm_ui$Element$el,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$width(
																	$mdgriffith$elm_ui$Element$px(200)),
																	$mdgriffith$elm_ui$Element$height(
																	$mdgriffith$elm_ui$Element$px(40)),
																	$mdgriffith$elm_ui$Element$centerX
																]),
															A6(
																$author$project$Pages$Game$icon_label_description,
																_Utils_Tuple2(200, 38),
																'waves.svg',
																_Utils_Tuple2(wavesText, 'current wave/total waves (enemies left)'),
																model,
																13,
																_List_fromArray(
																	[
																		A2($mdgriffith$elm_ui$Element$Font$glow, $author$project$Pages$Styles$colors.bX, 1.5)
																	])))
														])),
													A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width(
															$mdgriffith$elm_ui$Element$px(80)),
															$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$spaceEvenly,
															$mdgriffith$elm_ui$Element$paddingEach(
															{ab: 22, af: 0, ai: 0, ak: 17}),
															$mdgriffith$elm_ui$Element$behindContent(
															A2(
																$mdgriffith$elm_ui$Element$image,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$width(
																		$mdgriffith$elm_ui$Element$px(65)),
																		$mdgriffith$elm_ui$Element$moveUp(5),
																		$mdgriffith$elm_ui$Element$centerX,
																		$mdgriffith$elm_ui$Element$centerY
																	]),
																{eO: 'panel_UIbuttons', f5: '/assets/ui/panel_UIbuttons.svg'}))
														]),
													_List_fromArray(
														[
															A3($author$project$Pages$Game$toggle_button, 'info', model, 14),
															A3($author$project$Pages$Game$toggle_button, 'sight', model, 15),
															A3($author$project$Pages$Game$toggle_button, 'HPbar', model, 16)
														]))
												])),
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(40)),
													A2($mdgriffith$elm_ui$Element$spacingXY, 20, 0)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_Utils_ap(
														$author$project$Pages$Styles$fonts.cr,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$centerX,
																$mdgriffith$elm_ui$Element$centerY,
																$mdgriffith$elm_ui$Element$Font$size(25),
																$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.eT)
															])),
													$mdgriffith$elm_ui$Element$text('Towers'))
												])),
											A2(
											$mdgriffith$elm_ui$Element$image,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$moveUp(5),
													$mdgriffith$elm_ui$Element$inFront(
													A2(
														$mdgriffith$elm_ui$Element$row,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																$mdgriffith$elm_ui$Element$height(
																$mdgriffith$elm_ui$Element$px(104)),
																$mdgriffith$elm_ui$Element$spaceEvenly,
																A2($mdgriffith$elm_ui$Element$paddingXY, 40, 0)
															]),
														_List_fromArray(
															[
																A3($author$project$Pages$Game$tower_image, 'Minigun', model, 17),
																A3($author$project$Pages$Game$tower_image, 'Cannon', model, 18),
																A3($author$project$Pages$Game$tower_image, 'RocketLauncher', model, 19)
															])))
												]),
											{eO: 'object_panel', f5: '/assets/ui/panel_objects.svg'}),
											function () {
											var _v4 = model.e;
											if (_v4.$ === 2) {
												return $mdgriffith$elm_ui$Element$none;
											} else {
												return A2($author$project$Pages$Game$show_object, 205, model);
											}
										}(),
											function () {
											var _v5 = model.aL;
											if (_v5.$ === 1) {
												return $mdgriffith$elm_ui$Element$none;
											} else {
												var m = _v5.a;
												var a = (1000 - (($author$project$Pages$Game$initialMessageTime - m.a9) * 0.15)) / 1000;
												return A2(
													$mdgriffith$elm_ui$Element$el,
													_Utils_ap(
														$author$project$Pages$Styles$fonts.cq,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																$mdgriffith$elm_ui$Element$centerX,
																$mdgriffith$elm_ui$Element$alignBottom,
																$mdgriffith$elm_ui$Element$Font$size(18),
																$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.b5),
																$mdgriffith$elm_ui$Element$Font$center,
																$mdgriffith$elm_ui$Element$moveUp(10),
																$mdgriffith$elm_ui$Element$alpha(a)
															])),
													$mdgriffith$elm_ui$Element$text(m.ci));
											}
										}()
										])))
							]),
						{eO: 'game_panel', f5: '/assets/ui/panel_game.svg'})
					])));
	});
var $author$project$Pages$Guide$ChangeCategory = function (a) {
	return {$: 1, a: a};
};
var $author$project$Pages$Guide$change_index = F2(
	function (currentIndex, difference) {
		var newIndex = currentIndex + difference;
		return (newIndex > 3) ? 0 : ((newIndex < 0) ? 3 : newIndex);
	});
var $author$project$Pages$Guide$ButtonOver = function (a) {
	return {$: 0, a: a};
};
var $author$project$Pages$Guide$hover_events = function (id) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Events$onMouseEnter(
			$author$project$Pages$Guide$ButtonOver(id)),
			$mdgriffith$elm_ui$Element$Events$onMouseLeave(
			$author$project$Pages$Guide$ButtonOver(0))
		]);
};
var $author$project$Pages$Guide$arrow_button = F3(
	function (indexDifference, model, id) {
		var buttonSource = (indexDifference === 1) ? _Utils_Tuple2('/assets/ui/button_arrow-r.svg', '/assets/ui/button_arrow-rH.svg') : _Utils_Tuple2('/assets/ui/button_arrow-l.svg', '/assets/ui/button_arrow-lH.svg');
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Guide$hover_events(id),
			_List_fromArray(
				[
					(indexDifference === 1) ? $mdgriffith$elm_ui$Element$alignRight : $mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Guide$ChangeCategory(
						A2($author$project$Pages$Guide$change_index, model.aK, indexDifference)))
				]));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(45, 45),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Pages$Guide$category_to_str = function (category) {
	switch (category) {
		case 0:
			return 'Basics';
		case 1:
			return 'Towers';
		case 2:
			return 'Enemies';
		default:
			return 'Tips';
	}
};
var $author$project$Game$Enemies$get_enemy_name = function (enemy) {
	var _v0 = enemy.O;
	switch (_v0) {
		case 0:
			return 'Scout';
		case 1:
			return 'Soldier';
		case 2:
			return 'Armored Soldier';
		case 3:
			return 'Veteran';
		case 4:
			return 'Tank';
		case 5:
			return 'Armored Tank';
		case 6:
			return 'Aircraft';
		default:
			return 'Armored Aircraft';
	}
};
var $author$project$Pages$Guide$icon_text = F6(
	function (_v0, iconSource, iconLabel, last, textParagraph, labelattr) {
		var w = _v0.a;
		var h = _v0.b;
		var minWidth = $elm$core$List$isEmpty(textParagraph) ? ((w / 5) | 0) : w;
		var imageSize = ((h / 2) | 0) + ((h / 6) | 0);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(minWidth)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$spacing(15),
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 8)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(imageSize)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(imageSize)),
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$centerY
						]),
					{eO: 'icon-' + iconSource, f5: '/assets/ui/' + iconSource}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(h - 10)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px((w / 5) | 0)),
							last ? $mdgriffith$elm_ui$Element$Border$width(0) : $mdgriffith$elm_ui$Element$Border$widthEach(
							{ab: 0, af: 0, ai: 1, ak: 0}),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an)
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							$author$project$Pages$Styles$fonts.b9,
							_Utils_ap(
								labelattr,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$size(24),
										$mdgriffith$elm_ui$Element$Font$alignLeft,
										$mdgriffith$elm_ui$Element$Font$extraBold,
										$mdgriffith$elm_ui$Element$centerY
									]))),
						$mdgriffith$elm_ui$Element$text(iconLabel))),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.cq,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(16),
								$mdgriffith$elm_ui$Element$Font$medium
							])),
					textParagraph)
				]));
	});
var $author$project$Pages$Guide$description_text = F2(
	function (offset, description) {
		return $mdgriffith$elm_ui$Element$above(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					$author$project$Pages$Styles$fonts.eP,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(26)),
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 2),
							$mdgriffith$elm_ui$Element$moveRight(offset),
							$mdgriffith$elm_ui$Element$Font$size(18),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.bX),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$alpha(0.6),
							$mdgriffith$elm_ui$Element$Events$onMouseEnter(
							$author$project$Pages$Guide$ButtonOver(0))
						])),
				$mdgriffith$elm_ui$Element$text(' ' + (description + ' '))));
	});
var $author$project$Pages$Guide$icon_text_description = F6(
	function (_v0, icon, _v1, last, model, id) {
		var w = _v0.a;
		var h = _v0.b;
		var label = _v1.a;
		var value = _v1.b;
		var description = _v1.c;
		var halfHeight = ((h / 2) | 0) + 4;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(w)),
					$mdgriffith$elm_ui$Element$spacing(4),
					last ? $mdgriffith$elm_ui$Element$Border$width(0) : $mdgriffith$elm_ui$Element$Border$widthEach(
					{ab: 0, af: 0, ai: 1, ak: 0})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_Utils_ap(
						$author$project$Pages$Guide$hover_events(id),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(halfHeight + 8)),
								$mdgriffith$elm_ui$Element$centerY,
								_Utils_eq(id, model.f) ? A2($author$project$Pages$Guide$description_text, halfHeight, description) : $mdgriffith$elm_ui$Element$above($mdgriffith$elm_ui$Element$none)
							])),
					{eO: icon, f5: '/assets/ui/icons/' + icon}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.cr,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(halfHeight)),
								$mdgriffith$elm_ui$Element$Font$size(halfHeight),
								$mdgriffith$elm_ui$Element$centerY,
								A2($mdgriffith$elm_ui$Element$paddingXY, 2, 0)
							])),
					$mdgriffith$elm_ui$Element$text(label + ' = ')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.fs,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(halfHeight)),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Font$size(halfHeight),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.cM),
								$mdgriffith$elm_ui$Element$centerY
							])),
					$mdgriffith$elm_ui$Element$text(value))
				]));
	});
var $author$project$Pages$Guide$SelectLevel = function (a) {
	return {$: 3, a: a};
};
var $author$project$Pages$Guide$level_button = F3(
	function (towerIndex, model, id) {
		var selected = _Utils_eq(model.m, towerIndex);
		var currentTower = A2(
			$elm$core$Maybe$withDefault,
			A2($author$project$Game$Towers$create_tower, 'minigun', 1),
			A2($elm$core$Array$get, towerIndex - 1, model.bh));
		var levelNumber = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Font$size(20),
						$mdgriffith$elm_ui$Element$Font$center,
						selected ? $mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.cF) : $mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.an)
					]),
				$mdgriffith$elm_ui$Element$text(
					$author$project$Game$Towers$get_tower_level(currentTower))));
		var buttonSource = selected ? _Utils_Tuple2('/assets/ui/button_img_greenSH.svg', '/assets/ui/button_img_greenSH.svg') : _Utils_Tuple2('/assets/ui/button_img_green.svg', '/assets/ui/button_img_greenH.svg');
		var buttonAttr = _Utils_ap(
			_List_fromArray(
				[
					selected ? $phollyer$elm_cursor$Element$Cursor$default : $phollyer$elm_cursor$Element$Cursor$pointer,
					levelNumber,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Guide$SelectLevel(towerIndex))
				]),
			$author$project$Pages$Guide$hover_events(id));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(35, 35),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Game$Enemies$preview_enemy = F3(
	function (enemy, tileSize, listAttr) {
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_Utils_ap(
				listAttr,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(tileSize)),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(tileSize))
					])),
			{eO: 'enemy_preview', f5: enemy.v});
	});
var $author$project$Pages$Guide$show_enemy = F3(
	function (_v0, enemy, attr) {
		var w = _v0.a;
		var h = _v0.b;
		var newWidth = (w / 2) | 0;
		var _v1 = function () {
			var _v2 = enemy.A;
			if (_v2 === 1) {
				return _Utils_Tuple2(1, 1);
			} else {
				return _Utils_Tuple2(3, 5);
			}
		}();
		var roadIndex1 = _v1.a;
		var roadIndex2 = _v1.b;
		var leftRoad = A3(
			$author$project$Game$Tiles$create_tile,
			_Utils_Tuple2(0, 0),
			$author$project$Game$Tiles$Road,
			roadIndex1).b;
		var rightRoad = A3(
			$author$project$Game$Tiles$create_tile,
			_Utils_Tuple2(0, 0),
			$author$project$Game$Tiles$Road,
			roadIndex2).b;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				attr,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(h)),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w)),
						$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an),
						$mdgriffith$elm_ui$Element$Border$rounded(8),
						$mdgriffith$elm_ui$Element$Border$width(3),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$inFront(
						A3(
							$author$project$Game$Enemies$preview_enemy,
							enemy,
							h - 10,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])))
					])),
			_List_fromArray(
				[
					A2($author$project$Game$Tiles$preview_tile, leftRoad, newWidth - 2),
					A2($author$project$Game$Tiles$preview_tile, rightRoad, newWidth - 2)
				]));
	});
var $author$project$Pages$Guide$show_tile = F3(
	function (_v0, tile, attr) {
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				attr,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(h)),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w)),
						$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an),
						$mdgriffith$elm_ui$Element$Border$rounded(8),
						$mdgriffith$elm_ui$Element$Border$width(3),
						$mdgriffith$elm_ui$Element$clip
					])),
			A2($author$project$Game$Tiles$preview_tile, tile, w - 4));
	});
var $author$project$Pages$Guide$tip_text = F3(
	function (_v0, tipNumber, textParagraph) {
		var w = _v0.a;
		var h = _v0.b;
		var imageSize = ((h / 2) | 0) + ((h / 6) | 0);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(w)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$spacing(5),
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 4)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(imageSize)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(imageSize)),
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$centerY
						]),
					{
						eO: 'icon-tip_' + $elm$core$String$fromInt(tipNumber),
						f5: '/assets/ui/icons/lightbulb.svg'
					}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(h - 10)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(40)),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{ab: 0, af: 0, ai: 1, ak: 0}),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.an)
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							$author$project$Pages$Styles$fonts.b9,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(22),
									$mdgriffith$elm_ui$Element$Font$alignLeft,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K),
									$mdgriffith$elm_ui$Element$Font$extraBold,
									$mdgriffith$elm_ui$Element$centerY
								])),
						$mdgriffith$elm_ui$Element$text(
							'#' + $elm$core$String$fromInt(tipNumber)))),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.cq,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(15),
								$mdgriffith$elm_ui$Element$Font$medium
							])),
					textParagraph)
				]));
	});
var $author$project$Pages$Guide$left_panel = F2(
	function (model, currentCategory) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					{ab: 5, af: 15, ai: 30, ak: 10}),
					function () {
					switch (currentCategory) {
						case 0:
							return $mdgriffith$elm_ui$Element$spacing(14);
						case 1:
							return $mdgriffith$elm_ui$Element$spacing(2);
						case 2:
							return $mdgriffith$elm_ui$Element$spacing(8);
						default:
							return $mdgriffith$elm_ui$Element$spacing(12);
					}
				}()
				]),
			function () {
				switch (currentCategory) {
					case 0:
						return _List_fromArray(
							[
								A6(
								$author$project$Pages$Guide$icon_text,
								_Utils_Tuple2(420, 60),
								'icons/lives.svg',
								'Lives',
								false,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('When lives reach '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('0')),
										$mdgriffith$elm_ui$Element$text(' you '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('Lose')),
										$mdgriffith$elm_ui$Element$text(' the level')
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K)
									])),
								A6(
								$author$project$Pages$Guide$icon_text,
								_Utils_Tuple2(420, 60),
								'icons/money.svg',
								'Money',
								false,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Used to '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('Buy')),
										$mdgriffith$elm_ui$Element$text(' , '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('Upgrade')),
										$mdgriffith$elm_ui$Element$text(' towers and '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('Clear')),
										$mdgriffith$elm_ui$Element$text(' obstacles on map')
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K)
									])),
								A6(
								$author$project$Pages$Guide$icon_text,
								_Utils_Tuple2(420, 60),
								'icons/waves.svg',
								'Waves',
								false,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Defeating all enemies, therefore completing a wave rewards you with '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('Money'))
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K)
									])),
								A6(
								$author$project$Pages$Guide$icon_text,
								_Utils_Tuple2(420, 60),
								'map/road-flag.png',
								'Road\nEnd',
								false,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('This flag marks the destination of every enemy, enemies going beyond this point reduce '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('Lives'))
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K)
									])),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									$author$project$Pages$Styles$fonts.cr,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Font$size(24),
											$mdgriffith$elm_ui$Element$Font$extraBold,
											$mdgriffith$elm_ui$Element$Font$underline,
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 0, af: 0, ai: 0, ak: 10}),
											$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.cF),
											$mdgriffith$elm_ui$Element$Border$widthEach(
											{ab: 0, af: 0, ai: 0, ak: 2})
										])),
								$mdgriffith$elm_ui$Element$text('Level Speed')),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(40)),
										$mdgriffith$elm_ui$Element$spaceEvenly,
										$mdgriffith$elm_ui$Element$paddingEach(
										{ab: 0, af: 15, ai: 40, ak: 10})
									]),
								_List_fromArray(
									[
										A6(
										$author$project$Pages$Guide$icon_text,
										_Utils_Tuple2(200, 35),
										'icons/level_speed-0.svg',
										'0x',
										false,
										_List_Nil,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K)
											])),
										A6(
										$author$project$Pages$Guide$icon_text,
										_Utils_Tuple2(200, 35),
										'icons/level_speed-1.svg',
										'1x',
										false,
										_List_Nil,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K)
											])),
										A6(
										$author$project$Pages$Guide$icon_text,
										_Utils_Tuple2(200, 35),
										'icons/level_speed-2.svg',
										'2x',
										false,
										_List_Nil,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K)
											])),
										A6(
										$author$project$Pages$Guide$icon_text,
										_Utils_Tuple2(200, 35),
										'icons/level_speed-3.svg',
										'3x',
										true,
										_List_Nil,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K)
											]))
									]))
							]);
					case 1:
						var emptyTile = A3(
							$author$project$Game$Tiles$create_tile,
							_Utils_Tuple2(0, 0),
							$author$project$Game$Tiles$Lot($elm$core$Maybe$Nothing),
							0).b;
						var currentTower = A2($elm$core$Array$get, model.m - 1, model.bh);
						if (currentTower.$ === 1) {
							var sellPercent = $elm$core$Basics$round($author$project$Game$Towers$sellMultiplier * 100);
							return _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_Utils_ap(
										$author$project$Pages$Styles$fonts.cS,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(240)),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5),
												$mdgriffith$elm_ui$Element$Font$size(15)
											])),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text('Towers are your sole defense against incoming invaders. Each tower type has unique stats and projectile mechanics which provide advantages for damaging different types of enemies. You can upgrade any tower for a total of '),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
											$mdgriffith$elm_ui$Element$text(
												$elm$core$String$fromInt($author$project$Game$Towers$maxTowerLevel))),
											$mdgriffith$elm_ui$Element$text(' times. Upgrade cost increases with tower level. The final upgrade allows you to select one of 2 '),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text('Upgrade Paths')),
											$mdgriffith$elm_ui$Element$text('. These upgrades provide vastly different stats and some even slightly change projectile mechanics of towers. Any tower upgrade is irreversible, therefore the only way to dispose of unwanted towers is to '),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text('Sell')),
											$mdgriffith$elm_ui$Element$text(' them. Selling only returns '),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text(
												$elm$core$String$fromInt(sellPercent) + '%')),
											$mdgriffith$elm_ui$Element$text(' of money spent.')
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(140)),
											$mdgriffith$elm_ui$Element$alignBottom,
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 5, af: 5, ai: 5, ak: 10})
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_Utils_ap(
												$author$project$Pages$Styles$fonts.cq,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(300)),
														A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5),
														$mdgriffith$elm_ui$Element$alignLeft,
														$mdgriffith$elm_ui$Element$Font$size(15)
													])),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Towers can be placed anywhere on map with a free '),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$bold]),
													$mdgriffith$elm_ui$Element$text('Plot')),
													$mdgriffith$elm_ui$Element$text(' (see image). Some map tiles contain '),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$bold]),
													$mdgriffith$elm_ui$Element$text('Obstacles')),
													$mdgriffith$elm_ui$Element$text(' that can be cleared by selecting a tile and paying a certain amount of money. This cost depends on the '),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$bold]),
													$mdgriffith$elm_ui$Element$text('Type')),
													$mdgriffith$elm_ui$Element$text(' and '),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$bold]),
													$mdgriffith$elm_ui$Element$text('Size')),
													$mdgriffith$elm_ui$Element$text(' of selected obstacles.')
												])),
											A3(
											$author$project$Pages$Guide$show_tile,
											_Utils_Tuple2(100, 100),
											emptyTile,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$alignRight, $mdgriffith$elm_ui$Element$centerY]))
										]))
								]);
						} else {
							var t = currentTower.a;
							var baseIndex = function () {
								var _v5 = t.O;
								switch (_v5.$) {
									case 0:
										return 1;
									case 1:
										return 8;
									default:
										return 15;
								}
							}();
							var _v3 = $author$project$Game$Towers$get_tower_description(t);
							var towerName = _v3.a;
							var towerDecription = _v3.b;
							return _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(150)),
											A2($mdgriffith$elm_ui$Element$paddingXY, 5, 10),
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A3(
											$author$project$Pages$Guide$show_tile,
											_Utils_Tuple2(125, 125),
											emptyTile,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$alignLeft,
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$inFront(
													A4(
														$author$project$Game$Towers$preview_tower,
														t,
														100,
														0,
														_List_fromArray(
															[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])))
												])),
											A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$spacing(5),
													$mdgriffith$elm_ui$Element$padding(5)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_Utils_ap(
														$author$project$Pages$Styles$fonts.cr,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Font$size(22),
																$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K),
																$mdgriffith$elm_ui$Element$Font$alignLeft,
																$mdgriffith$elm_ui$Element$padding(5)
															])),
													$mdgriffith$elm_ui$Element$text(towerName)),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_Utils_ap(
														$author$project$Pages$Styles$fonts.cq,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$width(
																$mdgriffith$elm_ui$Element$px(260)),
																$mdgriffith$elm_ui$Element$height(
																$mdgriffith$elm_ui$Element$px(50)),
																$mdgriffith$elm_ui$Element$Font$size(16),
																$mdgriffith$elm_ui$Element$centerX,
																$mdgriffith$elm_ui$Element$centerY,
																$mdgriffith$elm_ui$Element$padding(5),
																$mdgriffith$elm_ui$Element$behindContent(
																A2(
																	$mdgriffith$elm_ui$Element$el,
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
																			$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.bX),
																			$mdgriffith$elm_ui$Element$Border$width(2),
																			$mdgriffith$elm_ui$Element$alpha(0.7)
																		]),
																	$mdgriffith$elm_ui$Element$none))
															])),
													A2(
														$mdgriffith$elm_ui$Element$paragraph,
														_List_Nil,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$text(towerDecription)
															]))),
													A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$spacing(10),
															A2($mdgriffith$elm_ui$Element$paddingXY, 30, 0)
														]),
													_List_fromArray(
														[
															A2(
															$mdgriffith$elm_ui$Element$image,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$height(
																	$mdgriffith$elm_ui$Element$px(35)),
																	$mdgriffith$elm_ui$Element$width(
																	$mdgriffith$elm_ui$Element$px(35)),
																	$mdgriffith$elm_ui$Element$alignLeft,
																	$mdgriffith$elm_ui$Element$centerY
																]),
															{eO: 'icon-cost', f5: '/assets/ui/icons/money.svg'}),
															A2(
															$mdgriffith$elm_ui$Element$paragraph,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$Font$size(20),
																	$mdgriffith$elm_ui$Element$Font$alignLeft,
																	$mdgriffith$elm_ui$Element$centerY
																]),
															_List_fromArray(
																[
																	A2(
																	$mdgriffith$elm_ui$Element$el,
																	_Utils_ap(
																		$author$project$Pages$Styles$fonts.cr,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.an),
																				$mdgriffith$elm_ui$Element$Font$extraBold,
																				$mdgriffith$elm_ui$Element$centerY
																			])),
																	$mdgriffith$elm_ui$Element$text('Cost = ')),
																	A2(
																	$mdgriffith$elm_ui$Element$el,
																	_Utils_ap(
																		$author$project$Pages$Styles$fonts.fs,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.dF),
																				$mdgriffith$elm_ui$Element$centerY
																			])),
																	$mdgriffith$elm_ui$Element$text(
																		$elm$core$String$fromInt(
																			A2(
																				$author$project$Game$Towers$get_tower_price,
																				t,
																				$author$project$Game$Towers$get_upgrade_type(t)))))
																]))
														]))
												]))
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(50)),
											$mdgriffith$elm_ui$Element$spacing(12),
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 5, af: 5, ai: 5, ak: 0})
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_Utils_ap(
												$author$project$Pages$Styles$fonts.b9,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(75)),
														$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
														$mdgriffith$elm_ui$Element$paddingEach(
														{ab: 0, af: 0, ai: 0, ak: 10}),
														$mdgriffith$elm_ui$Element$Border$widthEach(
														{ab: 0, af: 0, ai: 1, ak: 0}),
														$mdgriffith$elm_ui$Element$Font$size(22),
														$mdgriffith$elm_ui$Element$Font$semiBold,
														$mdgriffith$elm_ui$Element$Font$center,
														$mdgriffith$elm_ui$Element$Font$alignLeft
													])),
											$mdgriffith$elm_ui$Element$text('Levels')),
											A3($author$project$Pages$Guide$level_button, baseIndex, model, 18),
											A3($author$project$Pages$Guide$level_button, baseIndex + 1, model, 19),
											A3($author$project$Pages$Guide$level_button, baseIndex + 2, model, 20),
											A3($author$project$Pages$Guide$level_button, baseIndex + 3, model, 21),
											A3($author$project$Pages$Guide$level_button, baseIndex + 4, model, 22),
											A3($author$project$Pages$Guide$level_button, baseIndex + 5, model, 23),
											A3($author$project$Pages$Guide$level_button, baseIndex + 6, model, 24)
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(50)),
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 2, af: 10, ai: 10, ak: 10}),
											$mdgriffith$elm_ui$Element$spaceEvenly,
											$mdgriffith$elm_ui$Element$Border$widthEach(
											{ab: 0, af: 0, ai: 0, ak: 3}),
											$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.eR)
										]),
									_List_fromArray(
										[
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(180, 30),
											'damage.svg',
											_Utils_Tuple3(
												'Damage',
												$elm$core$String$fromInt(t.fK),
												'damage to enemy per shot'),
											false,
											model,
											25),
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(210, 30),
											'armor_ignore.svg',
											_Utils_Tuple3(
												'Armor Ignore',
												$elm$core$String$fromInt(t.fJ),
												'armor bypass per shot'),
											true,
											model,
											26)
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(40)),
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 2, af: 10, ai: 10, ak: 2}),
											$mdgriffith$elm_ui$Element$spaceEvenly
										]),
									_List_fromArray(
										[
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(210, 30),
											'attack_speed.svg',
											_Utils_Tuple3(
												'Fire-Rate',
												$author$project$Game$Towers$get_tower_fireRate(t),
												'number of shots/projectiles per second'),
											false,
											model,
											27),
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(180, 30),
											'range.svg',
											_Utils_Tuple3(
												'Range',
												$author$project$Game$Towers$get_tower_range(t),
												'range of tower (in tiles)'),
											true,
											model,
											28)
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(40)),
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 2, af: 10, ai: 10, ak: 2}),
											$mdgriffith$elm_ui$Element$spaceEvenly
										]),
									_List_fromArray(
										[
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(210, 30),
											'projectile_distance.svg',
											_Utils_Tuple3(
												'PR Distance',
												$author$project$Game$Towers$get_tower_projectileDistance(t),
												'projectile travel distance (in tiles)'),
											false,
											model,
											29),
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(180, 30),
											'projectile_speed.svg',
											_Utils_Tuple3(
												'PR Speed',
												$author$project$Game$Towers$get_tower_projectileSpeed(t),
												'projectile travel speed (tiles per second)'),
											true,
											model,
											30)
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(40)),
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 2, af: 10, ai: 10, ak: 2}),
											$mdgriffith$elm_ui$Element$spaceEvenly
										]),
									function () {
										var _v4 = t.O;
										if (_v4.$ === 2) {
											var explosion_range = _v4.a;
											return _List_fromArray(
												[
													A6(
													$author$project$Pages$Guide$icon_text_description,
													_Utils_Tuple2(210, 30),
													'projectile_pierce.svg',
													_Utils_Tuple3(
														'Pierce',
														$elm$core$String$fromInt(t.fM),
														'projectile pierce (max number of hit enemies)'),
													false,
													model,
													31),
													A6(
													$author$project$Pages$Guide$icon_text_description,
													_Utils_Tuple2(180, 30),
													'explosion_range.svg',
													_Utils_Tuple3(
														'EX Range',
														$elm$core$String$fromFloat(explosion_range),
														'range of missile explosion (in tiles)'),
													true,
													model,
													32)
												]);
										} else {
											return _List_fromArray(
												[
													A6(
													$author$project$Pages$Guide$icon_text_description,
													_Utils_Tuple2(210, 30),
													'projectile_pierce.svg',
													_Utils_Tuple3(
														'Pierce',
														$elm$core$String$fromInt(t.fM),
														'projectile pierce (max number of hit enemies)'),
													true,
													model,
													31)
												]);
										}
									}())
								]);
						}
					case 2:
						var road_tile = A3(
							$author$project$Game$Tiles$create_tile,
							_Utils_Tuple2(0, 0),
							$author$project$Game$Tiles$Road,
							15).b;
						var currentEnemy = A2($elm$core$Array$get, model.m - 1, model.ea);
						if (currentEnemy.$ === 1) {
							return _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_Utils_ap(
										$author$project$Pages$Styles$fonts.cS,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(150)),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5),
												$mdgriffith$elm_ui$Element$Font$size(15)
											])),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text('Every enemy has the same objective of reaching the end of the road on map, therefore reducing your current '),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text('Lives')),
											$mdgriffith$elm_ui$Element$text('. The amount of lives taken by enemies scales with their toughness. Enemies can also spawn with an '),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text('Offset')),
											$mdgriffith$elm_ui$Element$text(', which determines their shift towards the '),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text('Left')),
											$mdgriffith$elm_ui$Element$text(' or the '),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text('Right')),
											$mdgriffith$elm_ui$Element$text(' side of the road. There are '),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
											$mdgriffith$elm_ui$Element$text('2')),
											$mdgriffith$elm_ui$Element$text(' types of enemies, depending on their movement:')
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(145)),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$padding(5),
											$mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$column,
											_Utils_ap(
												$author$project$Pages$Styles$fonts.cq,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(300)),
														$mdgriffith$elm_ui$Element$alignLeft,
														$mdgriffith$elm_ui$Element$Font$size(15),
														$mdgriffith$elm_ui$Element$padding(5),
														$mdgriffith$elm_ui$Element$spacing(10)
													])),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_List_Nil,
													_List_fromArray(
														[
															A2(
															$mdgriffith$elm_ui$Element$el,
															_List_fromArray(
																[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
															$mdgriffith$elm_ui$Element$text('1. Ground Enemies')),
															$mdgriffith$elm_ui$Element$text(' - spawn directly on the road and move only along their current path towards the road end')
														])),
													A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_List_Nil,
													_List_fromArray(
														[
															A2(
															$mdgriffith$elm_ui$Element$el,
															_List_fromArray(
																[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
															$mdgriffith$elm_ui$Element$text('2. Flying Enemies')),
															$mdgriffith$elm_ui$Element$text(' - spawn in the middle of a runway (see image) and move along the shortest flight path towards road end')
														]))
												])),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$alignRight
												]),
											A3(
												$author$project$Pages$Guide$show_tile,
												_Utils_Tuple2(100, 100),
												road_tile,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$alignTop])))
										])),
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0),
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_Utils_ap(
												$author$project$Pages$Styles$fonts.cS,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
														$mdgriffith$elm_ui$Element$Font$size(14),
														$mdgriffith$elm_ui$Element$Font$alignLeft
													])),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Whenever an enemy gets hit, the damage they receive is calculated in the following way:')
												])),
											A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_Utils_ap(
												$author$project$Pages$Styles$fonts.fs,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(200)),
														$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
														$mdgriffith$elm_ui$Element$Font$size(16),
														$mdgriffith$elm_ui$Element$Font$center,
														$mdgriffith$elm_ui$Element$Font$bold,
														$mdgriffith$elm_ui$Element$paddingEach(
														{ab: 0, af: 10, ai: 0, ak: 10}),
														$mdgriffith$elm_ui$Element$Border$widthEach(
														{ab: 0, af: 1, ai: 0, ak: 0})
													])),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.dF),
															$mdgriffith$elm_ui$Element$paddingEach(
															{ab: 0, af: 25, ai: 0, ak: 0})
														]),
													$mdgriffith$elm_ui$Element$text('TOWER DAMAGE')),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$paddingEach(
															{ab: 0, af: 0, ai: 25, ak: 0})
														]),
													$mdgriffith$elm_ui$Element$text(' - ')),
													$mdgriffith$elm_ui$Element$text('( '),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.e4)
														]),
													$mdgriffith$elm_ui$Element$text('ENEMY ARMOR')),
													$mdgriffith$elm_ui$Element$text(' - '),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.fz),
															$mdgriffith$elm_ui$Element$paddingEach(
															{ab: 0, af: 0, ai: 0, ak: 0})
														]),
													$mdgriffith$elm_ui$Element$text('TOWER ARMOR IGNORE')),
													$mdgriffith$elm_ui$Element$text(' )')
												]))
										]))
								]);
						} else {
							var e = currentEnemy.a;
							return _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(100)),
											A2($mdgriffith$elm_ui$Element$paddingXY, 20, 5),
											$mdgriffith$elm_ui$Element$spacing(30),
											$mdgriffith$elm_ui$Element$Border$color($author$project$Pages$Styles$colors.eR),
											$mdgriffith$elm_ui$Element$Border$widthEach(
											{ab: 3, af: 0, ai: 0, ak: 0})
										]),
									_List_fromArray(
										[
											A3(
											$author$project$Pages$Guide$show_enemy,
											_Utils_Tuple2(160, 80),
											e,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$alignTop, $mdgriffith$elm_ui$Element$alignLeft])),
											A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$spacing(10),
													A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_Utils_ap(
														$author$project$Pages$Styles$fonts.b9,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																$mdgriffith$elm_ui$Element$Font$size(26),
																$mdgriffith$elm_ui$Element$Font$alignLeft,
																$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.K)
															])),
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$text(
															$author$project$Game$Enemies$get_enemy_name(e))
														])),
													function () {
													var _v7 = e.A;
													if (!_v7) {
														return A6(
															$author$project$Pages$Guide$icon_text,
															_Utils_Tuple2(150, 30),
															'icons/enemy_ground.svg',
															'Ground',
															true,
															_List_Nil,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.an)
																]));
													} else {
														return A6(
															$author$project$Pages$Guide$icon_text,
															_Utils_Tuple2(150, 30),
															'icons/enemy_flying.svg',
															'Flying',
															true,
															_List_Nil,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.an)
																]));
													}
												}()
												]))
										])),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											A2($mdgriffith$elm_ui$Element$paddingXY, 50, 10),
											$mdgriffith$elm_ui$Element$spacing(15)
										]),
									_List_fromArray(
										[
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(250, 40),
											'health.svg',
											_Utils_Tuple3(
												'Health',
												$elm$core$String$fromInt(e.h),
												'enemy health'),
											true,
											model,
											33),
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(250, 40),
											'armor.svg',
											_Utils_Tuple3(
												'Armor',
												$elm$core$String$fromInt(e.aa),
												'enemy armor'),
											true,
											model,
											34),
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(250, 40),
											'speed.svg',
											_Utils_Tuple3(
												'Speed',
												$elm$core$String$fromFloat(e.Y),
												'enemy movment speed (tiles per second)'),
											true,
											model,
											35),
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(250, 40),
											'lives.svg',
											_Utils_Tuple3(
												'Lives',
												$elm$core$String$fromInt(e.ag),
												'lives taken by enemy'),
											true,
											model,
											36),
											A6(
											$author$project$Pages$Guide$icon_text_description,
											_Utils_Tuple2(250, 40),
											'money.svg',
											_Utils_Tuple3(
												'Reward',
												$elm$core$String$fromInt(e.M),
												'money earned after deafeating enemy'),
											true,
											model,
											37)
										]))
								]);
						}
					default:
						return _List_fromArray(
							[
								A3(
								$author$project$Pages$Guide$tip_text,
								_Utils_Tuple2(420, 55),
								1,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('You shouldn\'t '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Clear Obstacles')),
										$mdgriffith$elm_ui$Element$text(' on spots where you don\'t want to place towers')
									])),
								A3(
								$author$project$Pages$Guide$tip_text,
								_Utils_Tuple2(420, 55),
								2,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('You can perform any action while the '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Level Speed')),
										$mdgriffith$elm_ui$Element$text(' is set to '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('0'))
									])),
								A3(
								$author$project$Pages$Guide$tip_text,
								_Utils_Tuple2(420, 55),
								3,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Setting you target to '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Strong')),
										$mdgriffith$elm_ui$Element$text(' or '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Close')),
										$mdgriffith$elm_ui$Element$text(' makes it easier for certain towers to hit enemies')
									])),
								A3(
								$author$project$Pages$Guide$tip_text,
								_Utils_Tuple2(420, 55),
								4,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Towers with levels '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('1')),
										$mdgriffith$elm_ui$Element$text(' or '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('MAX')),
										$mdgriffith$elm_ui$Element$text(' have the best '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('Cost Efficiency')),
										$mdgriffith$elm_ui$Element$text(' (damage per money spent)')
									])),
								A3(
								$author$project$Pages$Guide$tip_text,
								_Utils_Tuple2(420, 55),
								5,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Upgrading')),
										$mdgriffith$elm_ui$Element$text(' any tower resets its firing cooldown, making it shoot instantly')
									])),
								A3(
								$author$project$Pages$Guide$tip_text,
								_Utils_Tuple2(420, 55),
								6,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Level Speed')),
										$mdgriffith$elm_ui$Element$text(' doesn\'t affect clear time counter for completing levels, therefore '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('Higher')),
										$mdgriffith$elm_ui$Element$text(' speed means '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$underline]),
										$mdgriffith$elm_ui$Element$text('Better')),
										$mdgriffith$elm_ui$Element$text(' clear time')
									]))
							]);
				}
			}());
	});
var $author$project$Pages$Styles$menu_panel = function (screen) {
	return A2(
		$mdgriffith$elm_ui$Element$image,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(800)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(620)),
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$moveDown(50),
				$mdgriffith$elm_ui$Element$inFront(screen)
			]),
		{eO: 'panel_menu', f5: '/assets/ui/panel-menu.svg'});
};
var $author$project$Pages$Styles$panel_button = F4(
	function (_v0, buttonLabel, hover, hoverEvents) {
		var w = _v0.a;
		var h = _v0.b;
		var offset = _v0.c;
		var panelSource = _Utils_Tuple2('/assets/ui/button_panel.png', '/assets/ui/button_panelH.png');
		var link = $elm$core$String$toLower(buttonLabel);
		var buttonAttr = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					$author$project$Pages$Styles$fonts.cr,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(25),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$phollyer$elm_cursor$Element$Cursor$pointer
						])),
				$mdgriffith$elm_ui$Element$text(buttonLabel)));
		return A6(
			$author$project$Pages$Styles$link_button,
			_Utils_Tuple2(w, h),
			link,
			panelSource,
			hover,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$moveLeft(offset)
				]),
			A2($elm$core$List$cons, buttonAttr, hoverEvents));
	});
var $author$project$Pages$Styles$panel_button_home = F3(
	function (_v0, hover, hoverEvents) {
		var w = _v0.a;
		var h = _v0.b;
		var panelSource = _Utils_Tuple2('/assets/ui/button_panelhome.png', '/assets/ui/button_panelhomeH.png');
		var elementIcon = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(40)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(40)),
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$moveRight(8)
					]),
				{eO: 'img_home', f5: '/assets/ui/icons/home.svg'}));
		return A6(
			$author$project$Pages$Styles$link_button,
			_Utils_Tuple2(w, h),
			'home',
			panelSource,
			hover,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerY]),
			A2($elm$core$List$cons, elementIcon, hoverEvents));
	});
var $author$project$Pages$Styles$panel_button_inactive = F2(
	function (_v0, buttonLabel) {
		var w = _v0.a;
		var h = _v0.b;
		var offset = _v0.c;
		return A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(w)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$moveLeft(offset),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							$author$project$Pages$Styles$fonts.cr,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$semiBold,
									$mdgriffith$elm_ui$Element$Font$size(25),
									$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.cM)
								])),
						$mdgriffith$elm_ui$Element$text(buttonLabel)))
				]),
			{eO: 'button_selected', f5: '/assets/ui/button_panelS.png'});
	});
var $author$project$Pages$Guide$SelectObject = function (a) {
	return {$: 2, a: a};
};
var $author$project$Pages$Guide$enemy_button = F3(
	function (enemyIndex, model, id) {
		var selected = _Utils_eq(model.m, enemyIndex);
		var currentEnemy = A2(
			$elm$core$Maybe$withDefault,
			A3($author$project$Game$Enemies$create_enemy, 0, 0, 0).b,
			A2($elm$core$Array$get, enemyIndex - 1, model.ea));
		var enemyImage = $mdgriffith$elm_ui$Element$inFront(
			A3(
				$author$project$Game$Enemies$preview_enemy,
				currentEnemy,
				40,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])));
		var buttonSource = selected ? _Utils_Tuple2('/assets/ui/button_img_brownS2.svg', '/assets/ui/button_img_brownSH2.svg') : _Utils_Tuple2('/assets/ui/button_img_brown.svg', '/assets/ui/button_img_brownH.svg');
		var buttonAttr = _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Guide$SelectObject(enemyIndex)),
					enemyImage
				]),
			$author$project$Pages$Guide$hover_events(id));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(60, 60),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.fX);
var $author$project$Pages$Guide$tower_button = F3(
	function (towerIndex, model, id) {
		var currentTower = A2(
			$elm$core$Maybe$withDefault,
			A2($author$project$Game$Towers$create_tower, 'minigun', 1),
			A2($elm$core$Array$get, towerIndex - 1, model.bh));
		var towerImage = $mdgriffith$elm_ui$Element$inFront(
			A4(
				$author$project$Game$Towers$preview_tower,
				currentTower,
				60,
				0,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY])));
		var buttonAttr = _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Pages$Guide$SelectObject(towerIndex)),
					towerImage,
					$mdgriffith$elm_ui$Element$centerX
				]),
			$author$project$Pages$Guide$hover_events(id));
		var _v0 = $author$project$Pages$Guide$get_tower_index_range(towerIndex);
		var indexMin = _v0.a;
		var indexMax = _v0.b;
		var selected = (_Utils_cmp(indexMin, model.m) < 1) && (_Utils_cmp(indexMax, model.m) > -1);
		var buttonSource = selected ? _Utils_Tuple2('/assets/ui/button_img_brownS2.svg', '/assets/ui/button_img_brownSH2.svg') : _Utils_Tuple2('/assets/ui/button_img_brown.svg', '/assets/ui/button_img_brownH.svg');
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(80, 80),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $author$project$Pages$Guide$right_panel = F2(
	function (model, currentCategory) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$scrollbarY
				]),
			function () {
				switch (currentCategory) {
					case 0:
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_Utils_ap(
									$author$project$Pages$Styles$fonts.cS,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(15),
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 0, af: 8, ai: 0, ak: 0})
										])),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Brutal Bulkwar')),
										$mdgriffith$elm_ui$Element$text(' is a Tower Defense game, where your goal is to protect the lives of civilians from hostile military. The game consists of '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('9')),
										$mdgriffith$elm_ui$Element$text(' levels, each with unique challenges and groups of enemies to overcome. The only way to stop incoming enemies is to build and upgrade '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Towers')),
										$mdgriffith$elm_ui$Element$text(' on a map. Every tower shoots projectiles over time, thereby injuring the invaders. After deafeating all enemies in a single level, you unlock a '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('New Level')),
										$mdgriffith$elm_ui$Element$text(' and your best score is saved on the '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Scoreboard')),
										$mdgriffith$elm_ui$Element$text('. The game ends after completing the final ninth level.')
									]))
							]);
					case 1:
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spaceEvenly,
										A2($mdgriffith$elm_ui$Element$paddingXY, 0, 20)
									]),
								_List_fromArray(
									[
										A3($author$project$Pages$Guide$tower_button, 1, model, 7),
										A3($author$project$Pages$Guide$tower_button, 8, model, 8),
										A3($author$project$Pages$Guide$tower_button, 15, model, 9)
									]))
							]);
					case 2:
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(100)),
										$mdgriffith$elm_ui$Element$spaceEvenly,
										$mdgriffith$elm_ui$Element$paddingEach(
										{ab: 0, af: 2, ai: 2, ak: 20})
									]),
								_List_fromArray(
									[
										A3($author$project$Pages$Guide$enemy_button, 1, model, 10),
										A3($author$project$Pages$Guide$enemy_button, 2, model, 11),
										A3($author$project$Pages$Guide$enemy_button, 3, model, 12)
									])),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(80)),
										$mdgriffith$elm_ui$Element$spaceEvenly,
										A2($mdgriffith$elm_ui$Element$paddingXY, 2, 0)
									]),
								_List_fromArray(
									[
										A3($author$project$Pages$Guide$enemy_button, 4, model, 13),
										A3($author$project$Pages$Guide$enemy_button, 5, model, 14),
										A3($author$project$Pages$Guide$enemy_button, 6, model, 15)
									])),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(80)),
										$mdgriffith$elm_ui$Element$spaceEvenly,
										A2($mdgriffith$elm_ui$Element$paddingXY, 38, 0)
									]),
								_List_fromArray(
									[
										A3($author$project$Pages$Guide$enemy_button, 7, model, 16),
										A3($author$project$Pages$Guide$enemy_button, 8, model, 17)
									]))
							]);
					default:
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_Utils_ap(
									$author$project$Pages$Styles$fonts.cS,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(15),
											$mdgriffith$elm_ui$Element$paddingEach(
											{ab: 0, af: 8, ai: 0, ak: 0})
										])),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('This page contains useful advice for beating the game and getting better score. If you still struggle completing levels while using these tips I suggest also reducing '),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Difficulty')),
										$mdgriffith$elm_ui$Element$text('.')
									]))
							]);
				}
			}());
	});
var $author$project$Pages$Guide$view = function (model) {
	var currentCategory = $author$project$Pages$Guide$index_to_category(model.aK);
	return A2(
		$mdgriffith$elm_ui$Element$layout,
		A2($author$project$Pages$Styles$screen_background, '/assets/ui/background-menu.svg', 0.5),
		$author$project$Pages$Styles$menu_panel(
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						A2($mdgriffith$elm_ui$Element$paddingXY, 42, 44),
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(72)),
								A2($mdgriffith$elm_ui$Element$paddingXY, 5, 0)
							]),
						_List_fromArray(
							[
								A3(
								$author$project$Pages$Styles$panel_button_home,
								_Utils_Tuple2(75, 60),
								model.f === 1,
								$author$project$Pages$Guide$hover_events(1)),
								A4(
								$author$project$Pages$Styles$panel_button,
								_Utils_Tuple3(150, 60, 5),
								'Levels',
								model.f === 2,
								$author$project$Pages$Guide$hover_events(2)),
								A4(
								$author$project$Pages$Styles$panel_button,
								_Utils_Tuple3(150, 60, 10),
								'Score',
								model.f === 3,
								$author$project$Pages$Guide$hover_events(3)),
								A2(
								$author$project$Pages$Styles$panel_button_inactive,
								_Utils_Tuple3(150, 60, 15),
								'Guide'),
								A4(
								$author$project$Pages$Styles$panel_button,
								_Utils_Tuple3(150, 60, 20),
								'Settings',
								model.f === 4,
								$author$project$Pages$Guide$hover_events(4))
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$padding(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$alignLeft,
										$mdgriffith$elm_ui$Element$behindContent(
										A2(
											$mdgriffith$elm_ui$Element$image,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(460)),
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$moveUp(5),
													$mdgriffith$elm_ui$Element$moveLeft(10)
												]),
											{eO: 'panel_Info', f5: '/assets/ui/panel_info.svg'}))
									]),
								A2($author$project$Pages$Guide$left_panel, model, currentCategory)),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(220)),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$paddingEach(
										{ab: 5, af: 10, ai: 0, ak: 0}),
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(65)),
												$mdgriffith$elm_ui$Element$centerX
											]),
										_List_fromArray(
											[
												A3($author$project$Pages$Guide$arrow_button, -1, model, 5),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_Utils_ap(
													$author$project$Pages$Styles$fonts.b9,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$size(28),
															$mdgriffith$elm_ui$Element$Font$extraBold,
															$mdgriffith$elm_ui$Element$centerX,
															A2($mdgriffith$elm_ui$Element$Font$glow, $author$project$Pages$Styles$colors.eS, 2),
															$mdgriffith$elm_ui$Element$Font$underline
														])),
												$mdgriffith$elm_ui$Element$text(
													$author$project$Pages$Guide$category_to_str(currentCategory))),
												A3($author$project$Pages$Guide$arrow_button, 1, model, 6)
											])),
										A2($author$project$Pages$Guide$right_panel, model, currentCategory)
									]))
							]))
					]))));
};
var $author$project$Pages$Home$ButtonOver = $elm$core$Basics$identity;
var $author$project$Pages$Home$hover_events = function (id) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Events$onMouseEnter(id),
			$mdgriffith$elm_ui$Element$Events$onMouseLeave(0)
		]);
};
var $author$project$Pages$Home$menu_button = F5(
	function (_v0, link, label, model, id) {
		var w = _v0.a;
		var h = _v0.b;
		var buttonText = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					$author$project$Pages$Styles$fonts.b0,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(20),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY
						])),
				$mdgriffith$elm_ui$Element$text(label)));
		var buttonSource = _Utils_Tuple2('/assets/ui/button_blue.png', '/assets/ui/button_blueH.png');
		return A6(
			$author$project$Pages$Styles$link_button,
			_Utils_Tuple2(w, h),
			link,
			buttonSource,
			_Utils_eq(model.f, id),
			_List_Nil,
			A2(
				$elm$core$List$cons,
				buttonText,
				$author$project$Pages$Home$hover_events(id)));
	});
var $author$project$Pages$Home$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$layout,
		A2($author$project$Pages$Styles$screen_background, '/assets/ui/background-home.svg', 0.8),
		A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(300)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(500)),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$moveDown(400),
					$mdgriffith$elm_ui$Element$moveRight(50),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(350)),
								$mdgriffith$elm_ui$Element$centerX,
								A2($mdgriffith$elm_ui$Element$paddingXY, 15, 10),
								$mdgriffith$elm_ui$Element$moveDown(15),
								$mdgriffith$elm_ui$Element$spacing(20)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$centerX,
										A2($mdgriffith$elm_ui$Element$paddingXY, 10, 15),
										$mdgriffith$elm_ui$Element$moveDown(10),
										$mdgriffith$elm_ui$Element$spacing(25)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_Utils_ap(
													$author$project$Pages$Styles$fonts.cr,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$size(34),
															$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.eJ)
														])),
												$mdgriffith$elm_ui$Element$text('Brutal Bulkwar')),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_Utils_ap(
													$author$project$Pages$Styles$fonts.cr,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$size(20)
														])),
												$mdgriffith$elm_ui$Element$text('Tower Defense game'))
											])),
										A2(
										$mdgriffith$elm_ui$Element$image,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$alignRight,
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(75))
											]),
										{eO: 'tank', f5: '/assets/ui/image-tank.svg'})
									])),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$centerX,
										A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0),
										$mdgriffith$elm_ui$Element$spaceEvenly
									]),
								_List_fromArray(
									[
										A5(
										$author$project$Pages$Home$menu_button,
										_Utils_Tuple2(160, 60),
										'levels',
										'PLAY GAME',
										model,
										1),
										A5(
										$author$project$Pages$Home$menu_button,
										_Utils_Tuple2(100, 60),
										'info',
										'INFO',
										model,
										2)
									]))
							])))
				]),
			{eO: 'panel', f5: '/assets/ui/panel-home.svg'}));
};
var $author$project$Pages$Info$ButtonOver = $elm$core$Basics$identity;
var $author$project$Pages$Info$hover_events = function (id) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Events$onMouseEnter(id),
			$mdgriffith$elm_ui$Element$Events$onMouseLeave(0)
		]);
};
var $author$project$Pages$Info$back_button = F2(
	function (id, model) {
		var buttonSource = _Utils_Tuple2('/assets/ui/button_level.png', '/assets/ui/button_levelH.png');
		var buttonIcon = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(40)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(40)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY
					]),
				{eO: 'button-arrow', f5: '/assets/ui/icons/back_arrow.svg'}));
		return A6(
			$author$project$Pages$Styles$link_button,
			_Utils_Tuple2(60, 60),
			'home',
			buttonSource,
			_Utils_eq(model.f, id),
			_List_Nil,
			A2(
				$elm$core$List$cons,
				buttonIcon,
				$author$project$Pages$Info$hover_events(id)));
	});
var $author$project$Pages$Info$label_text = F2(
	function (label, labelText) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 20, 0),
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.b9,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(20),
								$mdgriffith$elm_ui$Element$Font$alignLeft
							])),
					$mdgriffith$elm_ui$Element$text(label)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.cq,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(18),
								$mdgriffith$elm_ui$Element$Font$alignLeft,
								$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.cM)
							])),
					$mdgriffith$elm_ui$Element$text(labelText))
				]));
	});
var $author$project$Pages$Info$link_text = F2(
	function (link, linkText) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$alignLeft]),
			{
				c2: A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.cq,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.el),
								$mdgriffith$elm_ui$Element$Font$underline,
								$mdgriffith$elm_ui$Element$Font$size(16),
								$phollyer$elm_cursor$Element$Cursor$pointer
							])),
					$mdgriffith$elm_ui$Element$text(linkText)),
				bV: link
			});
	});
var $author$project$Pages$Info$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$layout,
		A2($author$project$Pages$Styles$screen_background, '/assets/ui/background-home.svg', 0.45),
		A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(650)),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$padding(15),
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(90)),
										$mdgriffith$elm_ui$Element$spacing(50),
										A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10)
									]),
								_List_fromArray(
									[
										A2($author$project$Pages$Info$back_button, 1, model),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_Utils_ap(
											$author$project$Pages$Styles$fonts.cr,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(200)),
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$Font$size(24),
													$mdgriffith$elm_ui$Element$Font$alignLeft,
													$mdgriffith$elm_ui$Element$onRight(
													A2(
														$mdgriffith$elm_ui$Element$link,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$width(
																$mdgriffith$elm_ui$Element$px(45)),
																$mdgriffith$elm_ui$Element$moveRight(15),
																$mdgriffith$elm_ui$Element$centerY
															]),
														{
															c2: A2(
																$mdgriffith$elm_ui$Element$image,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
																	]),
																{eO: 'elm_logo', f5: '/assets/ui/elm_logo.svg'}),
															bV: ' https://elm-lang.org/'
														}))
												])),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('This project was created using Elm')
											]))
									])),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$paddingEach(
										{ab: 10, af: 15, ai: 15, ak: 20}),
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										A2($author$project$Pages$Info$label_text, 'GAME MADE BY:', 'Matúš Srnec'),
										A2($author$project$Pages$Info$label_text, 'PROJECT SUPERVISOR:', 'Ing. Ivan Kapustík'),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_Utils_ap(
											$author$project$Pages$Styles$fonts.cS,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$Font$size(14),
													A2($mdgriffith$elm_ui$Element$paddingXY, 30, 5)
												])),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('This game was created to showcase implementation of a single page application in Elm programming language. It is a part of Bachelor’s thesis written while studying at Slovak University of Technology in Bratislava.')
											]))
									])),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2($mdgriffith$elm_ui$Element$paddingXY, 20, 10),
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_Utils_ap(
											$author$project$Pages$Styles$fonts.b9,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$size(24),
													$mdgriffith$elm_ui$Element$Font$alignLeft,
													$mdgriffith$elm_ui$Element$Font$extraBold,
													A2($mdgriffith$elm_ui$Element$paddingXY, 5, 2)
												])),
										$mdgriffith$elm_ui$Element$text('Assets:')),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(165)),
												A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5),
												$mdgriffith$elm_ui$Element$spacing(10),
												$mdgriffith$elm_ui$Element$behindContent(
												A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.bX),
															$mdgriffith$elm_ui$Element$Border$width(2),
															$mdgriffith$elm_ui$Element$Border$rounded(10),
															$mdgriffith$elm_ui$Element$alpha(0.7)
														]),
													$mdgriffith$elm_ui$Element$none))
											]),
										_List_fromArray(
											[
												A2($author$project$Pages$Info$link_text, 'https://www.kenney.nl/', 'Textures for tiles, towers, enemies and projectiles - By Kenny'),
												A2($author$project$Pages$Info$link_text, 'https://www.freepik.com/free-vector/complete-set-level-button-game-pop-up-icon-window-elements-creating-medieval-rpg-video-games_13744748.htm', 'UI elements used for buttons and windows'),
												A2($author$project$Pages$Info$link_text, 'https://www.vecteezy.com/vector-art/120525-vectors-of-screw-nut-and-bolt', 'Additional decorative UI elements'),
												A2($author$project$Pages$Info$link_text, 'https://www.vecteezy.com/vector-art/552420-cartoon-army-tank-machine-with-big-cannon-ready-to-fire-vector-illustration', 'Tank icon'),
												A2($author$project$Pages$Info$link_text, 'https://www.freepik.com/free-vector/military-transport-concept_9585760.htm', 'Menu background'),
												A2($author$project$Pages$Info$link_text, ' https://www.vecteezy.com/vector-art/7581694-art-of-jungle-camouflage-stripes-pattern-military-background-ready-for-your-desig', 'Game background')
											])),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_Utils_ap(
											$author$project$Pages$Styles$fonts.b9,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$size(24),
													$mdgriffith$elm_ui$Element$Font$alignLeft,
													$mdgriffith$elm_ui$Element$Font$extraBold,
													A2($mdgriffith$elm_ui$Element$paddingXY, 5, 2)
												])),
										$mdgriffith$elm_ui$Element$text('Code contributions: ')),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(30)),
												A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5),
												$mdgriffith$elm_ui$Element$spacing(10),
												$mdgriffith$elm_ui$Element$behindContent(
												A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.bX),
															$mdgriffith$elm_ui$Element$Border$width(2),
															$mdgriffith$elm_ui$Element$Border$rounded(10),
															$mdgriffith$elm_ui$Element$alpha(0.7)
														]),
													$mdgriffith$elm_ui$Element$none))
											]),
										_List_fromArray(
											[
												A2($author$project$Pages$Info$link_text, 'https://github.com/ArthurGerbelot/rect-collide', 'Rotated rectangles collision')
											]))
									]))
							])))
				]),
			{eO: 'panel_info', f5: '/assets/ui/panel_info.svg'}));
};
var $author$project$Pages$LevelPreview$ButtonOver = function (a) {
	return {$: 0, a: a};
};
var $author$project$Pages$LevelPreview$hover_events = function (id) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Events$onMouseEnter(
			$author$project$Pages$LevelPreview$ButtonOver(id)),
			$mdgriffith$elm_ui$Element$Events$onMouseLeave(
			$author$project$Pages$LevelPreview$ButtonOver(0))
		]);
};
var $author$project$Pages$LevelPreview$NewLevel = function (a) {
	return {$: 1, a: a};
};
var $author$project$Pages$LevelPreview$level_button = F5(
	function (_v0, lvl, currentLevel, model, id) {
		var w = _v0.a;
		var h = _v0.b;
		var levelText = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					$author$project$Pages$Styles$fonts.b0,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$size(25),
							(_Utils_cmp(model.bG, lvl) < 0) ? $phollyer$elm_cursor$Element$Cursor$default : $phollyer$elm_cursor$Element$Cursor$pointer
						])),
				$mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(lvl))));
		if (_Utils_cmp(model.bG, lvl) < 0) {
			return A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(h)),
						levelText
					]),
				{
					eO: 'button' + $elm$core$String$fromInt(id),
					f5: '/assets/ui/button_levelL.png'
				});
		} else {
			if (_Utils_eq(currentLevel, lvl)) {
				return A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(w)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(h)),
							$mdgriffith$elm_ui$Element$pointer,
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Pages$LevelPreview$NewLevel($elm$core$Maybe$Nothing)),
							levelText
						]),
					{
						eO: 'button' + $elm$core$String$fromInt(id),
						f5: '/assets/ui/button_levelS.png'
					});
			} else {
				var buttonSource = _Utils_Tuple2('/assets/ui/button_level.png', '/assets/ui/button_levelH.png');
				var buttonAttr = _Utils_ap(
					_List_fromArray(
						[
							levelText,
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Pages$LevelPreview$NewLevel(
								$elm$core$Maybe$Just(lvl)))
						]),
					$author$project$Pages$LevelPreview$hover_events(id));
				return A4(
					$author$project$Pages$Styles$hover_button,
					_Utils_Tuple2(w, h),
					buttonSource,
					_Utils_eq(model.f, id),
					buttonAttr);
			}
		}
	});
var $author$project$Pages$LevelPreview$previewWH = 280;
var $mdgriffith$elm_ui$Internal$Flag$borderStyle = $mdgriffith$elm_ui$Internal$Flag$flag(11);
var $mdgriffith$elm_ui$Element$Border$dashed = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$borderStyle, $mdgriffith$elm_ui$Internal$Style$classes.eo);
var $author$project$User$get_medal = F2(
	function (scores, levelNumber) {
		var lvlScore = A2($elm$core$Array$get, levelNumber - 1, scores);
		var lives = function () {
			if (lvlScore.$ === 1) {
				return 0;
			} else {
				var s = lvlScore.a;
				return s.aq;
			}
		}();
		return (!lives) ? $elm$core$Maybe$Nothing : ((lives <= 8) ? $elm$core$Maybe$Just('/assets/ui/map/medal-bronze.png') : ((lives <= 16) ? $elm$core$Maybe$Just('/assets/ui/map/medal-silver.png') : ((lives <= 19) ? $elm$core$Maybe$Just('/assets/ui/map/medal-gold.png') : $elm$core$Maybe$Just('/assets/ui/map/medal-perfect.png'))));
	});
var $author$project$Pages$LevelPreview$preview_level = F4(
	function (_v0, state, model, id) {
		var w = _v0.a;
		var h = _v0.b;
		var _v1 = model.a1;
		if (_v1.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w + 4)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(h + 4)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.e4),
						$mdgriffith$elm_ui$Element$Border$dashed,
						$mdgriffith$elm_ui$Element$Border$width(2)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(0.6)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(w - 50)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(h - 50)),
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$alignTop
								]),
							{eO: 'level_placeholder', f5: '/assets/ui/background_unknown.svg'}),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_Utils_ap(
								$author$project$Pages$Styles$fonts.cS,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$alignBottom,
										$mdgriffith$elm_ui$Element$moveUp(30),
										$mdgriffith$elm_ui$Element$Font$size(20)
									])),
							$mdgriffith$elm_ui$Element$text('No level selected'))
						])));
		} else {
			var lvl = _v1.a;
			var newBoard = A4($author$project$Game$Playboard$create_board, lvl, w, h, 0);
			var newH = newBoard.aQ.a * newBoard.aV;
			var newW = newBoard.aQ.b * newBoard.aV;
			var medalImage = function () {
				var _v2 = A2($author$project$User$get_medal, model.bE, lvl);
				if (_v2.$ === 1) {
					return $mdgriffith$elm_ui$Element$none;
				} else {
					var m = _v2.a;
					return A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(30)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(60)),
								$mdgriffith$elm_ui$Element$alignTop,
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$moveDown(10),
								$mdgriffith$elm_ui$Element$moveRight(5)
							]),
						{eO: 'medal_image', f5: m});
				}
			}();
			var link = 'game#' + $elm$core$String$fromInt(lvl);
			var buttonSource = _Utils_Tuple2('/assets/ui/button_brown.png', '/assets/ui/button_brownH.png');
			var buttonAttr = A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							$author$project$Pages$Styles$fonts.b0,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$size(18),
									$mdgriffith$elm_ui$Element$Font$bold
								])),
						$mdgriffith$elm_ui$Element$text('START'))),
				$author$project$Pages$LevelPreview$hover_events(id));
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(newW + 4)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(newH + 4)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Background$color($author$project$Pages$Styles$colors.eS),
								$mdgriffith$elm_ui$Element$Border$dashed,
								$mdgriffith$elm_ui$Element$Border$width(2),
								$mdgriffith$elm_ui$Element$pointer
							]),
						A2(
							$mdgriffith$elm_ui$Element$link,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$alpha(0.8),
									$mdgriffith$elm_ui$Element$inFront(medalImage)
								]),
							{
								c2: A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$inFront(
											A2(
												$mdgriffith$elm_ui$Element$el,
												_Utils_ap(
													$author$project$Pages$Styles$fonts.cS,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$centerX,
															$mdgriffith$elm_ui$Element$alignBottom,
															$mdgriffith$elm_ui$Element$moveUp(30),
															$mdgriffith$elm_ui$Element$Font$size(20)
														])),
												$mdgriffith$elm_ui$Element$text(
													'Level ' + $elm$core$String$fromInt(lvl))))
										]),
									$mdgriffith$elm_ui$Element$html(
										A3($author$project$Game$Playboard$draw_board, newBoard, state.fQ, false))),
								bV: link
							})),
						A6(
						$author$project$Pages$Styles$link_button,
						_Utils_Tuple2(100, 40),
						link,
						buttonSource,
						_Utils_eq(model.f, id),
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
						buttonAttr)
					]));
		}
	});
var $mdgriffith$elm_ui$Element$Border$solid = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$borderStyle, $mdgriffith$elm_ui$Internal$Style$classes.eq);
var $author$project$Pages$LevelPreview$view = F2(
	function (state, model) {
		var selectedlevel = A2($elm$core$Maybe$withDefault, 0, model.a1);
		return A2(
			$mdgriffith$elm_ui$Element$layout,
			A2($author$project$Pages$Styles$screen_background, '/assets/ui/background-menu.svg', 0.5),
			$author$project$Pages$Styles$menu_panel(
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							A2($mdgriffith$elm_ui$Element$paddingXY, 42, 44)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(72)),
									A2($mdgriffith$elm_ui$Element$paddingXY, 5, 0)
								]),
							_List_fromArray(
								[
									A3(
									$author$project$Pages$Styles$panel_button_home,
									_Utils_Tuple2(75, 60),
									model.f === 1,
									$author$project$Pages$LevelPreview$hover_events(1)),
									A2(
									$author$project$Pages$Styles$panel_button_inactive,
									_Utils_Tuple3(150, 60, 5),
									'Levels'),
									A4(
									$author$project$Pages$Styles$panel_button,
									_Utils_Tuple3(150, 60, 10),
									'Score',
									model.f === 2,
									$author$project$Pages$LevelPreview$hover_events(2)),
									A4(
									$author$project$Pages$Styles$panel_button,
									_Utils_Tuple3(150, 60, 15),
									'Guide',
									model.f === 3,
									$author$project$Pages$LevelPreview$hover_events(3)),
									A4(
									$author$project$Pages$Styles$panel_button,
									_Utils_Tuple3(150, 60, 20),
									'Settings',
									model.f === 4,
									$author$project$Pages$LevelPreview$hover_events(4))
								])),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(460)),
									A2($mdgriffith$elm_ui$Element$paddingXY, 30, 40)
								]),
							_List_fromArray(
								[
									A4(
									$author$project$Pages$LevelPreview$preview_level,
									_Utils_Tuple2($author$project$Pages$LevelPreview$previewWH, $author$project$Pages$LevelPreview$previewWH),
									state,
									model,
									5),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(300)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(400)),
											$mdgriffith$elm_ui$Element$centerY,
											A2($mdgriffith$elm_ui$Element$paddingXY, 20, 20),
											$mdgriffith$elm_ui$Element$spacing(30)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_Utils_ap(
												$author$project$Pages$Styles$fonts.b9,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
														A2($mdgriffith$elm_ui$Element$paddingXY, 0, 8),
														$mdgriffith$elm_ui$Element$Font$size(30),
														$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.an),
														$mdgriffith$elm_ui$Element$Border$solid,
														$mdgriffith$elm_ui$Element$Border$widthEach(
														{ab: 1, af: 0, ai: 0, ak: 0})
													])),
											$mdgriffith$elm_ui$Element$text('Choose a level')),
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$moveDown(20),
													A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0),
													$mdgriffith$elm_ui$Element$spaceEvenly
												]),
											_List_fromArray(
												[
													A5(
													$author$project$Pages$LevelPreview$level_button,
													_Utils_Tuple2(50, 50),
													1,
													selectedlevel,
													model,
													6),
													A5(
													$author$project$Pages$LevelPreview$level_button,
													_Utils_Tuple2(50, 50),
													2,
													selectedlevel,
													model,
													7),
													A5(
													$author$project$Pages$LevelPreview$level_button,
													_Utils_Tuple2(50, 50),
													3,
													selectedlevel,
													model,
													8)
												])),
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$moveDown(20),
													A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0),
													$mdgriffith$elm_ui$Element$spaceEvenly
												]),
											_List_fromArray(
												[
													A5(
													$author$project$Pages$LevelPreview$level_button,
													_Utils_Tuple2(50, 50),
													4,
													selectedlevel,
													model,
													9),
													A5(
													$author$project$Pages$LevelPreview$level_button,
													_Utils_Tuple2(50, 50),
													5,
													selectedlevel,
													model,
													10),
													A5(
													$author$project$Pages$LevelPreview$level_button,
													_Utils_Tuple2(50, 50),
													6,
													selectedlevel,
													model,
													11)
												])),
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$moveDown(20),
													A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0),
													$mdgriffith$elm_ui$Element$spaceEvenly
												]),
											_List_fromArray(
												[
													A5(
													$author$project$Pages$LevelPreview$level_button,
													_Utils_Tuple2(50, 50),
													7,
													selectedlevel,
													model,
													12),
													A5(
													$author$project$Pages$LevelPreview$level_button,
													_Utils_Tuple2(50, 50),
													8,
													selectedlevel,
													model,
													13),
													A5(
													$author$project$Pages$LevelPreview$level_button,
													_Utils_Tuple2(50, 50),
													9,
													selectedlevel,
													model,
													14)
												]))
										]))
								]))
						]))));
	});
var $author$project$Pages$ScoreBoard$ButtonOver = $elm$core$Basics$identity;
var $author$project$Pages$ScoreBoard$hover_events = function (id) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Events$onMouseEnter(id),
			$mdgriffith$elm_ui$Element$Events$onMouseLeave(0)
		]);
};
var $author$project$User$get_score = function (score) {
	var totalTime = score.aH / 1000;
	var seconds = $elm$core$Basics$ceiling(totalTime) % 60;
	var not_complete = !score.aq;
	var minutes = $elm$core$Basics$floor(totalTime / 60);
	var time = not_complete ? '✘' : ((!minutes) ? ($elm$core$String$fromInt(seconds) + ' s') : ($elm$core$String$fromInt(minutes) + (' m : ' + ($elm$core$String$fromInt(seconds) + ' s'))));
	var lives = not_complete ? '✘' : $elm$core$String$fromInt(score.aq);
	return _Utils_Tuple2(lives, time);
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $author$project$Pages$ScoreBoard$level_row = F2(
	function (score, rowNumber) {
		var livesGlow = A2($mdgriffith$elm_ui$Element$Font$glow, $author$project$Pages$Styles$colors.bX, 2);
		var isEven = !A2($elm$core$Basics$modBy, 2, rowNumber);
		var imageSource = isEven ? '/assets/ui/row_even.svg' : '/assets/ui/row.svg';
		var _v0 = $author$project$User$get_score(score);
		var lives = _v0.a;
		var time = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(60)),
					$mdgriffith$elm_ui$Element$behindContent(
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
							]),
						{
							eO: 'row-' + $elm$core$String$fromInt(rowNumber),
							f5: imageSource
						}))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.b9,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(120)),
								$mdgriffith$elm_ui$Element$Font$size(30),
								$mdgriffith$elm_ui$Element$Font$extraBold,
								$mdgriffith$elm_ui$Element$Font$alignLeft,
								A2($mdgriffith$elm_ui$Element$paddingXY, 40, 15)
							])),
					$mdgriffith$elm_ui$Element$text(
						$elm$core$String$fromInt(rowNumber) + '.')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.fs,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(180)),
								$mdgriffith$elm_ui$Element$Font$size(25),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Font$center,
								livesGlow,
								A2($mdgriffith$elm_ui$Element$paddingXY, 0, 17)
							])),
					$mdgriffith$elm_ui$Element$text(lives)),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.fs,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Font$size(25),
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Font$center,
								livesGlow,
								A2($mdgriffith$elm_ui$Element$paddingXY, 0, 17)
							])),
					$mdgriffith$elm_ui$Element$text(time))
				]));
	});
var $author$project$Pages$ScoreBoard$icon_text = F4(
	function (_v0, label, iconName, last) {
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(w)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$alignLeft,
					last ? $mdgriffith$elm_ui$Element$spacing(8) : $mdgriffith$elm_ui$Element$spacing(15),
					last ? $mdgriffith$elm_ui$Element$Border$width(0) : $mdgriffith$elm_ui$Element$Border$widthEach(
					{ab: 0, af: 0, ai: 2, ak: 0})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px((h / 2) | 0)),
							$mdgriffith$elm_ui$Element$alignLeft,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$centerX
						]),
					{eO: 'icon_' + iconName, f5: '/assets/ui/icons/' + (iconName + '.svg')}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						$author$project$Pages$Styles$fonts.eP,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(22),
								$mdgriffith$elm_ui$Element$Font$semiBold,
								$mdgriffith$elm_ui$Element$Font$center,
								$mdgriffith$elm_ui$Element$centerX
							])),
					$mdgriffith$elm_ui$Element$text(label))
				]));
	});
var $author$project$Pages$ScoreBoard$top_row = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(80)),
			$mdgriffith$elm_ui$Element$alignTop,
			$mdgriffith$elm_ui$Element$moveDown(43),
			A2($mdgriffith$elm_ui$Element$paddingXY, 58, 0)
		]),
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				$author$project$Pages$Styles$fonts.eP,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(123)),
						$mdgriffith$elm_ui$Element$Font$size(22),
						$mdgriffith$elm_ui$Element$Font$semiBold,
						$mdgriffith$elm_ui$Element$alignLeft,
						A2($mdgriffith$elm_ui$Element$paddingXY, 0, 15),
						$mdgriffith$elm_ui$Element$Border$widthEach(
						{ab: 0, af: 0, ai: 2, ak: 0})
					])),
			$mdgriffith$elm_ui$Element$text('Level\nNumber')),
			A4(
			$author$project$Pages$ScoreBoard$icon_text,
			_Utils_Tuple2(177, 80),
			'Highest\nlives',
			'lives',
			false),
			A4(
			$author$project$Pages$ScoreBoard$icon_text,
			_Utils_Tuple2(283, 80),
			'Best Finish\nTime',
			'clock',
			true)
		]));
var $author$project$Pages$ScoreBoard$view = function (model) {
	var _v0 = A3(
		$elm$core$Array$foldr,
		F2(
			function (o, _v1) {
				var listR = _v1.a;
				var num = _v1.b;
				var newRow = A2($author$project$Pages$ScoreBoard$level_row, o, num);
				var newNum = num - 1;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, newRow, listR),
					newNum);
			}),
		_Utils_Tuple2(_List_Nil, $author$project$User$maxMapNumber),
		model.b3);
	var rows = _v0.a;
	var rowNumber = _v0.b;
	return A2(
		$mdgriffith$elm_ui$Element$layout,
		A2($author$project$Pages$Styles$screen_background, '/assets/ui/background-menu.svg', 0.5),
		$author$project$Pages$Styles$menu_panel(
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						A2($mdgriffith$elm_ui$Element$paddingXY, 42, 44)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(72)),
								A2($mdgriffith$elm_ui$Element$paddingXY, 5, 0)
							]),
						_List_fromArray(
							[
								A3(
								$author$project$Pages$Styles$panel_button_home,
								_Utils_Tuple2(75, 60),
								model.f === 1,
								$author$project$Pages$ScoreBoard$hover_events(1)),
								A4(
								$author$project$Pages$Styles$panel_button,
								_Utils_Tuple3(150, 60, 5),
								'Levels',
								model.f === 2,
								$author$project$Pages$ScoreBoard$hover_events(2)),
								A2(
								$author$project$Pages$Styles$panel_button_inactive,
								_Utils_Tuple3(150, 60, 10),
								'Score'),
								A4(
								$author$project$Pages$Styles$panel_button,
								_Utils_Tuple3(150, 60, 15),
								'Guide',
								model.f === 3,
								$author$project$Pages$ScoreBoard$hover_events(3)),
								A4(
								$author$project$Pages$Styles$panel_button,
								_Utils_Tuple3(150, 60, 20),
								'Settings',
								model.f === 4,
								$author$project$Pages$ScoreBoard$hover_events(4))
							])),
						$author$project$Pages$ScoreBoard$top_row,
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(600)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(295)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$alignTop,
								$mdgriffith$elm_ui$Element$scrollbarY,
								$mdgriffith$elm_ui$Element$spacing(-1)
							]),
						rows)
					]))));
};
var $author$project$Pages$Settings$ChangeLevel = function (a) {
	return {$: 2, a: a};
};
var $author$project$Pages$Settings$ChangeName = function (a) {
	return {$: 1, a: a};
};
var $author$project$Pages$Settings$ChangeDifficulty = function (a) {
	return {$: 3, a: a};
};
var $author$project$Pages$Settings$ButtonOver = function (a) {
	return {$: 0, a: a};
};
var $author$project$Pages$Settings$hover_events = function (id) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Events$onMouseEnter(
			$author$project$Pages$Settings$ButtonOver(id)),
			$mdgriffith$elm_ui$Element$Events$onMouseLeave(
			$author$project$Pages$Settings$ButtonOver(0))
		]);
};
var $author$project$Pages$Settings$difficulty_button = F3(
	function (buttonLabel, model, id) {
		var selected = _Utils_eq(
			buttonLabel,
			$author$project$User$diff_to_str(model.b2.eQ));
		var buttonText = $mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					$author$project$Pages$Styles$fonts.b0,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$size(20),
							selected ? $phollyer$elm_cursor$Element$Cursor$default : $phollyer$elm_cursor$Element$Cursor$pointer,
							selected ? $mdgriffith$elm_ui$Element$Font$semiBold : $mdgriffith$elm_ui$Element$Font$medium
						])),
				$mdgriffith$elm_ui$Element$text(buttonLabel)));
		var buttonSource = selected ? _Utils_Tuple2('/assets/ui/button_difficultyS.png', '/assets/ui/button_difficultyS.png') : _Utils_Tuple2('/assets/ui/button_difficulty.png', '/assets/ui/button_difficultyH.png');
		var buttonAttr = selected ? _Utils_ap(
			$author$project$Pages$Settings$hover_events(id),
			_List_fromArray(
				[
					$phollyer$elm_cursor$Element$Cursor$default,
					$mdgriffith$elm_ui$Element$onLeft(
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(25)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(25)),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$moveLeft(5)
							]),
						{eO: 'arrow_r', f5: '/assets/ui/icons/arrow-r.svg'})),
					$mdgriffith$elm_ui$Element$onRight(
					A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(25)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(25)),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$moveRight(5)
							]),
						{eO: 'arrow_l', f5: '/assets/ui/icons/arrow-l.svg'}))
				])) : A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$Pages$Settings$ChangeDifficulty(buttonLabel)),
			$author$project$Pages$Settings$hover_events(id));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(120, 50),
			buttonSource,
			_Utils_eq(model.f, id),
			A2($elm$core$List$cons, buttonText, buttonAttr));
	});
var $mdgriffith$elm_ui$Internal$Model$Focus = 0;
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 1:
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						e8: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.e8, add, context));
							}),
						f9: styled.f9
					});
			case 0:
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 2:
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 2:
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 6:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 5:
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 7:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 8:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 3:
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 4:
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 9:
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 1:
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 4:
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 10:
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$focused = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$focus,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			0,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.c0 ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.u.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.u.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.aI) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.bS) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.J)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {aI: almostShade.aI, J: almostShade.J, c0: false, u: almostShade.u, bS: almostShade.bS};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Element$Border$glow = F2(
	function (clr, size) {
		return $mdgriffith$elm_ui$Element$Border$shadow(
			{
				aI: size * 2,
				J: clr,
				u: _Utils_Tuple2(0, 0),
				bS: size
			});
	});
var $mdgriffith$elm_ui$Element$Input$Below = 3;
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$labelBelow = $mdgriffith$elm_ui$Element$Input$Label(3);
var $mdgriffith$elm_ui$Element$Input$OnLeft = 1;
var $mdgriffith$elm_ui$Element$Input$labelLeft = $mdgriffith$elm_ui$Element$Input$Label(1);
var $author$project$Pages$Settings$label_text = _Utils_ap(
	$author$project$Pages$Styles$fonts.b9,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$centerY,
			A2($mdgriffith$elm_ui$Element$paddingXY, 40, 0),
			$mdgriffith$elm_ui$Element$Font$size(30),
			$mdgriffith$elm_ui$Element$Font$alignLeft,
			$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.d_)
		]));
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $author$project$Pages$Settings$SaveUser = {$: 4};
var $author$project$Pages$Settings$save_button = F2(
	function (model, id) {
		var buttonSource = _Utils_Tuple2('/assets/ui/button_brown.png', '/assets/ui/button_brownH.png');
		var buttonAttr = _Utils_ap(
			$author$project$Pages$Settings$hover_events(id),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick($author$project$Pages$Settings$SaveUser),
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							$author$project$Pages$Styles$fonts.b0,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$size(18),
									$mdgriffith$elm_ui$Element$Font$bold
								])),
						$mdgriffith$elm_ui$Element$text('SAVE CHANGES')))
				]));
		return A4(
			$author$project$Pages$Styles$hover_button,
			_Utils_Tuple2(180, 50),
			buttonSource,
			_Utils_eq(model.f, id),
			buttonAttr);
	});
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 6};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 1) {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position) {
				case 2:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bD),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 3:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bD),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 0:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bD),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bD),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Internal$Model$getHeight = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (!acc.$) {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 8) {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$getSpacing = F2(
	function (attrs, _default) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A3(
				$elm$core$List$foldr,
				F2(
					function (attr, acc) {
						if (!acc.$) {
							var x = acc.a;
							return $elm$core$Maybe$Just(x);
						} else {
							if ((attr.$ === 4) && (attr.b.$ === 5)) {
								var _v2 = attr.b;
								var x = _v2.b;
								var y = _v2.c;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}),
				$elm$core$Maybe$Nothing,
				attrs));
	});
var $mdgriffith$elm_ui$Internal$Model$getWidth = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (!acc.$) {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 7) {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 1) {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 1) {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 1, a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$html$Html$Attributes$step = function (n) {
	return A2($elm$html$Html$Attributes$stringProperty, 'step', n);
};
var $elm$core$String$toFloat = _String_toFloat;
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$fillPortion = $mdgriffith$elm_ui$Internal$Model$Fill;
var $mdgriffith$elm_ui$Internal$Model$mapAttr = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 2:
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 6:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 5:
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 7:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 8:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 3:
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 4:
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 9:
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 1:
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Element$Input$viewHorizontalThumb = F3(
	function (factor, thumbAttributes, trackHeight) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackHeight)),
					$mdgriffith$elm_ui$Element$centerY
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerY,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$viewVerticalThumb = F3(
	function (factor, thumbAttributes, trackWidth) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerX,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$slider = F2(
	function (attributes, input) {
		var trackWidth = $mdgriffith$elm_ui$Internal$Model$getWidth(attributes);
		var trackHeight = $mdgriffith$elm_ui$Internal$Model$getHeight(attributes);
		var vertical = function () {
			var _v8 = _Utils_Tuple2(trackWidth, trackHeight);
			_v8$3:
			while (true) {
				if (_v8.a.$ === 1) {
					if (_v8.b.$ === 1) {
						var _v9 = _v8.a;
						var _v10 = _v8.b;
						return false;
					} else {
						break _v8$3;
					}
				} else {
					if ((!_v8.a.a.$) && (!_v8.b.$)) {
						switch (_v8.b.a.$) {
							case 0:
								var w = _v8.a.a.a;
								var h = _v8.b.a.a;
								return _Utils_cmp(h, w) > 0;
							case 2:
								return true;
							default:
								break _v8$3;
						}
					} else {
						break _v8$3;
					}
				}
			}
			return false;
		}();
		var factor = (input.gz - input.fp) / (input.fo - input.fp);
		var _v0 = input.gr;
		var thumbAttributes = _v0;
		var height = $mdgriffith$elm_ui$Internal$Model$getHeight(thumbAttributes);
		var thumbHeightString = function () {
			if (height.$ === 1) {
				return '20px';
			} else {
				if (!height.a.$) {
					var px = height.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var width = $mdgriffith$elm_ui$Internal$Model$getWidth(thumbAttributes);
		var thumbWidthString = function () {
			if (width.$ === 1) {
				return '20px';
			} else {
				if (!width.a.$) {
					var px = width.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var className = 'thmb-' + (thumbWidthString + ('-' + thumbHeightString));
		var thumbShadowStyle = _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', thumbWidthString),
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', thumbHeightString)
			]);
		var _v1 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attributes,
			_Utils_Tuple2(5, 5));
		var spacingX = _v1.a;
		var spacingY = _v1.b;
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(input.c2) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : A2($mdgriffith$elm_ui$Element$spacingXY, spacingX, spacingY),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$width(
					function () {
						if (trackWidth.$ === 1) {
							return $mdgriffith$elm_ui$Element$fill;
						} else {
							if (!trackWidth.a.$) {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackWidth.a;
								return x;
							}
						}
					}()),
					$mdgriffith$elm_ui$Element$height(
					function () {
						if (trackHeight.$ === 1) {
							return $mdgriffith$elm_ui$Element$shrink;
						} else {
							if (!trackHeight.a.$) {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackHeight.a;
								return x;
							}
						}
					}())
				]),
			input.c2,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
						$mdgriffith$elm_ui$Element$height(
						A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$px(20),
							trackHeight))
					]),
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('input'),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.c2),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$active,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-moz-range-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$hover,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-webkit-slider-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$focus,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-ms-thumb'), thumbShadowStyle)),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$class(className + ' ui-slide-bar focusable-parent')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Events$onInput(
									function (str) {
										var _v4 = $elm$core$String$toFloat(str);
										if (_v4.$ === 1) {
											return input.dr(0);
										} else {
											var val = _v4.a;
											return input.dr(val);
										}
									})),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_('range')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$step(
									function () {
										var _v5 = input.f6;
										if (_v5.$ === 1) {
											return 'any';
										} else {
											var step = _v5.a;
											return $elm$core$String$fromFloat(step);
										}
									}())),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$min(
									$elm$core$String$fromFloat(input.fp))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$max(
									$elm$core$String$fromFloat(input.fo))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$value(
									$elm$core$String$fromFloat(input.gz))),
								vertical ? $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'orient', 'vertical')) : $mdgriffith$elm_ui$Internal$Model$NoAttribute,
								$mdgriffith$elm_ui$Element$width(
								vertical ? A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight) : A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
								$mdgriffith$elm_ui$Element$height(
								vertical ? A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth) : A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight))
							]),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width(
								A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height(
									A2(
										$elm$core$Maybe$withDefault,
										$mdgriffith$elm_ui$Element$px(20),
										trackHeight)),
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$behindContent(
											vertical ? A3(
												$mdgriffith$elm_ui$Element$Input$viewVerticalThumb,
												factor,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable-thumb'),
													thumbAttributes),
												trackWidth) : A3(
												$mdgriffith$elm_ui$Element$Input$viewHorizontalThumb,
												factor,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable-thumb'),
													thumbAttributes),
												trackHeight))
										])))),
						$mdgriffith$elm_ui$Element$none)
					])));
	});
var $phollyer$elm_cursor$Html$Cursor$text = $phollyer$elm_cursor$Html$Cursor$cursor('text');
var $phollyer$elm_cursor$Element$Cursor$text = $phollyer$elm_cursor$Element$Cursor$cursor($phollyer$elm_cursor$Html$Cursor$text);
var $mdgriffith$elm_ui$Element$Input$Thumb = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Element$Input$thumb = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 1};
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 1) {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 1) {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 8) {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 4) && (attr.b.$ === 11)) && (!attr.b.a)) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return true;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (!label.$) {
		var loc = label.a;
		switch (loc) {
			case 0:
				return false;
			case 1:
				return false;
			case 2:
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {ab: -box.ab, af: -box.af, ai: -box.ai, ak: -box.ak};
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 2:
				return true;
			case 1:
				return false;
			case 0:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 9:
				return _Utils_update(
					els,
					{
						a: A2($elm$core$List$cons, attr, els.a)
					});
			case 7:
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						g: A2($elm$core$List$cons, attr, els.g),
						q: A2($elm$core$List$cons, attr, els.q),
						a: A2($elm$core$List$cons, attr, els.a)
					}) : (stacked ? _Utils_update(
					els,
					{
						g: A2($elm$core$List$cons, attr, els.g)
					}) : _Utils_update(
					els,
					{
						a: A2($elm$core$List$cons, attr, els.a)
					}));
			case 8:
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						g: A2($elm$core$List$cons, attr, els.g),
						a: A2($elm$core$List$cons, attr, els.a)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						g: A2($elm$core$List$cons, attr, els.g),
						a: A2($elm$core$List$cons, attr, els.a)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						a: A2($elm$core$List$cons, attr, els.a)
					}) : _Utils_update(
					els,
					{
						a: A2($elm$core$List$cons, attr, els.a)
					})));
			case 6:
				return _Utils_update(
					els,
					{
						g: A2($elm$core$List$cons, attr, els.g)
					});
			case 5:
				return _Utils_update(
					els,
					{
						g: A2($elm$core$List$cons, attr, els.g)
					});
			case 4:
				switch (attr.b.$) {
					case 5:
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								g: A2($elm$core$List$cons, attr, els.g),
								q: A2($elm$core$List$cons, attr, els.q),
								a: A2($elm$core$List$cons, attr, els.a),
								aY: A2($elm$core$List$cons, attr, els.aY)
							});
					case 7:
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									D: A2($elm$core$List$cons, attr, els.D),
									a: A2($elm$core$List$cons, attr, els.a)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									D: A2($elm$core$List$cons, attr, els.D),
									q: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.q)),
									a: A2($elm$core$List$cons, reducedVerticalPadding, els.a)
								});
						}
					case 6:
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								D: A2($elm$core$List$cons, attr, els.D),
								a: A2($elm$core$List$cons, attr, els.a)
							});
					case 10:
						return _Utils_update(
							els,
							{
								D: A2($elm$core$List$cons, attr, els.D),
								a: A2($elm$core$List$cons, attr, els.a)
							});
					case 2:
						return _Utils_update(
							els,
							{
								g: A2($elm$core$List$cons, attr, els.g)
							});
					case 1:
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								g: A2($elm$core$List$cons, attr, els.g)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								a: A2($elm$core$List$cons, attr, els.a)
							});
				}
			case 0:
				return els;
			case 1:
				var a = attr.a;
				return _Utils_update(
					els,
					{
						q: A2($elm$core$List$cons, attr, els.q)
					});
			case 2:
				return _Utils_update(
					els,
					{
						q: A2($elm$core$List$cons, attr, els.q)
					});
			case 3:
				return _Utils_update(
					els,
					{
						a: A2($elm$core$List$cons, attr, els.a)
					});
			default:
				return _Utils_update(
					els,
					{
						q: A2($elm$core$List$cons, attr, els.q)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				D: $elm$core$List$reverse(redist.D),
				g: $elm$core$List$reverse(redist.g),
				q: $elm$core$List$reverse(redist.q),
				a: $elm$core$List$reverse(redist.a),
				aY: $elm$core$List$reverse(redist.aY)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{D: _List_Nil, g: _List_Nil, q: _List_Nil, a: _List_Nil, aY: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.ak;
	var right = _v0.ai;
	var bottom = _v0.ab;
	var left = _v0.af;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dq + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fC)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.y, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.c2),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.y;
			if (!_v7.$) {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 7)) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						ab: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						af: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						ai: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						ak: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{ab: 0, af: 0, ai: 0, ak: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.y;
				if (!_v3.$) {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.y;
					if (!_v4.$) {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.fi)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.fe),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.gd),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.dr)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.c2),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.Z),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.N))
						]),
					redistributed.q)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.y;
			if (_v0.$ === 1) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cT),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.fh)
								])),
						redistributed.a),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.fg),
												redistributed.aY)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.gd === '') {
											var _v1 = textOptions.fD;
											if (_v1.$ === 1) {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.gd === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.ff)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.gd + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cT),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.a,
										function () {
										var _v2 = textOptions.fD;
										if (_v2.$ === 1) {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.D, textOptions.gd === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.eI),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.c2) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.g))),
			textOptions.c2,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$username = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		N: $elm$core$Maybe$Just('username'),
		Z: false,
		y: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $author$project$Pages$Settings$view = function (model) {
	var currentLevel = $author$project$User$get_unlocked_level(model.b2);
	return A2(
		$mdgriffith$elm_ui$Element$layout,
		A2($author$project$Pages$Styles$screen_background, '/assets/ui/background-menu.svg', 0.5),
		$author$project$Pages$Styles$menu_panel(
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						A2($mdgriffith$elm_ui$Element$paddingXY, 42, 44),
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(72)),
								A2($mdgriffith$elm_ui$Element$paddingXY, 5, 0)
							]),
						_List_fromArray(
							[
								A3(
								$author$project$Pages$Styles$panel_button_home,
								_Utils_Tuple2(75, 60),
								model.f === 1,
								$author$project$Pages$Settings$hover_events(1)),
								A4(
								$author$project$Pages$Styles$panel_button,
								_Utils_Tuple3(150, 60, 5),
								'Levels',
								model.f === 2,
								$author$project$Pages$Settings$hover_events(2)),
								A4(
								$author$project$Pages$Styles$panel_button,
								_Utils_Tuple3(150, 60, 10),
								'Score',
								model.f === 3,
								$author$project$Pages$Settings$hover_events(3)),
								A4(
								$author$project$Pages$Styles$panel_button,
								_Utils_Tuple3(150, 60, 15),
								'Guide',
								model.f === 4,
								$author$project$Pages$Settings$hover_events(4)),
								A2(
								$author$project$Pages$Styles$panel_button_inactive,
								_Utils_Tuple3(150, 60, 20),
								'Settings')
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(80)),
								A2($mdgriffith$elm_ui$Element$paddingXY, 0, 10)
							]),
						A2(
							$mdgriffith$elm_ui$Element$Input$username,
							_Utils_ap(
								$author$project$Pages$Styles$fonts.cS,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(260)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(40)),
										$mdgriffith$elm_ui$Element$focused(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Element$Border$glow, $author$project$Pages$Styles$colors.an, 0)
											])),
										$phollyer$elm_cursor$Element$Cursor$text,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$behindContent(
										A2(
											$mdgriffith$elm_ui$Element$image,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(300)),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(60)),
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$moveUp(8),
													$mdgriffith$elm_ui$Element$moveRight(5),
													$phollyer$elm_cursor$Element$Cursor$default
												]),
											{eO: 'text_input', f5: '/assets/ui/text_input.png'}))
									])),
							{
								c2: A2(
									$mdgriffith$elm_ui$Element$Input$labelLeft,
									_Utils_ap(
										$author$project$Pages$Settings$label_text,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$paddingEach(
												{ab: 0, af: 40, ai: 80, ak: 0})
											])),
									$mdgriffith$elm_ui$Element$text('Player name')),
								dr: function (str) {
									return $author$project$Pages$Settings$ChangeName(str);
								},
								fD: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Enter Username'))),
								gd: model.b2.dQ
							})),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(80)),
								A2($mdgriffith$elm_ui$Element$paddingXY, 0, 10),
								$mdgriffith$elm_ui$Element$spacing(20)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								$author$project$Pages$Settings$label_text,
								$mdgriffith$elm_ui$Element$text('Levels unlocked')),
								A2(
								$mdgriffith$elm_ui$Element$Input$slider,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(265)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(40)),
										$mdgriffith$elm_ui$Element$behindContent(
										A2(
											$mdgriffith$elm_ui$Element$image,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(300)),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(40)),
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$moveRight(3)
												]),
											{eO: 'slider', f5: '/assets/ui/slider.png'}))
									]),
								{
									c2: A2(
										$mdgriffith$elm_ui$Element$Input$labelBelow,
										_Utils_ap(
											$author$project$Pages$Styles$fonts.cS,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$Font$size(15)
												])),
										$mdgriffith$elm_ui$Element$text(
											'Current level = ' + $elm$core$String$fromInt(currentLevel))),
									fo: $author$project$User$maxMapNumber,
									fp: 1,
									dr: function (lvl) {
										return $author$project$Pages$Settings$ChangeLevel(lvl);
									},
									f6: $elm$core$Maybe$Just(1),
									gr: $mdgriffith$elm_ui$Element$Input$thumb(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(20)),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(20)),
												$mdgriffith$elm_ui$Element$moveUp(10),
												$mdgriffith$elm_ui$Element$focused(
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Element$Border$glow, $author$project$Pages$Styles$colors.an, 0)
													])),
												$mdgriffith$elm_ui$Element$inFront(
												A2(
													$mdgriffith$elm_ui$Element$image,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
														]),
													{eO: 'slider_thumb', f5: '/assets/ui/slider_thumb.svg'}))
											])),
									gz: currentLevel
								})
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							$author$project$Pages$Styles$fonts.b9,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(50)),
									A2($mdgriffith$elm_ui$Element$paddingXY, 0, 10),
									$mdgriffith$elm_ui$Element$moveDown(10),
									$mdgriffith$elm_ui$Element$Font$size(30),
									$mdgriffith$elm_ui$Element$Font$center,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Pages$Styles$colors.d_)
								])),
						$mdgriffith$elm_ui$Element$text('Difficulty')),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(80)),
								$mdgriffith$elm_ui$Element$moveUp(10),
								$mdgriffith$elm_ui$Element$spaceEvenly,
								A2($mdgriffith$elm_ui$Element$paddingXY, 100, 0)
							]),
						_List_fromArray(
							[
								A3($author$project$Pages$Settings$difficulty_button, 'Easy', model, 5),
								A3($author$project$Pages$Settings$difficulty_button, 'Medium', model, 6),
								A3($author$project$Pages$Settings$difficulty_button, 'Hard', model, 7)
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(100)),
								$mdgriffith$elm_ui$Element$spaceEvenly,
								A2($mdgriffith$elm_ui$Element$paddingXY, 120, 0),
								$mdgriffith$elm_ui$Element$Border$widthEach(
								{ab: 0, af: 0, ai: 0, ak: 2})
							]),
						_List_fromArray(
							[
								A2($author$project$Pages$Settings$save_button, model, 8),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									$author$project$Pages$Styles$fonts.cq,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$centerY,
											$mdgriffith$elm_ui$Element$alignLeft,
											$mdgriffith$elm_ui$Element$Font$size(18),
											$mdgriffith$elm_ui$Element$moveLeft(30)
										])),
								$mdgriffith$elm_ui$Element$text(model.aL))
							]))
					]))));
};
var $author$project$Route$map_view = F2(
	function (state, route) {
		switch (route.$) {
			case 0:
				var model = route.a;
				return A2(
					$elm$html$Html$map,
					$author$project$Route$HomeMsg,
					$author$project$Pages$Home$view(model));
			case 1:
				var model = route.a;
				return A2(
					$elm$html$Html$map,
					$author$project$Route$InfoMsg,
					$author$project$Pages$Info$view(model));
			case 2:
				var model = route.a;
				return A2(
					$elm$html$Html$map,
					$author$project$Route$LevelMsg,
					A2($author$project$Pages$LevelPreview$view, state, model));
			case 3:
				var model = route.a;
				return A2(
					$elm$html$Html$map,
					$author$project$Route$ScoreMsg,
					$author$project$Pages$ScoreBoard$view(model));
			case 4:
				var model = route.a;
				return A2(
					$elm$html$Html$map,
					$author$project$Route$GuideMsg,
					$author$project$Pages$Guide$view(model));
			case 5:
				var model = route.a;
				return A2(
					$elm$html$Html$map,
					$author$project$Route$SettingsMsg,
					$author$project$Pages$Settings$view(model));
			case 6:
				var model = route.a;
				return A2(
					$elm$html$Html$map,
					$author$project$Route$GameMsg,
					A2($author$project$Pages$Game$view, state, model));
			default:
				return A2(
					$elm$html$Html$h1,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('ERROR 404 - Page not found')
						]));
		}
	});
var $author$project$Route$page_view = F3(
	function (mapper, state, route) {
		var pageTitle = function () {
			switch (route.$) {
				case 0:
					return 'Home';
				case 1:
					return 'Info';
				case 2:
					return 'Levels';
				case 3:
					return 'Score';
				case 4:
					return 'Guide';
				case 5:
					return 'Settings';
				case 6:
					return 'Game';
				default:
					return '404 (Not Found)';
			}
		}();
		var pageBody = A2($author$project$Route$map_view, state, route);
		return {
			cE: _List_fromArray(
				[
					A2($elm$html$Html$map, mapper, pageBody)
				]),
			dO: 'Elm TD game - ' + pageTitle
		};
	});
var $author$project$Main$view = function (model) {
	var _v0 = model.C;
	switch (_v0.$) {
		case 1:
			var state = _v0.a;
			var route = _v0.b;
			return A3($author$project$Route$page_view, $author$project$Main$PageMsg, state, route);
		case 0:
			return {
				cE: _List_fromArray(
					[
						$elm$html$Html$text('Loading')
					]),
				dO: 'Loading'
			};
		default:
			return {
				cE: _List_fromArray(
					[
						$elm$html$Html$text('ERROR: Application failed to inialize!')
					]),
				dO: 'Failure'
			};
	}
};
var $author$project$Main$main = $elm$browser$Browser$application(
	{fd: $author$project$Main$init, fw: $author$project$Main$UrlChanged, fx: $author$project$Main$LinkClicked, ga: $author$project$Main$subscriptions, gy: $author$project$Main$update, gA: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main($elm$json$Json$Decode$value)(0)}});}(this));